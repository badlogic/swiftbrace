"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/matter-js/build/matter.js
  var require_matter = __commonJS({
    "node_modules/matter-js/build/matter.js"(exports, module) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define("Matter", [], factory);
        else if (typeof exports === "object")
          exports["Matter"] = factory();
        else
          root["Matter"] = factory();
      })(exports, function() {
        return (
          /******/
          function(modules) {
            var installedModules = {};
            function __webpack_require__(moduleId) {
              if (installedModules[moduleId]) {
                return installedModules[moduleId].exports;
              }
              var module2 = installedModules[moduleId] = {
                /******/
                i: moduleId,
                /******/
                l: false,
                /******/
                exports: {}
                /******/
              };
              modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
              module2.l = true;
              return module2.exports;
            }
            __webpack_require__.m = modules;
            __webpack_require__.c = installedModules;
            __webpack_require__.d = function(exports2, name, getter) {
              if (!__webpack_require__.o(exports2, name)) {
                Object.defineProperty(exports2, name, { enumerable: true, get: getter });
              }
            };
            __webpack_require__.r = function(exports2) {
              if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
              }
              Object.defineProperty(exports2, "__esModule", { value: true });
            };
            __webpack_require__.t = function(value, mode) {
              if (mode & 1) value = __webpack_require__(value);
              if (mode & 8) return value;
              if (mode & 4 && typeof value === "object" && value && value.__esModule) return value;
              var ns = /* @__PURE__ */ Object.create(null);
              __webpack_require__.r(ns);
              Object.defineProperty(ns, "default", { enumerable: true, value });
              if (mode & 2 && typeof value != "string") for (var key in value) __webpack_require__.d(ns, key, function(key2) {
                return value[key2];
              }.bind(null, key));
              return ns;
            };
            __webpack_require__.n = function(module2) {
              var getter = module2 && module2.__esModule ? (
                /******/
                function getDefault() {
                  return module2["default"];
                }
              ) : (
                /******/
                function getModuleExports() {
                  return module2;
                }
              );
              __webpack_require__.d(getter, "a", getter);
              return getter;
            };
            __webpack_require__.o = function(object, property) {
              return Object.prototype.hasOwnProperty.call(object, property);
            };
            __webpack_require__.p = "";
            return __webpack_require__(__webpack_require__.s = 20);
          }([
            /* 0 */
            /***/
            function(module2, exports2) {
              var Common = {};
              module2.exports = Common;
              (function() {
                Common._baseDelta = 1e3 / 60;
                Common._nextId = 0;
                Common._seed = 0;
                Common._nowStartTime = +/* @__PURE__ */ new Date();
                Common._warnedOnce = {};
                Common._decomp = null;
                Common.extend = function(obj, deep) {
                  var argsStart, args, deepClone;
                  if (typeof deep === "boolean") {
                    argsStart = 2;
                    deepClone = deep;
                  } else {
                    argsStart = 1;
                    deepClone = true;
                  }
                  for (var i = argsStart; i < arguments.length; i++) {
                    var source = arguments[i];
                    if (source) {
                      for (var prop in source) {
                        if (deepClone && source[prop] && source[prop].constructor === Object) {
                          if (!obj[prop] || obj[prop].constructor === Object) {
                            obj[prop] = obj[prop] || {};
                            Common.extend(obj[prop], deepClone, source[prop]);
                          } else {
                            obj[prop] = source[prop];
                          }
                        } else {
                          obj[prop] = source[prop];
                        }
                      }
                    }
                  }
                  return obj;
                };
                Common.clone = function(obj, deep) {
                  return Common.extend({}, deep, obj);
                };
                Common.keys = function(obj) {
                  if (Object.keys)
                    return Object.keys(obj);
                  var keys = [];
                  for (var key in obj)
                    keys.push(key);
                  return keys;
                };
                Common.values = function(obj) {
                  var values = [];
                  if (Object.keys) {
                    var keys = Object.keys(obj);
                    for (var i = 0; i < keys.length; i++) {
                      values.push(obj[keys[i]]);
                    }
                    return values;
                  }
                  for (var key in obj)
                    values.push(obj[key]);
                  return values;
                };
                Common.get = function(obj, path, begin, end) {
                  path = path.split(".").slice(begin, end);
                  for (var i = 0; i < path.length; i += 1) {
                    obj = obj[path[i]];
                  }
                  return obj;
                };
                Common.set = function(obj, path, val, begin, end) {
                  var parts = path.split(".").slice(begin, end);
                  Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;
                  return val;
                };
                Common.shuffle = function(array) {
                  for (var i = array.length - 1; i > 0; i--) {
                    var j = Math.floor(Common.random() * (i + 1));
                    var temp = array[i];
                    array[i] = array[j];
                    array[j] = temp;
                  }
                  return array;
                };
                Common.choose = function(choices) {
                  return choices[Math.floor(Common.random() * choices.length)];
                };
                Common.isElement = function(obj) {
                  if (typeof HTMLElement !== "undefined") {
                    return obj instanceof HTMLElement;
                  }
                  return !!(obj && obj.nodeType && obj.nodeName);
                };
                Common.isArray = function(obj) {
                  return Object.prototype.toString.call(obj) === "[object Array]";
                };
                Common.isFunction = function(obj) {
                  return typeof obj === "function";
                };
                Common.isPlainObject = function(obj) {
                  return typeof obj === "object" && obj.constructor === Object;
                };
                Common.isString = function(obj) {
                  return toString.call(obj) === "[object String]";
                };
                Common.clamp = function(value, min, max) {
                  if (value < min)
                    return min;
                  if (value > max)
                    return max;
                  return value;
                };
                Common.sign = function(value) {
                  return value < 0 ? -1 : 1;
                };
                Common.now = function() {
                  if (typeof window !== "undefined" && window.performance) {
                    if (window.performance.now) {
                      return window.performance.now();
                    } else if (window.performance.webkitNow) {
                      return window.performance.webkitNow();
                    }
                  }
                  if (Date.now) {
                    return Date.now();
                  }
                  return /* @__PURE__ */ new Date() - Common._nowStartTime;
                };
                Common.random = function(min, max) {
                  min = typeof min !== "undefined" ? min : 0;
                  max = typeof max !== "undefined" ? max : 1;
                  return min + _seededRandom() * (max - min);
                };
                var _seededRandom = function() {
                  Common._seed = (Common._seed * 9301 + 49297) % 233280;
                  return Common._seed / 233280;
                };
                Common.colorToNumber = function(colorString) {
                  colorString = colorString.replace("#", "");
                  if (colorString.length == 3) {
                    colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);
                  }
                  return parseInt(colorString, 16);
                };
                Common.logLevel = 1;
                Common.log = function() {
                  if (console && Common.logLevel > 0 && Common.logLevel <= 3) {
                    console.log.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)));
                  }
                };
                Common.info = function() {
                  if (console && Common.logLevel > 0 && Common.logLevel <= 2) {
                    console.info.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)));
                  }
                };
                Common.warn = function() {
                  if (console && Common.logLevel > 0 && Common.logLevel <= 3) {
                    console.warn.apply(console, ["matter-js:"].concat(Array.prototype.slice.call(arguments)));
                  }
                };
                Common.warnOnce = function() {
                  var message = Array.prototype.slice.call(arguments).join(" ");
                  if (!Common._warnedOnce[message]) {
                    Common.warn(message);
                    Common._warnedOnce[message] = true;
                  }
                };
                Common.deprecated = function(obj, prop, warning) {
                  obj[prop] = Common.chain(function() {
                    Common.warnOnce("\u{1F505} deprecated \u{1F505}", warning);
                  }, obj[prop]);
                };
                Common.nextId = function() {
                  return Common._nextId++;
                };
                Common.indexOf = function(haystack, needle) {
                  if (haystack.indexOf)
                    return haystack.indexOf(needle);
                  for (var i = 0; i < haystack.length; i++) {
                    if (haystack[i] === needle)
                      return i;
                  }
                  return -1;
                };
                Common.map = function(list, func) {
                  if (list.map) {
                    return list.map(func);
                  }
                  var mapped = [];
                  for (var i = 0; i < list.length; i += 1) {
                    mapped.push(func(list[i]));
                  }
                  return mapped;
                };
                Common.topologicalSort = function(graph) {
                  var result = [], visited = [], temp = [];
                  for (var node in graph) {
                    if (!visited[node] && !temp[node]) {
                      Common._topologicalSort(node, visited, temp, graph, result);
                    }
                  }
                  return result;
                };
                Common._topologicalSort = function(node, visited, temp, graph, result) {
                  var neighbors = graph[node] || [];
                  temp[node] = true;
                  for (var i = 0; i < neighbors.length; i += 1) {
                    var neighbor = neighbors[i];
                    if (temp[neighbor]) {
                      continue;
                    }
                    if (!visited[neighbor]) {
                      Common._topologicalSort(neighbor, visited, temp, graph, result);
                    }
                  }
                  temp[node] = false;
                  visited[node] = true;
                  result.push(node);
                };
                Common.chain = function() {
                  var funcs = [];
                  for (var i = 0; i < arguments.length; i += 1) {
                    var func = arguments[i];
                    if (func._chained) {
                      funcs.push.apply(funcs, func._chained);
                    } else {
                      funcs.push(func);
                    }
                  }
                  var chain = function() {
                    var lastResult, args = new Array(arguments.length);
                    for (var i2 = 0, l = arguments.length; i2 < l; i2++) {
                      args[i2] = arguments[i2];
                    }
                    for (i2 = 0; i2 < funcs.length; i2 += 1) {
                      var result = funcs[i2].apply(lastResult, args);
                      if (typeof result !== "undefined") {
                        lastResult = result;
                      }
                    }
                    return lastResult;
                  };
                  chain._chained = funcs;
                  return chain;
                };
                Common.chainPathBefore = function(base, path, func) {
                  return Common.set(base, path, Common.chain(
                    func,
                    Common.get(base, path)
                  ));
                };
                Common.chainPathAfter = function(base, path, func) {
                  return Common.set(base, path, Common.chain(
                    Common.get(base, path),
                    func
                  ));
                };
                Common.setDecomp = function(decomp) {
                  Common._decomp = decomp;
                };
                Common.getDecomp = function() {
                  var decomp = Common._decomp;
                  try {
                    if (!decomp && typeof window !== "undefined") {
                      decomp = window.decomp;
                    }
                    if (!decomp && typeof global !== "undefined") {
                      decomp = global.decomp;
                    }
                  } catch (e) {
                    decomp = null;
                  }
                  return decomp;
                };
              })();
            },
            /* 1 */
            /***/
            function(module2, exports2) {
              var Bounds = {};
              module2.exports = Bounds;
              (function() {
                Bounds.create = function(vertices) {
                  var bounds = {
                    min: { x: 0, y: 0 },
                    max: { x: 0, y: 0 }
                  };
                  if (vertices)
                    Bounds.update(bounds, vertices);
                  return bounds;
                };
                Bounds.update = function(bounds, vertices, velocity) {
                  bounds.min.x = Infinity;
                  bounds.max.x = -Infinity;
                  bounds.min.y = Infinity;
                  bounds.max.y = -Infinity;
                  for (var i = 0; i < vertices.length; i++) {
                    var vertex = vertices[i];
                    if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;
                    if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;
                    if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;
                    if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;
                  }
                  if (velocity) {
                    if (velocity.x > 0) {
                      bounds.max.x += velocity.x;
                    } else {
                      bounds.min.x += velocity.x;
                    }
                    if (velocity.y > 0) {
                      bounds.max.y += velocity.y;
                    } else {
                      bounds.min.y += velocity.y;
                    }
                  }
                };
                Bounds.contains = function(bounds, point) {
                  return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;
                };
                Bounds.overlaps = function(boundsA, boundsB) {
                  return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;
                };
                Bounds.translate = function(bounds, vector) {
                  bounds.min.x += vector.x;
                  bounds.max.x += vector.x;
                  bounds.min.y += vector.y;
                  bounds.max.y += vector.y;
                };
                Bounds.shift = function(bounds, position) {
                  var deltaX = bounds.max.x - bounds.min.x, deltaY = bounds.max.y - bounds.min.y;
                  bounds.min.x = position.x;
                  bounds.max.x = position.x + deltaX;
                  bounds.min.y = position.y;
                  bounds.max.y = position.y + deltaY;
                };
              })();
            },
            /* 2 */
            /***/
            function(module2, exports2) {
              var Vector3 = {};
              module2.exports = Vector3;
              (function() {
                Vector3.create = function(x, y) {
                  return { x: x || 0, y: y || 0 };
                };
                Vector3.clone = function(vector) {
                  return { x: vector.x, y: vector.y };
                };
                Vector3.magnitude = function(vector) {
                  return Math.sqrt(vector.x * vector.x + vector.y * vector.y);
                };
                Vector3.magnitudeSquared = function(vector) {
                  return vector.x * vector.x + vector.y * vector.y;
                };
                Vector3.rotate = function(vector, angle, output) {
                  var cos = Math.cos(angle), sin = Math.sin(angle);
                  if (!output) output = {};
                  var x = vector.x * cos - vector.y * sin;
                  output.y = vector.x * sin + vector.y * cos;
                  output.x = x;
                  return output;
                };
                Vector3.rotateAbout = function(vector, angle, point, output) {
                  var cos = Math.cos(angle), sin = Math.sin(angle);
                  if (!output) output = {};
                  var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);
                  output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);
                  output.x = x;
                  return output;
                };
                Vector3.normalise = function(vector) {
                  var magnitude = Vector3.magnitude(vector);
                  if (magnitude === 0)
                    return { x: 0, y: 0 };
                  return { x: vector.x / magnitude, y: vector.y / magnitude };
                };
                Vector3.dot = function(vectorA, vectorB) {
                  return vectorA.x * vectorB.x + vectorA.y * vectorB.y;
                };
                Vector3.cross = function(vectorA, vectorB) {
                  return vectorA.x * vectorB.y - vectorA.y * vectorB.x;
                };
                Vector3.cross3 = function(vectorA, vectorB, vectorC) {
                  return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);
                };
                Vector3.add = function(vectorA, vectorB, output) {
                  if (!output) output = {};
                  output.x = vectorA.x + vectorB.x;
                  output.y = vectorA.y + vectorB.y;
                  return output;
                };
                Vector3.sub = function(vectorA, vectorB, output) {
                  if (!output) output = {};
                  output.x = vectorA.x - vectorB.x;
                  output.y = vectorA.y - vectorB.y;
                  return output;
                };
                Vector3.mult = function(vector, scalar) {
                  return { x: vector.x * scalar, y: vector.y * scalar };
                };
                Vector3.div = function(vector, scalar) {
                  return { x: vector.x / scalar, y: vector.y / scalar };
                };
                Vector3.perp = function(vector, negate) {
                  negate = negate === true ? -1 : 1;
                  return { x: negate * -vector.y, y: negate * vector.x };
                };
                Vector3.neg = function(vector) {
                  return { x: -vector.x, y: -vector.y };
                };
                Vector3.angle = function(vectorA, vectorB) {
                  return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);
                };
                Vector3._temp = [
                  Vector3.create(),
                  Vector3.create(),
                  Vector3.create(),
                  Vector3.create(),
                  Vector3.create(),
                  Vector3.create()
                ];
              })();
            },
            /* 3 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Vertices = {};
              module2.exports = Vertices;
              var Vector3 = __webpack_require__(2);
              var Common = __webpack_require__(0);
              (function() {
                Vertices.create = function(points, body) {
                  var vertices = [];
                  for (var i = 0; i < points.length; i++) {
                    var point = points[i], vertex = {
                      x: point.x,
                      y: point.y,
                      index: i,
                      body,
                      isInternal: false
                    };
                    vertices.push(vertex);
                  }
                  return vertices;
                };
                Vertices.fromPath = function(path, body) {
                  var pathPattern = /L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/ig, points = [];
                  path.replace(pathPattern, function(match, x, y) {
                    points.push({ x: parseFloat(x), y: parseFloat(y) });
                  });
                  return Vertices.create(points, body);
                };
                Vertices.centre = function(vertices) {
                  var area = Vertices.area(vertices, true), centre = { x: 0, y: 0 }, cross, temp, j;
                  for (var i = 0; i < vertices.length; i++) {
                    j = (i + 1) % vertices.length;
                    cross = Vector3.cross(vertices[i], vertices[j]);
                    temp = Vector3.mult(Vector3.add(vertices[i], vertices[j]), cross);
                    centre = Vector3.add(centre, temp);
                  }
                  return Vector3.div(centre, 6 * area);
                };
                Vertices.mean = function(vertices) {
                  var average = { x: 0, y: 0 };
                  for (var i = 0; i < vertices.length; i++) {
                    average.x += vertices[i].x;
                    average.y += vertices[i].y;
                  }
                  return Vector3.div(average, vertices.length);
                };
                Vertices.area = function(vertices, signed) {
                  var area = 0, j = vertices.length - 1;
                  for (var i = 0; i < vertices.length; i++) {
                    area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);
                    j = i;
                  }
                  if (signed)
                    return area / 2;
                  return Math.abs(area) / 2;
                };
                Vertices.inertia = function(vertices, mass) {
                  var numerator = 0, denominator = 0, v = vertices, cross, j;
                  for (var n = 0; n < v.length; n++) {
                    j = (n + 1) % v.length;
                    cross = Math.abs(Vector3.cross(v[j], v[n]));
                    numerator += cross * (Vector3.dot(v[j], v[j]) + Vector3.dot(v[j], v[n]) + Vector3.dot(v[n], v[n]));
                    denominator += cross;
                  }
                  return mass / 6 * (numerator / denominator);
                };
                Vertices.translate = function(vertices, vector, scalar) {
                  scalar = typeof scalar !== "undefined" ? scalar : 1;
                  var verticesLength = vertices.length, translateX = vector.x * scalar, translateY = vector.y * scalar, i;
                  for (i = 0; i < verticesLength; i++) {
                    vertices[i].x += translateX;
                    vertices[i].y += translateY;
                  }
                  return vertices;
                };
                Vertices.rotate = function(vertices, angle, point) {
                  if (angle === 0)
                    return;
                  var cos = Math.cos(angle), sin = Math.sin(angle), pointX = point.x, pointY = point.y, verticesLength = vertices.length, vertex, dx, dy, i;
                  for (i = 0; i < verticesLength; i++) {
                    vertex = vertices[i];
                    dx = vertex.x - pointX;
                    dy = vertex.y - pointY;
                    vertex.x = pointX + (dx * cos - dy * sin);
                    vertex.y = pointY + (dx * sin + dy * cos);
                  }
                  return vertices;
                };
                Vertices.contains = function(vertices, point) {
                  var pointX = point.x, pointY = point.y, verticesLength = vertices.length, vertex = vertices[verticesLength - 1], nextVertex;
                  for (var i = 0; i < verticesLength; i++) {
                    nextVertex = vertices[i];
                    if ((pointX - vertex.x) * (nextVertex.y - vertex.y) + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {
                      return false;
                    }
                    vertex = nextVertex;
                  }
                  return true;
                };
                Vertices.scale = function(vertices, scaleX, scaleY, point) {
                  if (scaleX === 1 && scaleY === 1)
                    return vertices;
                  point = point || Vertices.centre(vertices);
                  var vertex, delta;
                  for (var i = 0; i < vertices.length; i++) {
                    vertex = vertices[i];
                    delta = Vector3.sub(vertex, point);
                    vertices[i].x = point.x + delta.x * scaleX;
                    vertices[i].y = point.y + delta.y * scaleY;
                  }
                  return vertices;
                };
                Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {
                  if (typeof radius === "number") {
                    radius = [radius];
                  } else {
                    radius = radius || [8];
                  }
                  quality = typeof quality !== "undefined" ? quality : -1;
                  qualityMin = qualityMin || 2;
                  qualityMax = qualityMax || 14;
                  var newVertices = [];
                  for (var i = 0; i < vertices.length; i++) {
                    var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1], vertex = vertices[i], nextVertex = vertices[(i + 1) % vertices.length], currentRadius = radius[i < radius.length ? i : radius.length - 1];
                    if (currentRadius === 0) {
                      newVertices.push(vertex);
                      continue;
                    }
                    var prevNormal = Vector3.normalise({
                      x: vertex.y - prevVertex.y,
                      y: prevVertex.x - vertex.x
                    });
                    var nextNormal = Vector3.normalise({
                      x: nextVertex.y - vertex.y,
                      y: vertex.x - nextVertex.x
                    });
                    var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)), radiusVector = Vector3.mult(Common.clone(prevNormal), currentRadius), midNormal = Vector3.normalise(Vector3.mult(Vector3.add(prevNormal, nextNormal), 0.5)), scaledVertex = Vector3.sub(vertex, Vector3.mult(midNormal, diagonalRadius));
                    var precision = quality;
                    if (quality === -1) {
                      precision = Math.pow(currentRadius, 0.32) * 1.75;
                    }
                    precision = Common.clamp(precision, qualityMin, qualityMax);
                    if (precision % 2 === 1)
                      precision += 1;
                    var alpha = Math.acos(Vector3.dot(prevNormal, nextNormal)), theta = alpha / precision;
                    for (var j = 0; j < precision; j++) {
                      newVertices.push(Vector3.add(Vector3.rotate(radiusVector, theta * j), scaledVertex));
                    }
                  }
                  return newVertices;
                };
                Vertices.clockwiseSort = function(vertices) {
                  var centre = Vertices.mean(vertices);
                  vertices.sort(function(vertexA, vertexB) {
                    return Vector3.angle(centre, vertexA) - Vector3.angle(centre, vertexB);
                  });
                  return vertices;
                };
                Vertices.isConvex = function(vertices) {
                  var flag = 0, n = vertices.length, i, j, k, z;
                  if (n < 3)
                    return null;
                  for (i = 0; i < n; i++) {
                    j = (i + 1) % n;
                    k = (i + 2) % n;
                    z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);
                    z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);
                    if (z < 0) {
                      flag |= 1;
                    } else if (z > 0) {
                      flag |= 2;
                    }
                    if (flag === 3) {
                      return false;
                    }
                  }
                  if (flag !== 0) {
                    return true;
                  } else {
                    return null;
                  }
                };
                Vertices.hull = function(vertices) {
                  var upper = [], lower = [], vertex, i;
                  vertices = vertices.slice(0);
                  vertices.sort(function(vertexA, vertexB) {
                    var dx = vertexA.x - vertexB.x;
                    return dx !== 0 ? dx : vertexA.y - vertexB.y;
                  });
                  for (i = 0; i < vertices.length; i += 1) {
                    vertex = vertices[i];
                    while (lower.length >= 2 && Vector3.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {
                      lower.pop();
                    }
                    lower.push(vertex);
                  }
                  for (i = vertices.length - 1; i >= 0; i -= 1) {
                    vertex = vertices[i];
                    while (upper.length >= 2 && Vector3.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {
                      upper.pop();
                    }
                    upper.push(vertex);
                  }
                  upper.pop();
                  lower.pop();
                  return upper.concat(lower);
                };
              })();
            },
            /* 4 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Body2 = {};
              module2.exports = Body2;
              var Vertices = __webpack_require__(3);
              var Vector3 = __webpack_require__(2);
              var Sleeping = __webpack_require__(7);
              var Common = __webpack_require__(0);
              var Bounds = __webpack_require__(1);
              var Axes = __webpack_require__(11);
              (function() {
                Body2._timeCorrection = true;
                Body2._inertiaScale = 4;
                Body2._nextCollidingGroupId = 1;
                Body2._nextNonCollidingGroupId = -1;
                Body2._nextCategory = 1;
                Body2._baseDelta = 1e3 / 60;
                Body2.create = function(options) {
                  var defaults = {
                    id: Common.nextId(),
                    type: "body",
                    label: "Body",
                    parts: [],
                    plugin: {},
                    angle: 0,
                    vertices: Vertices.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),
                    position: { x: 0, y: 0 },
                    force: { x: 0, y: 0 },
                    torque: 0,
                    positionImpulse: { x: 0, y: 0 },
                    constraintImpulse: { x: 0, y: 0, angle: 0 },
                    totalContacts: 0,
                    speed: 0,
                    angularSpeed: 0,
                    velocity: { x: 0, y: 0 },
                    angularVelocity: 0,
                    isSensor: false,
                    isStatic: false,
                    isSleeping: false,
                    motion: 0,
                    sleepThreshold: 60,
                    density: 1e-3,
                    restitution: 0,
                    friction: 0.1,
                    frictionStatic: 0.5,
                    frictionAir: 0.01,
                    collisionFilter: {
                      category: 1,
                      mask: 4294967295,
                      group: 0
                    },
                    slop: 0.05,
                    timeScale: 1,
                    render: {
                      visible: true,
                      opacity: 1,
                      strokeStyle: null,
                      fillStyle: null,
                      lineWidth: null,
                      sprite: {
                        xScale: 1,
                        yScale: 1,
                        xOffset: 0,
                        yOffset: 0
                      }
                    },
                    events: null,
                    bounds: null,
                    chamfer: null,
                    circleRadius: 0,
                    positionPrev: null,
                    anglePrev: 0,
                    parent: null,
                    axes: null,
                    area: 0,
                    mass: 0,
                    inertia: 0,
                    deltaTime: 1e3 / 60,
                    _original: null
                  };
                  var body = Common.extend(defaults, options);
                  _initProperties(body, options);
                  return body;
                };
                Body2.nextGroup = function(isNonColliding) {
                  if (isNonColliding)
                    return Body2._nextNonCollidingGroupId--;
                  return Body2._nextCollidingGroupId++;
                };
                Body2.nextCategory = function() {
                  Body2._nextCategory = Body2._nextCategory << 1;
                  return Body2._nextCategory;
                };
                var _initProperties = function(body, options) {
                  options = options || {};
                  Body2.set(body, {
                    bounds: body.bounds || Bounds.create(body.vertices),
                    positionPrev: body.positionPrev || Vector3.clone(body.position),
                    anglePrev: body.anglePrev || body.angle,
                    vertices: body.vertices,
                    parts: body.parts || [body],
                    isStatic: body.isStatic,
                    isSleeping: body.isSleeping,
                    parent: body.parent || body
                  });
                  Vertices.rotate(body.vertices, body.angle, body.position);
                  Axes.rotate(body.axes, body.angle);
                  Bounds.update(body.bounds, body.vertices, body.velocity);
                  Body2.set(body, {
                    axes: options.axes || body.axes,
                    area: options.area || body.area,
                    mass: options.mass || body.mass,
                    inertia: options.inertia || body.inertia
                  });
                  var defaultFillStyle = body.isStatic ? "#14151f" : Common.choose(["#f19648", "#f5d259", "#f55a3c", "#063e7b", "#ececd1"]), defaultStrokeStyle = body.isStatic ? "#555" : "#ccc", defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;
                  body.render.fillStyle = body.render.fillStyle || defaultFillStyle;
                  body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;
                  body.render.lineWidth = body.render.lineWidth || defaultLineWidth;
                  body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);
                  body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);
                };
                Body2.set = function(body, settings, value) {
                  var property;
                  if (typeof settings === "string") {
                    property = settings;
                    settings = {};
                    settings[property] = value;
                  }
                  for (property in settings) {
                    if (!Object.prototype.hasOwnProperty.call(settings, property))
                      continue;
                    value = settings[property];
                    switch (property) {
                      case "isStatic":
                        Body2.setStatic(body, value);
                        break;
                      case "isSleeping":
                        Sleeping.set(body, value);
                        break;
                      case "mass":
                        Body2.setMass(body, value);
                        break;
                      case "density":
                        Body2.setDensity(body, value);
                        break;
                      case "inertia":
                        Body2.setInertia(body, value);
                        break;
                      case "vertices":
                        Body2.setVertices(body, value);
                        break;
                      case "position":
                        Body2.setPosition(body, value);
                        break;
                      case "angle":
                        Body2.setAngle(body, value);
                        break;
                      case "velocity":
                        Body2.setVelocity(body, value);
                        break;
                      case "angularVelocity":
                        Body2.setAngularVelocity(body, value);
                        break;
                      case "speed":
                        Body2.setSpeed(body, value);
                        break;
                      case "angularSpeed":
                        Body2.setAngularSpeed(body, value);
                        break;
                      case "parts":
                        Body2.setParts(body, value);
                        break;
                      case "centre":
                        Body2.setCentre(body, value);
                        break;
                      default:
                        body[property] = value;
                    }
                  }
                };
                Body2.setStatic = function(body, isStatic) {
                  for (var i = 0; i < body.parts.length; i++) {
                    var part = body.parts[i];
                    if (isStatic) {
                      if (!part.isStatic) {
                        part._original = {
                          restitution: part.restitution,
                          friction: part.friction,
                          mass: part.mass,
                          inertia: part.inertia,
                          density: part.density,
                          inverseMass: part.inverseMass,
                          inverseInertia: part.inverseInertia
                        };
                      }
                      part.restitution = 0;
                      part.friction = 1;
                      part.mass = part.inertia = part.density = Infinity;
                      part.inverseMass = part.inverseInertia = 0;
                      part.positionPrev.x = part.position.x;
                      part.positionPrev.y = part.position.y;
                      part.anglePrev = part.angle;
                      part.angularVelocity = 0;
                      part.speed = 0;
                      part.angularSpeed = 0;
                      part.motion = 0;
                    } else if (part._original) {
                      part.restitution = part._original.restitution;
                      part.friction = part._original.friction;
                      part.mass = part._original.mass;
                      part.inertia = part._original.inertia;
                      part.density = part._original.density;
                      part.inverseMass = part._original.inverseMass;
                      part.inverseInertia = part._original.inverseInertia;
                      part._original = null;
                    }
                    part.isStatic = isStatic;
                  }
                };
                Body2.setMass = function(body, mass) {
                  var moment = body.inertia / (body.mass / 6);
                  body.inertia = moment * (mass / 6);
                  body.inverseInertia = 1 / body.inertia;
                  body.mass = mass;
                  body.inverseMass = 1 / body.mass;
                  body.density = body.mass / body.area;
                };
                Body2.setDensity = function(body, density) {
                  Body2.setMass(body, density * body.area);
                  body.density = density;
                };
                Body2.setInertia = function(body, inertia) {
                  body.inertia = inertia;
                  body.inverseInertia = 1 / body.inertia;
                };
                Body2.setVertices = function(body, vertices) {
                  if (vertices[0].body === body) {
                    body.vertices = vertices;
                  } else {
                    body.vertices = Vertices.create(vertices, body);
                  }
                  body.axes = Axes.fromVertices(body.vertices);
                  body.area = Vertices.area(body.vertices);
                  Body2.setMass(body, body.density * body.area);
                  var centre = Vertices.centre(body.vertices);
                  Vertices.translate(body.vertices, centre, -1);
                  Body2.setInertia(body, Body2._inertiaScale * Vertices.inertia(body.vertices, body.mass));
                  Vertices.translate(body.vertices, body.position);
                  Bounds.update(body.bounds, body.vertices, body.velocity);
                };
                Body2.setParts = function(body, parts, autoHull) {
                  var i;
                  parts = parts.slice(0);
                  body.parts.length = 0;
                  body.parts.push(body);
                  body.parent = body;
                  for (i = 0; i < parts.length; i++) {
                    var part = parts[i];
                    if (part !== body) {
                      part.parent = body;
                      body.parts.push(part);
                    }
                  }
                  if (body.parts.length === 1)
                    return;
                  autoHull = typeof autoHull !== "undefined" ? autoHull : true;
                  if (autoHull) {
                    var vertices = [];
                    for (i = 0; i < parts.length; i++) {
                      vertices = vertices.concat(parts[i].vertices);
                    }
                    Vertices.clockwiseSort(vertices);
                    var hull = Vertices.hull(vertices), hullCentre = Vertices.centre(hull);
                    Body2.setVertices(body, hull);
                    Vertices.translate(body.vertices, hullCentre);
                  }
                  var total2 = Body2._totalProperties(body);
                  body.area = total2.area;
                  body.parent = body;
                  body.position.x = total2.centre.x;
                  body.position.y = total2.centre.y;
                  body.positionPrev.x = total2.centre.x;
                  body.positionPrev.y = total2.centre.y;
                  Body2.setMass(body, total2.mass);
                  Body2.setInertia(body, total2.inertia);
                  Body2.setPosition(body, total2.centre);
                };
                Body2.setCentre = function(body, centre, relative) {
                  if (!relative) {
                    body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);
                    body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);
                    body.position.x = centre.x;
                    body.position.y = centre.y;
                  } else {
                    body.positionPrev.x += centre.x;
                    body.positionPrev.y += centre.y;
                    body.position.x += centre.x;
                    body.position.y += centre.y;
                  }
                };
                Body2.setPosition = function(body, position, updateVelocity) {
                  var delta = Vector3.sub(position, body.position);
                  if (updateVelocity) {
                    body.positionPrev.x = body.position.x;
                    body.positionPrev.y = body.position.y;
                    body.velocity.x = delta.x;
                    body.velocity.y = delta.y;
                    body.speed = Vector3.magnitude(delta);
                  } else {
                    body.positionPrev.x += delta.x;
                    body.positionPrev.y += delta.y;
                  }
                  for (var i = 0; i < body.parts.length; i++) {
                    var part = body.parts[i];
                    part.position.x += delta.x;
                    part.position.y += delta.y;
                    Vertices.translate(part.vertices, delta);
                    Bounds.update(part.bounds, part.vertices, body.velocity);
                  }
                };
                Body2.setAngle = function(body, angle, updateVelocity) {
                  var delta = angle - body.angle;
                  if (updateVelocity) {
                    body.anglePrev = body.angle;
                    body.angularVelocity = delta;
                    body.angularSpeed = Math.abs(delta);
                  } else {
                    body.anglePrev += delta;
                  }
                  for (var i = 0; i < body.parts.length; i++) {
                    var part = body.parts[i];
                    part.angle += delta;
                    Vertices.rotate(part.vertices, delta, body.position);
                    Axes.rotate(part.axes, delta);
                    Bounds.update(part.bounds, part.vertices, body.velocity);
                    if (i > 0) {
                      Vector3.rotateAbout(part.position, delta, body.position, part.position);
                    }
                  }
                };
                Body2.setVelocity = function(body, velocity) {
                  var timeScale = body.deltaTime / Body2._baseDelta;
                  body.positionPrev.x = body.position.x - velocity.x * timeScale;
                  body.positionPrev.y = body.position.y - velocity.y * timeScale;
                  body.velocity.x = (body.position.x - body.positionPrev.x) / timeScale;
                  body.velocity.y = (body.position.y - body.positionPrev.y) / timeScale;
                  body.speed = Vector3.magnitude(body.velocity);
                };
                Body2.getVelocity = function(body) {
                  var timeScale = Body2._baseDelta / body.deltaTime;
                  return {
                    x: (body.position.x - body.positionPrev.x) * timeScale,
                    y: (body.position.y - body.positionPrev.y) * timeScale
                  };
                };
                Body2.getSpeed = function(body) {
                  return Vector3.magnitude(Body2.getVelocity(body));
                };
                Body2.setSpeed = function(body, speed) {
                  Body2.setVelocity(body, Vector3.mult(Vector3.normalise(Body2.getVelocity(body)), speed));
                };
                Body2.setAngularVelocity = function(body, velocity) {
                  var timeScale = body.deltaTime / Body2._baseDelta;
                  body.anglePrev = body.angle - velocity * timeScale;
                  body.angularVelocity = (body.angle - body.anglePrev) / timeScale;
                  body.angularSpeed = Math.abs(body.angularVelocity);
                };
                Body2.getAngularVelocity = function(body) {
                  return (body.angle - body.anglePrev) * Body2._baseDelta / body.deltaTime;
                };
                Body2.getAngularSpeed = function(body) {
                  return Math.abs(Body2.getAngularVelocity(body));
                };
                Body2.setAngularSpeed = function(body, speed) {
                  Body2.setAngularVelocity(body, Common.sign(Body2.getAngularVelocity(body)) * speed);
                };
                Body2.translate = function(body, translation, updateVelocity) {
                  Body2.setPosition(body, Vector3.add(body.position, translation), updateVelocity);
                };
                Body2.rotate = function(body, rotation, point, updateVelocity) {
                  if (!point) {
                    Body2.setAngle(body, body.angle + rotation, updateVelocity);
                  } else {
                    var cos = Math.cos(rotation), sin = Math.sin(rotation), dx = body.position.x - point.x, dy = body.position.y - point.y;
                    Body2.setPosition(body, {
                      x: point.x + (dx * cos - dy * sin),
                      y: point.y + (dx * sin + dy * cos)
                    }, updateVelocity);
                    Body2.setAngle(body, body.angle + rotation, updateVelocity);
                  }
                };
                Body2.scale = function(body, scaleX, scaleY, point) {
                  var totalArea = 0, totalInertia = 0;
                  point = point || body.position;
                  for (var i = 0; i < body.parts.length; i++) {
                    var part = body.parts[i];
                    Vertices.scale(part.vertices, scaleX, scaleY, point);
                    part.axes = Axes.fromVertices(part.vertices);
                    part.area = Vertices.area(part.vertices);
                    Body2.setMass(part, body.density * part.area);
                    Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });
                    Body2.setInertia(part, Body2._inertiaScale * Vertices.inertia(part.vertices, part.mass));
                    Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });
                    if (i > 0) {
                      totalArea += part.area;
                      totalInertia += part.inertia;
                    }
                    part.position.x = point.x + (part.position.x - point.x) * scaleX;
                    part.position.y = point.y + (part.position.y - point.y) * scaleY;
                    Bounds.update(part.bounds, part.vertices, body.velocity);
                  }
                  if (body.parts.length > 1) {
                    body.area = totalArea;
                    if (!body.isStatic) {
                      Body2.setMass(body, body.density * totalArea);
                      Body2.setInertia(body, totalInertia);
                    }
                  }
                  if (body.circleRadius) {
                    if (scaleX === scaleY) {
                      body.circleRadius *= scaleX;
                    } else {
                      body.circleRadius = null;
                    }
                  }
                };
                Body2.update = function(body, deltaTime) {
                  deltaTime = (typeof deltaTime !== "undefined" ? deltaTime : 1e3 / 60) * body.timeScale;
                  var deltaTimeSquared = deltaTime * deltaTime, correction = Body2._timeCorrection ? deltaTime / (body.deltaTime || deltaTime) : 1;
                  var frictionAir = 1 - body.frictionAir * (deltaTime / Common._baseDelta), velocityPrevX = (body.position.x - body.positionPrev.x) * correction, velocityPrevY = (body.position.y - body.positionPrev.y) * correction;
                  body.velocity.x = velocityPrevX * frictionAir + body.force.x / body.mass * deltaTimeSquared;
                  body.velocity.y = velocityPrevY * frictionAir + body.force.y / body.mass * deltaTimeSquared;
                  body.positionPrev.x = body.position.x;
                  body.positionPrev.y = body.position.y;
                  body.position.x += body.velocity.x;
                  body.position.y += body.velocity.y;
                  body.deltaTime = deltaTime;
                  body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;
                  body.anglePrev = body.angle;
                  body.angle += body.angularVelocity;
                  for (var i = 0; i < body.parts.length; i++) {
                    var part = body.parts[i];
                    Vertices.translate(part.vertices, body.velocity);
                    if (i > 0) {
                      part.position.x += body.velocity.x;
                      part.position.y += body.velocity.y;
                    }
                    if (body.angularVelocity !== 0) {
                      Vertices.rotate(part.vertices, body.angularVelocity, body.position);
                      Axes.rotate(part.axes, body.angularVelocity);
                      if (i > 0) {
                        Vector3.rotateAbout(part.position, body.angularVelocity, body.position, part.position);
                      }
                    }
                    Bounds.update(part.bounds, part.vertices, body.velocity);
                  }
                };
                Body2.updateVelocities = function(body) {
                  var timeScale = Body2._baseDelta / body.deltaTime, bodyVelocity = body.velocity;
                  bodyVelocity.x = (body.position.x - body.positionPrev.x) * timeScale;
                  bodyVelocity.y = (body.position.y - body.positionPrev.y) * timeScale;
                  body.speed = Math.sqrt(bodyVelocity.x * bodyVelocity.x + bodyVelocity.y * bodyVelocity.y);
                  body.angularVelocity = (body.angle - body.anglePrev) * timeScale;
                  body.angularSpeed = Math.abs(body.angularVelocity);
                };
                Body2.applyForce = function(body, position, force) {
                  var offset = { x: position.x - body.position.x, y: position.y - body.position.y };
                  body.force.x += force.x;
                  body.force.y += force.y;
                  body.torque += offset.x * force.y - offset.y * force.x;
                };
                Body2._totalProperties = function(body) {
                  var properties = {
                    mass: 0,
                    area: 0,
                    inertia: 0,
                    centre: { x: 0, y: 0 }
                  };
                  for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {
                    var part = body.parts[i], mass = part.mass !== Infinity ? part.mass : 1;
                    properties.mass += mass;
                    properties.area += part.area;
                    properties.inertia += part.inertia;
                    properties.centre = Vector3.add(properties.centre, Vector3.mult(part.position, mass));
                  }
                  properties.centre = Vector3.div(properties.centre, properties.mass);
                  return properties;
                };
              })();
            },
            /* 5 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Events = {};
              module2.exports = Events;
              var Common = __webpack_require__(0);
              (function() {
                Events.on = function(object, eventNames, callback) {
                  var names = eventNames.split(" "), name;
                  for (var i = 0; i < names.length; i++) {
                    name = names[i];
                    object.events = object.events || {};
                    object.events[name] = object.events[name] || [];
                    object.events[name].push(callback);
                  }
                  return callback;
                };
                Events.off = function(object, eventNames, callback) {
                  if (!eventNames) {
                    object.events = {};
                    return;
                  }
                  if (typeof eventNames === "function") {
                    callback = eventNames;
                    eventNames = Common.keys(object.events).join(" ");
                  }
                  var names = eventNames.split(" ");
                  for (var i = 0; i < names.length; i++) {
                    var callbacks = object.events[names[i]], newCallbacks = [];
                    if (callback && callbacks) {
                      for (var j = 0; j < callbacks.length; j++) {
                        if (callbacks[j] !== callback)
                          newCallbacks.push(callbacks[j]);
                      }
                    }
                    object.events[names[i]] = newCallbacks;
                  }
                };
                Events.trigger = function(object, eventNames, event) {
                  var names, name, callbacks, eventClone;
                  var events = object.events;
                  if (events && Common.keys(events).length > 0) {
                    if (!event)
                      event = {};
                    names = eventNames.split(" ");
                    for (var i = 0; i < names.length; i++) {
                      name = names[i];
                      callbacks = events[name];
                      if (callbacks) {
                        eventClone = Common.clone(event, false);
                        eventClone.name = name;
                        eventClone.source = object;
                        for (var j = 0; j < callbacks.length; j++) {
                          callbacks[j].apply(object, [eventClone]);
                        }
                      }
                    }
                  }
                };
              })();
            },
            /* 6 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Composite = {};
              module2.exports = Composite;
              var Events = __webpack_require__(5);
              var Common = __webpack_require__(0);
              var Bounds = __webpack_require__(1);
              var Body2 = __webpack_require__(4);
              (function() {
                Composite.create = function(options) {
                  return Common.extend({
                    id: Common.nextId(),
                    type: "composite",
                    parent: null,
                    isModified: false,
                    bodies: [],
                    constraints: [],
                    composites: [],
                    label: "Composite",
                    plugin: {},
                    cache: {
                      allBodies: null,
                      allConstraints: null,
                      allComposites: null
                    }
                  }, options);
                };
                Composite.setModified = function(composite, isModified, updateParents, updateChildren) {
                  composite.isModified = isModified;
                  if (isModified && composite.cache) {
                    composite.cache.allBodies = null;
                    composite.cache.allConstraints = null;
                    composite.cache.allComposites = null;
                  }
                  if (updateParents && composite.parent) {
                    Composite.setModified(composite.parent, isModified, updateParents, updateChildren);
                  }
                  if (updateChildren) {
                    for (var i = 0; i < composite.composites.length; i++) {
                      var childComposite = composite.composites[i];
                      Composite.setModified(childComposite, isModified, updateParents, updateChildren);
                    }
                  }
                };
                Composite.add = function(composite, object) {
                  var objects = [].concat(object);
                  Events.trigger(composite, "beforeAdd", { object });
                  for (var i = 0; i < objects.length; i++) {
                    var obj = objects[i];
                    switch (obj.type) {
                      case "body":
                        if (obj.parent !== obj) {
                          Common.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");
                          break;
                        }
                        Composite.addBody(composite, obj);
                        break;
                      case "constraint":
                        Composite.addConstraint(composite, obj);
                        break;
                      case "composite":
                        Composite.addComposite(composite, obj);
                        break;
                      case "mouseConstraint":
                        Composite.addConstraint(composite, obj.constraint);
                        break;
                    }
                  }
                  Events.trigger(composite, "afterAdd", { object });
                  return composite;
                };
                Composite.remove = function(composite, object, deep) {
                  var objects = [].concat(object);
                  Events.trigger(composite, "beforeRemove", { object });
                  for (var i = 0; i < objects.length; i++) {
                    var obj = objects[i];
                    switch (obj.type) {
                      case "body":
                        Composite.removeBody(composite, obj, deep);
                        break;
                      case "constraint":
                        Composite.removeConstraint(composite, obj, deep);
                        break;
                      case "composite":
                        Composite.removeComposite(composite, obj, deep);
                        break;
                      case "mouseConstraint":
                        Composite.removeConstraint(composite, obj.constraint);
                        break;
                    }
                  }
                  Events.trigger(composite, "afterRemove", { object });
                  return composite;
                };
                Composite.addComposite = function(compositeA, compositeB) {
                  compositeA.composites.push(compositeB);
                  compositeB.parent = compositeA;
                  Composite.setModified(compositeA, true, true, false);
                  return compositeA;
                };
                Composite.removeComposite = function(compositeA, compositeB, deep) {
                  var position = Common.indexOf(compositeA.composites, compositeB);
                  if (position !== -1) {
                    var bodies = Composite.allBodies(compositeB);
                    Composite.removeCompositeAt(compositeA, position);
                    for (var i = 0; i < bodies.length; i++) {
                      bodies[i].sleepCounter = 0;
                    }
                  }
                  if (deep) {
                    for (var i = 0; i < compositeA.composites.length; i++) {
                      Composite.removeComposite(compositeA.composites[i], compositeB, true);
                    }
                  }
                  return compositeA;
                };
                Composite.removeCompositeAt = function(composite, position) {
                  composite.composites.splice(position, 1);
                  Composite.setModified(composite, true, true, false);
                  return composite;
                };
                Composite.addBody = function(composite, body) {
                  composite.bodies.push(body);
                  Composite.setModified(composite, true, true, false);
                  return composite;
                };
                Composite.removeBody = function(composite, body, deep) {
                  var position = Common.indexOf(composite.bodies, body);
                  if (position !== -1) {
                    Composite.removeBodyAt(composite, position);
                    body.sleepCounter = 0;
                  }
                  if (deep) {
                    for (var i = 0; i < composite.composites.length; i++) {
                      Composite.removeBody(composite.composites[i], body, true);
                    }
                  }
                  return composite;
                };
                Composite.removeBodyAt = function(composite, position) {
                  composite.bodies.splice(position, 1);
                  Composite.setModified(composite, true, true, false);
                  return composite;
                };
                Composite.addConstraint = function(composite, constraint) {
                  composite.constraints.push(constraint);
                  Composite.setModified(composite, true, true, false);
                  return composite;
                };
                Composite.removeConstraint = function(composite, constraint, deep) {
                  var position = Common.indexOf(composite.constraints, constraint);
                  if (position !== -1) {
                    Composite.removeConstraintAt(composite, position);
                  }
                  if (deep) {
                    for (var i = 0; i < composite.composites.length; i++) {
                      Composite.removeConstraint(composite.composites[i], constraint, true);
                    }
                  }
                  return composite;
                };
                Composite.removeConstraintAt = function(composite, position) {
                  composite.constraints.splice(position, 1);
                  Composite.setModified(composite, true, true, false);
                  return composite;
                };
                Composite.clear = function(composite, keepStatic, deep) {
                  if (deep) {
                    for (var i = 0; i < composite.composites.length; i++) {
                      Composite.clear(composite.composites[i], keepStatic, true);
                    }
                  }
                  if (keepStatic) {
                    composite.bodies = composite.bodies.filter(function(body) {
                      return body.isStatic;
                    });
                  } else {
                    composite.bodies.length = 0;
                  }
                  composite.constraints.length = 0;
                  composite.composites.length = 0;
                  Composite.setModified(composite, true, true, false);
                  return composite;
                };
                Composite.allBodies = function(composite) {
                  if (composite.cache && composite.cache.allBodies) {
                    return composite.cache.allBodies;
                  }
                  var bodies = [].concat(composite.bodies);
                  for (var i = 0; i < composite.composites.length; i++)
                    bodies = bodies.concat(Composite.allBodies(composite.composites[i]));
                  if (composite.cache) {
                    composite.cache.allBodies = bodies;
                  }
                  return bodies;
                };
                Composite.allConstraints = function(composite) {
                  if (composite.cache && composite.cache.allConstraints) {
                    return composite.cache.allConstraints;
                  }
                  var constraints = [].concat(composite.constraints);
                  for (var i = 0; i < composite.composites.length; i++)
                    constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));
                  if (composite.cache) {
                    composite.cache.allConstraints = constraints;
                  }
                  return constraints;
                };
                Composite.allComposites = function(composite) {
                  if (composite.cache && composite.cache.allComposites) {
                    return composite.cache.allComposites;
                  }
                  var composites = [].concat(composite.composites);
                  for (var i = 0; i < composite.composites.length; i++)
                    composites = composites.concat(Composite.allComposites(composite.composites[i]));
                  if (composite.cache) {
                    composite.cache.allComposites = composites;
                  }
                  return composites;
                };
                Composite.get = function(composite, id, type) {
                  var objects, object;
                  switch (type) {
                    case "body":
                      objects = Composite.allBodies(composite);
                      break;
                    case "constraint":
                      objects = Composite.allConstraints(composite);
                      break;
                    case "composite":
                      objects = Composite.allComposites(composite).concat(composite);
                      break;
                  }
                  if (!objects)
                    return null;
                  object = objects.filter(function(object2) {
                    return object2.id.toString() === id.toString();
                  });
                  return object.length === 0 ? null : object[0];
                };
                Composite.move = function(compositeA, objects, compositeB) {
                  Composite.remove(compositeA, objects);
                  Composite.add(compositeB, objects);
                  return compositeA;
                };
                Composite.rebase = function(composite) {
                  var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));
                  for (var i = 0; i < objects.length; i++) {
                    objects[i].id = Common.nextId();
                  }
                  return composite;
                };
                Composite.translate = function(composite, translation, recursive) {
                  var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;
                  for (var i = 0; i < bodies.length; i++) {
                    Body2.translate(bodies[i], translation);
                  }
                  return composite;
                };
                Composite.rotate = function(composite, rotation, point, recursive) {
                  var cos = Math.cos(rotation), sin = Math.sin(rotation), bodies = recursive ? Composite.allBodies(composite) : composite.bodies;
                  for (var i = 0; i < bodies.length; i++) {
                    var body = bodies[i], dx = body.position.x - point.x, dy = body.position.y - point.y;
                    Body2.setPosition(body, {
                      x: point.x + (dx * cos - dy * sin),
                      y: point.y + (dx * sin + dy * cos)
                    });
                    Body2.rotate(body, rotation);
                  }
                  return composite;
                };
                Composite.scale = function(composite, scaleX, scaleY, point, recursive) {
                  var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;
                  for (var i = 0; i < bodies.length; i++) {
                    var body = bodies[i], dx = body.position.x - point.x, dy = body.position.y - point.y;
                    Body2.setPosition(body, {
                      x: point.x + dx * scaleX,
                      y: point.y + dy * scaleY
                    });
                    Body2.scale(body, scaleX, scaleY);
                  }
                  return composite;
                };
                Composite.bounds = function(composite) {
                  var bodies = Composite.allBodies(composite), vertices = [];
                  for (var i = 0; i < bodies.length; i += 1) {
                    var body = bodies[i];
                    vertices.push(body.bounds.min, body.bounds.max);
                  }
                  return Bounds.create(vertices);
                };
              })();
            },
            /* 7 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Sleeping = {};
              module2.exports = Sleeping;
              var Body2 = __webpack_require__(4);
              var Events = __webpack_require__(5);
              var Common = __webpack_require__(0);
              (function() {
                Sleeping._motionWakeThreshold = 0.18;
                Sleeping._motionSleepThreshold = 0.08;
                Sleeping._minBias = 0.9;
                Sleeping.update = function(bodies, delta) {
                  var timeScale = delta / Common._baseDelta, motionSleepThreshold = Sleeping._motionSleepThreshold;
                  for (var i = 0; i < bodies.length; i++) {
                    var body = bodies[i], speed = Body2.getSpeed(body), angularSpeed = Body2.getAngularSpeed(body), motion = speed * speed + angularSpeed * angularSpeed;
                    if (body.force.x !== 0 || body.force.y !== 0) {
                      Sleeping.set(body, false);
                      continue;
                    }
                    var minMotion = Math.min(body.motion, motion), maxMotion = Math.max(body.motion, motion);
                    body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;
                    if (body.sleepThreshold > 0 && body.motion < motionSleepThreshold) {
                      body.sleepCounter += 1;
                      if (body.sleepCounter >= body.sleepThreshold / timeScale) {
                        Sleeping.set(body, true);
                      }
                    } else if (body.sleepCounter > 0) {
                      body.sleepCounter -= 1;
                    }
                  }
                };
                Sleeping.afterCollisions = function(pairs) {
                  var motionSleepThreshold = Sleeping._motionSleepThreshold;
                  for (var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i];
                    if (!pair.isActive)
                      continue;
                    var collision = pair.collision, bodyA = collision.bodyA.parent, bodyB = collision.bodyB.parent;
                    if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic)
                      continue;
                    if (bodyA.isSleeping || bodyB.isSleeping) {
                      var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB, movingBody = sleepingBody === bodyA ? bodyB : bodyA;
                      if (!sleepingBody.isStatic && movingBody.motion > motionSleepThreshold) {
                        Sleeping.set(sleepingBody, false);
                      }
                    }
                  }
                };
                Sleeping.set = function(body, isSleeping) {
                  var wasSleeping = body.isSleeping;
                  if (isSleeping) {
                    body.isSleeping = true;
                    body.sleepCounter = body.sleepThreshold;
                    body.positionImpulse.x = 0;
                    body.positionImpulse.y = 0;
                    body.positionPrev.x = body.position.x;
                    body.positionPrev.y = body.position.y;
                    body.anglePrev = body.angle;
                    body.speed = 0;
                    body.angularSpeed = 0;
                    body.motion = 0;
                    if (!wasSleeping) {
                      Events.trigger(body, "sleepStart");
                    }
                  } else {
                    body.isSleeping = false;
                    body.sleepCounter = 0;
                    if (wasSleeping) {
                      Events.trigger(body, "sleepEnd");
                    }
                  }
                };
              })();
            },
            /* 8 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Collision = {};
              module2.exports = Collision;
              var Vertices = __webpack_require__(3);
              var Pair = __webpack_require__(9);
              (function() {
                var _supports = [];
                var _overlapAB = {
                  overlap: 0,
                  axis: null
                };
                var _overlapBA = {
                  overlap: 0,
                  axis: null
                };
                Collision.create = function(bodyA, bodyB) {
                  return {
                    pair: null,
                    collided: false,
                    bodyA,
                    bodyB,
                    parentA: bodyA.parent,
                    parentB: bodyB.parent,
                    depth: 0,
                    normal: { x: 0, y: 0 },
                    tangent: { x: 0, y: 0 },
                    penetration: { x: 0, y: 0 },
                    supports: [null, null],
                    supportCount: 0
                  };
                };
                Collision.collides = function(bodyA, bodyB, pairs) {
                  Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);
                  if (_overlapAB.overlap <= 0) {
                    return null;
                  }
                  Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);
                  if (_overlapBA.overlap <= 0) {
                    return null;
                  }
                  var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)], collision;
                  if (!pair) {
                    collision = Collision.create(bodyA, bodyB);
                    collision.collided = true;
                    collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;
                    collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;
                    collision.parentA = collision.bodyA.parent;
                    collision.parentB = collision.bodyB.parent;
                  } else {
                    collision = pair.collision;
                  }
                  bodyA = collision.bodyA;
                  bodyB = collision.bodyB;
                  var minOverlap;
                  if (_overlapAB.overlap < _overlapBA.overlap) {
                    minOverlap = _overlapAB;
                  } else {
                    minOverlap = _overlapBA;
                  }
                  var normal = collision.normal, tangent = collision.tangent, penetration = collision.penetration, supports = collision.supports, depth = minOverlap.overlap, minAxis = minOverlap.axis, normalX = minAxis.x, normalY = minAxis.y, deltaX = bodyB.position.x - bodyA.position.x, deltaY = bodyB.position.y - bodyA.position.y;
                  if (normalX * deltaX + normalY * deltaY >= 0) {
                    normalX = -normalX;
                    normalY = -normalY;
                  }
                  normal.x = normalX;
                  normal.y = normalY;
                  tangent.x = -normalY;
                  tangent.y = normalX;
                  penetration.x = normalX * depth;
                  penetration.y = normalY * depth;
                  collision.depth = depth;
                  var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1), supportCount = 0;
                  if (Vertices.contains(bodyA.vertices, supportsB[0])) {
                    supports[supportCount++] = supportsB[0];
                  }
                  if (Vertices.contains(bodyA.vertices, supportsB[1])) {
                    supports[supportCount++] = supportsB[1];
                  }
                  if (supportCount < 2) {
                    var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);
                    if (Vertices.contains(bodyB.vertices, supportsA[0])) {
                      supports[supportCount++] = supportsA[0];
                    }
                    if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {
                      supports[supportCount++] = supportsA[1];
                    }
                  }
                  if (supportCount === 0) {
                    supports[supportCount++] = supportsB[0];
                  }
                  collision.supportCount = supportCount;
                  return collision;
                };
                Collision._overlapAxes = function(result, verticesA, verticesB, axes) {
                  var verticesALength = verticesA.length, verticesBLength = verticesB.length, verticesAX = verticesA[0].x, verticesAY = verticesA[0].y, verticesBX = verticesB[0].x, verticesBY = verticesB[0].y, axesLength = axes.length, overlapMin = Number.MAX_VALUE, overlapAxisNumber = 0, overlap, overlapAB, overlapBA, dot, i, j;
                  for (i = 0; i < axesLength; i++) {
                    var axis = axes[i], axisX = axis.x, axisY = axis.y, minA = verticesAX * axisX + verticesAY * axisY, minB = verticesBX * axisX + verticesBY * axisY, maxA = minA, maxB = minB;
                    for (j = 1; j < verticesALength; j += 1) {
                      dot = verticesA[j].x * axisX + verticesA[j].y * axisY;
                      if (dot > maxA) {
                        maxA = dot;
                      } else if (dot < minA) {
                        minA = dot;
                      }
                    }
                    for (j = 1; j < verticesBLength; j += 1) {
                      dot = verticesB[j].x * axisX + verticesB[j].y * axisY;
                      if (dot > maxB) {
                        maxB = dot;
                      } else if (dot < minB) {
                        minB = dot;
                      }
                    }
                    overlapAB = maxA - minB;
                    overlapBA = maxB - minA;
                    overlap = overlapAB < overlapBA ? overlapAB : overlapBA;
                    if (overlap < overlapMin) {
                      overlapMin = overlap;
                      overlapAxisNumber = i;
                      if (overlap <= 0) {
                        break;
                      }
                    }
                  }
                  result.axis = axes[overlapAxisNumber];
                  result.overlap = overlapMin;
                };
                Collision._findSupports = function(bodyA, bodyB, normal, direction) {
                  var vertices = bodyB.vertices, verticesLength = vertices.length, bodyAPositionX = bodyA.position.x, bodyAPositionY = bodyA.position.y, normalX = normal.x * direction, normalY = normal.y * direction, vertexA = vertices[0], vertexB = vertexA, nearestDistance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y), vertexC, distance, j;
                  for (j = 1; j < verticesLength; j += 1) {
                    vertexB = vertices[j];
                    distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);
                    if (distance < nearestDistance) {
                      nearestDistance = distance;
                      vertexA = vertexB;
                    }
                  }
                  vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];
                  nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);
                  vertexB = vertices[(vertexA.index + 1) % verticesLength];
                  if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {
                    _supports[0] = vertexA;
                    _supports[1] = vertexB;
                    return _supports;
                  }
                  _supports[0] = vertexA;
                  _supports[1] = vertexC;
                  return _supports;
                };
              })();
            },
            /* 9 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Pair = {};
              module2.exports = Pair;
              var Contact = __webpack_require__(16);
              (function() {
                Pair.create = function(collision, timestamp) {
                  var bodyA = collision.bodyA, bodyB = collision.bodyB;
                  var pair = {
                    id: Pair.id(bodyA, bodyB),
                    bodyA,
                    bodyB,
                    collision,
                    contacts: [Contact.create(), Contact.create()],
                    contactCount: 0,
                    separation: 0,
                    isActive: true,
                    isSensor: bodyA.isSensor || bodyB.isSensor,
                    timeCreated: timestamp,
                    timeUpdated: timestamp,
                    inverseMass: 0,
                    friction: 0,
                    frictionStatic: 0,
                    restitution: 0,
                    slop: 0
                  };
                  Pair.update(pair, collision, timestamp);
                  return pair;
                };
                Pair.update = function(pair, collision, timestamp) {
                  var supports = collision.supports, supportCount = collision.supportCount, contacts = pair.contacts, parentA = collision.parentA, parentB = collision.parentB;
                  pair.isActive = true;
                  pair.timeUpdated = timestamp;
                  pair.collision = collision;
                  pair.separation = collision.depth;
                  pair.inverseMass = parentA.inverseMass + parentB.inverseMass;
                  pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;
                  pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;
                  pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;
                  pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;
                  pair.contactCount = supportCount;
                  collision.pair = pair;
                  var supportA = supports[0], contactA = contacts[0], supportB = supports[1], contactB = contacts[1];
                  if (contactB.vertex === supportA || contactA.vertex === supportB) {
                    contacts[1] = contactA;
                    contacts[0] = contactA = contactB;
                    contactB = contacts[1];
                  }
                  contactA.vertex = supportA;
                  contactB.vertex = supportB;
                };
                Pair.setActive = function(pair, isActive, timestamp) {
                  if (isActive) {
                    pair.isActive = true;
                    pair.timeUpdated = timestamp;
                  } else {
                    pair.isActive = false;
                    pair.contactCount = 0;
                  }
                };
                Pair.id = function(bodyA, bodyB) {
                  return bodyA.id < bodyB.id ? bodyA.id.toString(36) + ":" + bodyB.id.toString(36) : bodyB.id.toString(36) + ":" + bodyA.id.toString(36);
                };
              })();
            },
            /* 10 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Constraint = {};
              module2.exports = Constraint;
              var Vertices = __webpack_require__(3);
              var Vector3 = __webpack_require__(2);
              var Sleeping = __webpack_require__(7);
              var Bounds = __webpack_require__(1);
              var Axes = __webpack_require__(11);
              var Common = __webpack_require__(0);
              (function() {
                Constraint._warming = 0.4;
                Constraint._torqueDampen = 1;
                Constraint._minLength = 1e-6;
                Constraint.create = function(options) {
                  var constraint = options;
                  if (constraint.bodyA && !constraint.pointA)
                    constraint.pointA = { x: 0, y: 0 };
                  if (constraint.bodyB && !constraint.pointB)
                    constraint.pointB = { x: 0, y: 0 };
                  var initialPointA = constraint.bodyA ? Vector3.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA, initialPointB = constraint.bodyB ? Vector3.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB, length = Vector3.magnitude(Vector3.sub(initialPointA, initialPointB));
                  constraint.length = typeof constraint.length !== "undefined" ? constraint.length : length;
                  constraint.id = constraint.id || Common.nextId();
                  constraint.label = constraint.label || "Constraint";
                  constraint.type = "constraint";
                  constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);
                  constraint.damping = constraint.damping || 0;
                  constraint.angularStiffness = constraint.angularStiffness || 0;
                  constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;
                  constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;
                  constraint.plugin = {};
                  var render = {
                    visible: true,
                    lineWidth: 2,
                    strokeStyle: "#ffffff",
                    type: "line",
                    anchors: true
                  };
                  if (constraint.length === 0 && constraint.stiffness > 0.1) {
                    render.type = "pin";
                    render.anchors = false;
                  } else if (constraint.stiffness < 0.9) {
                    render.type = "spring";
                  }
                  constraint.render = Common.extend(render, constraint.render);
                  return constraint;
                };
                Constraint.preSolveAll = function(bodies) {
                  for (var i = 0; i < bodies.length; i += 1) {
                    var body = bodies[i], impulse = body.constraintImpulse;
                    if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {
                      continue;
                    }
                    body.position.x += impulse.x;
                    body.position.y += impulse.y;
                    body.angle += impulse.angle;
                  }
                };
                Constraint.solveAll = function(constraints, delta) {
                  var timeScale = Common.clamp(delta / Common._baseDelta, 0, 1);
                  for (var i = 0; i < constraints.length; i += 1) {
                    var constraint = constraints[i], fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic, fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;
                    if (fixedA || fixedB) {
                      Constraint.solve(constraints[i], timeScale);
                    }
                  }
                  for (i = 0; i < constraints.length; i += 1) {
                    constraint = constraints[i];
                    fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;
                    fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;
                    if (!fixedA && !fixedB) {
                      Constraint.solve(constraints[i], timeScale);
                    }
                  }
                };
                Constraint.solve = function(constraint, timeScale) {
                  var bodyA = constraint.bodyA, bodyB = constraint.bodyB, pointA = constraint.pointA, pointB = constraint.pointB;
                  if (!bodyA && !bodyB)
                    return;
                  if (bodyA && !bodyA.isStatic) {
                    Vector3.rotate(pointA, bodyA.angle - constraint.angleA, pointA);
                    constraint.angleA = bodyA.angle;
                  }
                  if (bodyB && !bodyB.isStatic) {
                    Vector3.rotate(pointB, bodyB.angle - constraint.angleB, pointB);
                    constraint.angleB = bodyB.angle;
                  }
                  var pointAWorld = pointA, pointBWorld = pointB;
                  if (bodyA) pointAWorld = Vector3.add(bodyA.position, pointA);
                  if (bodyB) pointBWorld = Vector3.add(bodyB.position, pointB);
                  if (!pointAWorld || !pointBWorld)
                    return;
                  var delta = Vector3.sub(pointAWorld, pointBWorld), currentLength = Vector3.magnitude(delta);
                  if (currentLength < Constraint._minLength) {
                    currentLength = Constraint._minLength;
                  }
                  var difference = (currentLength - constraint.length) / currentLength, isRigid = constraint.stiffness >= 1 || constraint.length === 0, stiffness = isRigid ? constraint.stiffness * timeScale : constraint.stiffness * timeScale * timeScale, damping = constraint.damping * timeScale, force = Vector3.mult(delta, difference * stiffness), massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0), inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0), resistanceTotal = massTotal + inertiaTotal, torque, share, normal, normalVelocity, relativeVelocity;
                  if (damping > 0) {
                    var zero = Vector3.create();
                    normal = Vector3.div(delta, currentLength);
                    relativeVelocity = Vector3.sub(
                      bodyB && Vector3.sub(bodyB.position, bodyB.positionPrev) || zero,
                      bodyA && Vector3.sub(bodyA.position, bodyA.positionPrev) || zero
                    );
                    normalVelocity = Vector3.dot(normal, relativeVelocity);
                  }
                  if (bodyA && !bodyA.isStatic) {
                    share = bodyA.inverseMass / massTotal;
                    bodyA.constraintImpulse.x -= force.x * share;
                    bodyA.constraintImpulse.y -= force.y * share;
                    bodyA.position.x -= force.x * share;
                    bodyA.position.y -= force.y * share;
                    if (damping > 0) {
                      bodyA.positionPrev.x -= damping * normal.x * normalVelocity * share;
                      bodyA.positionPrev.y -= damping * normal.y * normalVelocity * share;
                    }
                    torque = Vector3.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);
                    bodyA.constraintImpulse.angle -= torque;
                    bodyA.angle -= torque;
                  }
                  if (bodyB && !bodyB.isStatic) {
                    share = bodyB.inverseMass / massTotal;
                    bodyB.constraintImpulse.x += force.x * share;
                    bodyB.constraintImpulse.y += force.y * share;
                    bodyB.position.x += force.x * share;
                    bodyB.position.y += force.y * share;
                    if (damping > 0) {
                      bodyB.positionPrev.x += damping * normal.x * normalVelocity * share;
                      bodyB.positionPrev.y += damping * normal.y * normalVelocity * share;
                    }
                    torque = Vector3.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);
                    bodyB.constraintImpulse.angle += torque;
                    bodyB.angle += torque;
                  }
                };
                Constraint.postSolveAll = function(bodies) {
                  for (var i = 0; i < bodies.length; i++) {
                    var body = bodies[i], impulse = body.constraintImpulse;
                    if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {
                      continue;
                    }
                    Sleeping.set(body, false);
                    for (var j = 0; j < body.parts.length; j++) {
                      var part = body.parts[j];
                      Vertices.translate(part.vertices, impulse);
                      if (j > 0) {
                        part.position.x += impulse.x;
                        part.position.y += impulse.y;
                      }
                      if (impulse.angle !== 0) {
                        Vertices.rotate(part.vertices, impulse.angle, body.position);
                        Axes.rotate(part.axes, impulse.angle);
                        if (j > 0) {
                          Vector3.rotateAbout(part.position, impulse.angle, body.position, part.position);
                        }
                      }
                      Bounds.update(part.bounds, part.vertices, body.velocity);
                    }
                    impulse.angle *= Constraint._warming;
                    impulse.x *= Constraint._warming;
                    impulse.y *= Constraint._warming;
                  }
                };
                Constraint.pointAWorld = function(constraint) {
                  return {
                    x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + (constraint.pointA ? constraint.pointA.x : 0),
                    y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + (constraint.pointA ? constraint.pointA.y : 0)
                  };
                };
                Constraint.pointBWorld = function(constraint) {
                  return {
                    x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + (constraint.pointB ? constraint.pointB.x : 0),
                    y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + (constraint.pointB ? constraint.pointB.y : 0)
                  };
                };
                Constraint.currentLength = function(constraint) {
                  var pointAX = (constraint.bodyA ? constraint.bodyA.position.x : 0) + (constraint.pointA ? constraint.pointA.x : 0);
                  var pointAY = (constraint.bodyA ? constraint.bodyA.position.y : 0) + (constraint.pointA ? constraint.pointA.y : 0);
                  var pointBX = (constraint.bodyB ? constraint.bodyB.position.x : 0) + (constraint.pointB ? constraint.pointB.x : 0);
                  var pointBY = (constraint.bodyB ? constraint.bodyB.position.y : 0) + (constraint.pointB ? constraint.pointB.y : 0);
                  var deltaX = pointAX - pointBX;
                  var deltaY = pointAY - pointBY;
                  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
                };
              })();
            },
            /* 11 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Axes = {};
              module2.exports = Axes;
              var Vector3 = __webpack_require__(2);
              var Common = __webpack_require__(0);
              (function() {
                Axes.fromVertices = function(vertices) {
                  var axes = {};
                  for (var i = 0; i < vertices.length; i++) {
                    var j = (i + 1) % vertices.length, normal = Vector3.normalise({
                      x: vertices[j].y - vertices[i].y,
                      y: vertices[i].x - vertices[j].x
                    }), gradient = normal.y === 0 ? Infinity : normal.x / normal.y;
                    gradient = gradient.toFixed(3).toString();
                    axes[gradient] = normal;
                  }
                  return Common.values(axes);
                };
                Axes.rotate = function(axes, angle) {
                  if (angle === 0)
                    return;
                  var cos = Math.cos(angle), sin = Math.sin(angle);
                  for (var i = 0; i < axes.length; i++) {
                    var axis = axes[i], xx;
                    xx = axis.x * cos - axis.y * sin;
                    axis.y = axis.x * sin + axis.y * cos;
                    axis.x = xx;
                  }
                };
              })();
            },
            /* 12 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Bodies3 = {};
              module2.exports = Bodies3;
              var Vertices = __webpack_require__(3);
              var Common = __webpack_require__(0);
              var Body2 = __webpack_require__(4);
              var Bounds = __webpack_require__(1);
              var Vector3 = __webpack_require__(2);
              (function() {
                Bodies3.rectangle = function(x, y, width, height, options) {
                  options = options || {};
                  var rectangle = {
                    label: "Rectangle Body",
                    position: { x, y },
                    vertices: Vertices.fromPath("L 0 0 L " + width + " 0 L " + width + " " + height + " L 0 " + height)
                  };
                  if (options.chamfer) {
                    var chamfer = options.chamfer;
                    rectangle.vertices = Vertices.chamfer(
                      rectangle.vertices,
                      chamfer.radius,
                      chamfer.quality,
                      chamfer.qualityMin,
                      chamfer.qualityMax
                    );
                    delete options.chamfer;
                  }
                  return Body2.create(Common.extend({}, rectangle, options));
                };
                Bodies3.trapezoid = function(x, y, width, height, slope, options) {
                  options = options || {};
                  if (slope >= 1) {
                    Common.warn("Bodies.trapezoid: slope parameter must be < 1.");
                  }
                  slope *= 0.5;
                  var roof = (1 - slope * 2) * width;
                  var x1 = width * slope, x2 = x1 + roof, x3 = x2 + x1, verticesPath;
                  if (slope < 0.5) {
                    verticesPath = "L 0 0 L " + x1 + " " + -height + " L " + x2 + " " + -height + " L " + x3 + " 0";
                  } else {
                    verticesPath = "L 0 0 L " + x2 + " " + -height + " L " + x3 + " 0";
                  }
                  var trapezoid = {
                    label: "Trapezoid Body",
                    position: { x, y },
                    vertices: Vertices.fromPath(verticesPath)
                  };
                  if (options.chamfer) {
                    var chamfer = options.chamfer;
                    trapezoid.vertices = Vertices.chamfer(
                      trapezoid.vertices,
                      chamfer.radius,
                      chamfer.quality,
                      chamfer.qualityMin,
                      chamfer.qualityMax
                    );
                    delete options.chamfer;
                  }
                  return Body2.create(Common.extend({}, trapezoid, options));
                };
                Bodies3.circle = function(x, y, radius, options, maxSides) {
                  options = options || {};
                  var circle = {
                    label: "Circle Body",
                    circleRadius: radius
                  };
                  maxSides = maxSides || 25;
                  var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));
                  if (sides % 2 === 1)
                    sides += 1;
                  return Bodies3.polygon(x, y, sides, radius, Common.extend({}, circle, options));
                };
                Bodies3.polygon = function(x, y, sides, radius, options) {
                  options = options || {};
                  if (sides < 3)
                    return Bodies3.circle(x, y, radius, options);
                  var theta = 2 * Math.PI / sides, path = "", offset = theta * 0.5;
                  for (var i = 0; i < sides; i += 1) {
                    var angle = offset + i * theta, xx = Math.cos(angle) * radius, yy = Math.sin(angle) * radius;
                    path += "L " + xx.toFixed(3) + " " + yy.toFixed(3) + " ";
                  }
                  var polygon = {
                    label: "Polygon Body",
                    position: { x, y },
                    vertices: Vertices.fromPath(path)
                  };
                  if (options.chamfer) {
                    var chamfer = options.chamfer;
                    polygon.vertices = Vertices.chamfer(
                      polygon.vertices,
                      chamfer.radius,
                      chamfer.quality,
                      chamfer.qualityMin,
                      chamfer.qualityMax
                    );
                    delete options.chamfer;
                  }
                  return Body2.create(Common.extend({}, polygon, options));
                };
                Bodies3.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {
                  var decomp = Common.getDecomp(), canDecomp, body, parts, isConvex, isConcave, vertices, i, j, k, v, z;
                  canDecomp = Boolean(decomp && decomp.quickDecomp);
                  options = options || {};
                  parts = [];
                  flagInternal = typeof flagInternal !== "undefined" ? flagInternal : false;
                  removeCollinear = typeof removeCollinear !== "undefined" ? removeCollinear : 0.01;
                  minimumArea = typeof minimumArea !== "undefined" ? minimumArea : 10;
                  removeDuplicatePoints = typeof removeDuplicatePoints !== "undefined" ? removeDuplicatePoints : 0.01;
                  if (!Common.isArray(vertexSets[0])) {
                    vertexSets = [vertexSets];
                  }
                  for (v = 0; v < vertexSets.length; v += 1) {
                    vertices = vertexSets[v];
                    isConvex = Vertices.isConvex(vertices);
                    isConcave = !isConvex;
                    if (isConcave && !canDecomp) {
                      Common.warnOnce(
                        "Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices."
                      );
                    }
                    if (isConvex || !canDecomp) {
                      if (isConvex) {
                        vertices = Vertices.clockwiseSort(vertices);
                      } else {
                        vertices = Vertices.hull(vertices);
                      }
                      parts.push({
                        position: { x, y },
                        vertices
                      });
                    } else {
                      var concave = vertices.map(function(vertex) {
                        return [vertex.x, vertex.y];
                      });
                      decomp.makeCCW(concave);
                      if (removeCollinear !== false)
                        decomp.removeCollinearPoints(concave, removeCollinear);
                      if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)
                        decomp.removeDuplicatePoints(concave, removeDuplicatePoints);
                      var decomposed = decomp.quickDecomp(concave);
                      for (i = 0; i < decomposed.length; i++) {
                        var chunk = decomposed[i];
                        var chunkVertices = chunk.map(function(vertices2) {
                          return {
                            x: vertices2[0],
                            y: vertices2[1]
                          };
                        });
                        if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)
                          continue;
                        parts.push({
                          position: Vertices.centre(chunkVertices),
                          vertices: chunkVertices
                        });
                      }
                    }
                  }
                  for (i = 0; i < parts.length; i++) {
                    parts[i] = Body2.create(Common.extend(parts[i], options));
                  }
                  if (flagInternal) {
                    var coincident_max_dist = 5;
                    for (i = 0; i < parts.length; i++) {
                      var partA = parts[i];
                      for (j = i + 1; j < parts.length; j++) {
                        var partB = parts[j];
                        if (Bounds.overlaps(partA.bounds, partB.bounds)) {
                          var pav = partA.vertices, pbv = partB.vertices;
                          for (k = 0; k < partA.vertices.length; k++) {
                            for (z = 0; z < partB.vertices.length; z++) {
                              var da = Vector3.magnitudeSquared(Vector3.sub(pav[(k + 1) % pav.length], pbv[z])), db = Vector3.magnitudeSquared(Vector3.sub(pav[k], pbv[(z + 1) % pbv.length]));
                              if (da < coincident_max_dist && db < coincident_max_dist) {
                                pav[k].isInternal = true;
                                pbv[z].isInternal = true;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (parts.length > 1) {
                    body = Body2.create(Common.extend({ parts: parts.slice(0) }, options));
                    Body2.setPosition(body, { x, y });
                    return body;
                  } else {
                    return parts[0];
                  }
                };
              })();
            },
            /* 13 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Detector = {};
              module2.exports = Detector;
              var Common = __webpack_require__(0);
              var Collision = __webpack_require__(8);
              (function() {
                Detector.create = function(options) {
                  var defaults = {
                    bodies: [],
                    collisions: [],
                    pairs: null
                  };
                  return Common.extend(defaults, options);
                };
                Detector.setBodies = function(detector, bodies) {
                  detector.bodies = bodies.slice(0);
                };
                Detector.clear = function(detector) {
                  detector.bodies = [];
                  detector.collisions = [];
                };
                Detector.collisions = function(detector) {
                  var pairs = detector.pairs, bodies = detector.bodies, bodiesLength = bodies.length, canCollide = Detector.canCollide, collides = Collision.collides, collisions = detector.collisions, collisionIndex = 0, i, j;
                  bodies.sort(Detector._compareBoundsX);
                  for (i = 0; i < bodiesLength; i++) {
                    var bodyA = bodies[i], boundsA = bodyA.bounds, boundXMax = bodyA.bounds.max.x, boundYMax = bodyA.bounds.max.y, boundYMin = bodyA.bounds.min.y, bodyAStatic = bodyA.isStatic || bodyA.isSleeping, partsALength = bodyA.parts.length, partsASingle = partsALength === 1;
                    for (j = i + 1; j < bodiesLength; j++) {
                      var bodyB = bodies[j], boundsB = bodyB.bounds;
                      if (boundsB.min.x > boundXMax) {
                        break;
                      }
                      if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {
                        continue;
                      }
                      if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {
                        continue;
                      }
                      if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {
                        continue;
                      }
                      var partsBLength = bodyB.parts.length;
                      if (partsASingle && partsBLength === 1) {
                        var collision = collides(bodyA, bodyB, pairs);
                        if (collision) {
                          collisions[collisionIndex++] = collision;
                        }
                      } else {
                        var partsAStart = partsALength > 1 ? 1 : 0, partsBStart = partsBLength > 1 ? 1 : 0;
                        for (var k = partsAStart; k < partsALength; k++) {
                          var partA = bodyA.parts[k], boundsA = partA.bounds;
                          for (var z = partsBStart; z < partsBLength; z++) {
                            var partB = bodyB.parts[z], boundsB = partB.bounds;
                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {
                              continue;
                            }
                            var collision = collides(partA, partB, pairs);
                            if (collision) {
                              collisions[collisionIndex++] = collision;
                            }
                          }
                        }
                      }
                    }
                  }
                  if (collisions.length !== collisionIndex) {
                    collisions.length = collisionIndex;
                  }
                  return collisions;
                };
                Detector.canCollide = function(filterA, filterB) {
                  if (filterA.group === filterB.group && filterA.group !== 0)
                    return filterA.group > 0;
                  return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;
                };
                Detector._compareBoundsX = function(bodyA, bodyB) {
                  return bodyA.bounds.min.x - bodyB.bounds.min.x;
                };
              })();
            },
            /* 14 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Mouse2 = {};
              module2.exports = Mouse2;
              var Common = __webpack_require__(0);
              (function() {
                Mouse2.create = function(element) {
                  var mouse = {};
                  if (!element) {
                    Common.log("Mouse.create: element was undefined, defaulting to document.body", "warn");
                  }
                  mouse.element = element || document.body;
                  mouse.absolute = { x: 0, y: 0 };
                  mouse.position = { x: 0, y: 0 };
                  mouse.mousedownPosition = { x: 0, y: 0 };
                  mouse.mouseupPosition = { x: 0, y: 0 };
                  mouse.offset = { x: 0, y: 0 };
                  mouse.scale = { x: 1, y: 1 };
                  mouse.wheelDelta = 0;
                  mouse.button = -1;
                  mouse.pixelRatio = parseInt(mouse.element.getAttribute("data-pixel-ratio"), 10) || 1;
                  mouse.sourceEvents = {
                    mousemove: null,
                    mousedown: null,
                    mouseup: null,
                    mousewheel: null
                  };
                  mouse.mousemove = function(event) {
                    var position = Mouse2._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;
                    if (touches) {
                      mouse.button = 0;
                      event.preventDefault();
                    }
                    mouse.absolute.x = position.x;
                    mouse.absolute.y = position.y;
                    mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;
                    mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;
                    mouse.sourceEvents.mousemove = event;
                  };
                  mouse.mousedown = function(event) {
                    var position = Mouse2._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;
                    if (touches) {
                      mouse.button = 0;
                      event.preventDefault();
                    } else {
                      mouse.button = event.button;
                    }
                    mouse.absolute.x = position.x;
                    mouse.absolute.y = position.y;
                    mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;
                    mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;
                    mouse.mousedownPosition.x = mouse.position.x;
                    mouse.mousedownPosition.y = mouse.position.y;
                    mouse.sourceEvents.mousedown = event;
                  };
                  mouse.mouseup = function(event) {
                    var position = Mouse2._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;
                    if (touches) {
                      event.preventDefault();
                    }
                    mouse.button = -1;
                    mouse.absolute.x = position.x;
                    mouse.absolute.y = position.y;
                    mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;
                    mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;
                    mouse.mouseupPosition.x = mouse.position.x;
                    mouse.mouseupPosition.y = mouse.position.y;
                    mouse.sourceEvents.mouseup = event;
                  };
                  mouse.mousewheel = function(event) {
                    mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));
                    event.preventDefault();
                    mouse.sourceEvents.mousewheel = event;
                  };
                  Mouse2.setElement(mouse, mouse.element);
                  return mouse;
                };
                Mouse2.setElement = function(mouse, element) {
                  mouse.element = element;
                  element.addEventListener("mousemove", mouse.mousemove, { passive: true });
                  element.addEventListener("mousedown", mouse.mousedown, { passive: true });
                  element.addEventListener("mouseup", mouse.mouseup, { passive: true });
                  element.addEventListener("wheel", mouse.mousewheel, { passive: false });
                  element.addEventListener("touchmove", mouse.mousemove, { passive: false });
                  element.addEventListener("touchstart", mouse.mousedown, { passive: false });
                  element.addEventListener("touchend", mouse.mouseup, { passive: false });
                };
                Mouse2.clearSourceEvents = function(mouse) {
                  mouse.sourceEvents.mousemove = null;
                  mouse.sourceEvents.mousedown = null;
                  mouse.sourceEvents.mouseup = null;
                  mouse.sourceEvents.mousewheel = null;
                  mouse.wheelDelta = 0;
                };
                Mouse2.setOffset = function(mouse, offset) {
                  mouse.offset.x = offset.x;
                  mouse.offset.y = offset.y;
                  mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;
                  mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;
                };
                Mouse2.setScale = function(mouse, scale) {
                  mouse.scale.x = scale.x;
                  mouse.scale.y = scale.y;
                  mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;
                  mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;
                };
                Mouse2._getRelativeMousePosition = function(event, element, pixelRatio) {
                  var elementBounds = element.getBoundingClientRect(), rootNode = document.documentElement || document.body.parentNode || document.body, scrollX = window.pageXOffset !== void 0 ? window.pageXOffset : rootNode.scrollLeft, scrollY = window.pageYOffset !== void 0 ? window.pageYOffset : rootNode.scrollTop, touches = event.changedTouches, x, y;
                  if (touches) {
                    x = touches[0].pageX - elementBounds.left - scrollX;
                    y = touches[0].pageY - elementBounds.top - scrollY;
                  } else {
                    x = event.pageX - elementBounds.left - scrollX;
                    y = event.pageY - elementBounds.top - scrollY;
                  }
                  return {
                    x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),
                    y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)
                  };
                };
              })();
            },
            /* 15 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Plugin = {};
              module2.exports = Plugin;
              var Common = __webpack_require__(0);
              (function() {
                Plugin._registry = {};
                Plugin.register = function(plugin) {
                  if (!Plugin.isPlugin(plugin)) {
                    Common.warn("Plugin.register:", Plugin.toString(plugin), "does not implement all required fields.");
                  }
                  if (plugin.name in Plugin._registry) {
                    var registered = Plugin._registry[plugin.name], pluginVersion = Plugin.versionParse(plugin.version).number, registeredVersion = Plugin.versionParse(registered.version).number;
                    if (pluginVersion > registeredVersion) {
                      Common.warn("Plugin.register:", Plugin.toString(registered), "was upgraded to", Plugin.toString(plugin));
                      Plugin._registry[plugin.name] = plugin;
                    } else if (pluginVersion < registeredVersion) {
                      Common.warn("Plugin.register:", Plugin.toString(registered), "can not be downgraded to", Plugin.toString(plugin));
                    } else if (plugin !== registered) {
                      Common.warn("Plugin.register:", Plugin.toString(plugin), "is already registered to different plugin object");
                    }
                  } else {
                    Plugin._registry[plugin.name] = plugin;
                  }
                  return plugin;
                };
                Plugin.resolve = function(dependency) {
                  return Plugin._registry[Plugin.dependencyParse(dependency).name];
                };
                Plugin.toString = function(plugin) {
                  return typeof plugin === "string" ? plugin : (plugin.name || "anonymous") + "@" + (plugin.version || plugin.range || "0.0.0");
                };
                Plugin.isPlugin = function(obj) {
                  return obj && obj.name && obj.version && obj.install;
                };
                Plugin.isUsed = function(module3, name) {
                  return module3.used.indexOf(name) > -1;
                };
                Plugin.isFor = function(plugin, module3) {
                  var parsed = plugin.for && Plugin.dependencyParse(plugin.for);
                  return !plugin.for || module3.name === parsed.name && Plugin.versionSatisfies(module3.version, parsed.range);
                };
                Plugin.use = function(module3, plugins) {
                  module3.uses = (module3.uses || []).concat(plugins || []);
                  if (module3.uses.length === 0) {
                    Common.warn("Plugin.use:", Plugin.toString(module3), "does not specify any dependencies to install.");
                    return;
                  }
                  var dependencies = Plugin.dependencies(module3), sortedDependencies = Common.topologicalSort(dependencies), status = [];
                  for (var i = 0; i < sortedDependencies.length; i += 1) {
                    if (sortedDependencies[i] === module3.name) {
                      continue;
                    }
                    var plugin = Plugin.resolve(sortedDependencies[i]);
                    if (!plugin) {
                      status.push("\u274C " + sortedDependencies[i]);
                      continue;
                    }
                    if (Plugin.isUsed(module3, plugin.name)) {
                      continue;
                    }
                    if (!Plugin.isFor(plugin, module3)) {
                      Common.warn("Plugin.use:", Plugin.toString(plugin), "is for", plugin.for, "but installed on", Plugin.toString(module3) + ".");
                      plugin._warned = true;
                    }
                    if (plugin.install) {
                      plugin.install(module3);
                    } else {
                      Common.warn("Plugin.use:", Plugin.toString(plugin), "does not specify an install function.");
                      plugin._warned = true;
                    }
                    if (plugin._warned) {
                      status.push("\u{1F536} " + Plugin.toString(plugin));
                      delete plugin._warned;
                    } else {
                      status.push("\u2705 " + Plugin.toString(plugin));
                    }
                    module3.used.push(plugin.name);
                  }
                  if (status.length > 0) {
                    Common.info(status.join("  "));
                  }
                };
                Plugin.dependencies = function(module3, tracked) {
                  var parsedBase = Plugin.dependencyParse(module3), name = parsedBase.name;
                  tracked = tracked || {};
                  if (name in tracked) {
                    return;
                  }
                  module3 = Plugin.resolve(module3) || module3;
                  tracked[name] = Common.map(module3.uses || [], function(dependency) {
                    if (Plugin.isPlugin(dependency)) {
                      Plugin.register(dependency);
                    }
                    var parsed = Plugin.dependencyParse(dependency), resolved = Plugin.resolve(dependency);
                    if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {
                      Common.warn(
                        "Plugin.dependencies:",
                        Plugin.toString(resolved),
                        "does not satisfy",
                        Plugin.toString(parsed),
                        "used by",
                        Plugin.toString(parsedBase) + "."
                      );
                      resolved._warned = true;
                      module3._warned = true;
                    } else if (!resolved) {
                      Common.warn(
                        "Plugin.dependencies:",
                        Plugin.toString(dependency),
                        "used by",
                        Plugin.toString(parsedBase),
                        "could not be resolved."
                      );
                      module3._warned = true;
                    }
                    return parsed.name;
                  });
                  for (var i = 0; i < tracked[name].length; i += 1) {
                    Plugin.dependencies(tracked[name][i], tracked);
                  }
                  return tracked;
                };
                Plugin.dependencyParse = function(dependency) {
                  if (Common.isString(dependency)) {
                    var pattern = /^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-+]+)?))?$/;
                    if (!pattern.test(dependency)) {
                      Common.warn("Plugin.dependencyParse:", dependency, "is not a valid dependency string.");
                    }
                    return {
                      name: dependency.split("@")[0],
                      range: dependency.split("@")[1] || "*"
                    };
                  }
                  return {
                    name: dependency.name,
                    range: dependency.range || dependency.version
                  };
                };
                Plugin.versionParse = function(range) {
                  var pattern = /^(\*)|(\^|~|>=|>)?\s*((\d+)\.(\d+)\.(\d+))(-[0-9A-Za-z-+]+)?$/;
                  if (!pattern.test(range)) {
                    Common.warn("Plugin.versionParse:", range, "is not a valid version or range.");
                  }
                  var parts = pattern.exec(range);
                  var major = Number(parts[4]);
                  var minor = Number(parts[5]);
                  var patch = Number(parts[6]);
                  return {
                    isRange: Boolean(parts[1] || parts[2]),
                    version: parts[3],
                    range,
                    operator: parts[1] || parts[2] || "",
                    major,
                    minor,
                    patch,
                    parts: [major, minor, patch],
                    prerelease: parts[7],
                    number: major * 1e8 + minor * 1e4 + patch
                  };
                };
                Plugin.versionSatisfies = function(version, range) {
                  range = range || "*";
                  var r = Plugin.versionParse(range), v = Plugin.versionParse(version);
                  if (r.isRange) {
                    if (r.operator === "*" || version === "*") {
                      return true;
                    }
                    if (r.operator === ">") {
                      return v.number > r.number;
                    }
                    if (r.operator === ">=") {
                      return v.number >= r.number;
                    }
                    if (r.operator === "~") {
                      return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;
                    }
                    if (r.operator === "^") {
                      if (r.major > 0) {
                        return v.major === r.major && v.number >= r.number;
                      }
                      if (r.minor > 0) {
                        return v.minor === r.minor && v.patch >= r.patch;
                      }
                      return v.patch === r.patch;
                    }
                  }
                  return version === range || version === "*";
                };
              })();
            },
            /* 16 */
            /***/
            function(module2, exports2) {
              var Contact = {};
              module2.exports = Contact;
              (function() {
                Contact.create = function(vertex) {
                  return {
                    vertex,
                    normalImpulse: 0,
                    tangentImpulse: 0
                  };
                };
              })();
            },
            /* 17 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Engine2 = {};
              module2.exports = Engine2;
              var Sleeping = __webpack_require__(7);
              var Resolver = __webpack_require__(18);
              var Detector = __webpack_require__(13);
              var Pairs = __webpack_require__(19);
              var Events = __webpack_require__(5);
              var Composite = __webpack_require__(6);
              var Constraint = __webpack_require__(10);
              var Common = __webpack_require__(0);
              var Body2 = __webpack_require__(4);
              (function() {
                Engine2._deltaMax = 1e3 / 60;
                Engine2.create = function(options) {
                  options = options || {};
                  var defaults = {
                    positionIterations: 6,
                    velocityIterations: 4,
                    constraintIterations: 2,
                    enableSleeping: false,
                    events: [],
                    plugin: {},
                    gravity: {
                      x: 0,
                      y: 1,
                      scale: 1e-3
                    },
                    timing: {
                      timestamp: 0,
                      timeScale: 1,
                      lastDelta: 0,
                      lastElapsed: 0,
                      lastUpdatesPerFrame: 0
                    }
                  };
                  var engine = Common.extend(defaults, options);
                  engine.world = options.world || Composite.create({ label: "World" });
                  engine.pairs = options.pairs || Pairs.create();
                  engine.detector = options.detector || Detector.create();
                  engine.detector.pairs = engine.pairs;
                  engine.grid = { buckets: [] };
                  engine.world.gravity = engine.gravity;
                  engine.broadphase = engine.grid;
                  engine.metrics = {};
                  return engine;
                };
                Engine2.update = function(engine, delta) {
                  var startTime = Common.now();
                  var world = engine.world, detector = engine.detector, pairs = engine.pairs, timing = engine.timing, timestamp = timing.timestamp, i;
                  if (delta > Engine2._deltaMax) {
                    Common.warnOnce(
                      "Matter.Engine.update: delta argument is recommended to be less than or equal to",
                      Engine2._deltaMax.toFixed(3),
                      "ms."
                    );
                  }
                  delta = typeof delta !== "undefined" ? delta : Common._baseDelta;
                  delta *= timing.timeScale;
                  timing.timestamp += delta;
                  timing.lastDelta = delta;
                  var event = {
                    timestamp: timing.timestamp,
                    delta
                  };
                  Events.trigger(engine, "beforeUpdate", event);
                  var allBodies = Composite.allBodies(world), allConstraints = Composite.allConstraints(world);
                  if (world.isModified) {
                    Detector.setBodies(detector, allBodies);
                    Composite.setModified(world, false, false, true);
                  }
                  if (engine.enableSleeping)
                    Sleeping.update(allBodies, delta);
                  Engine2._bodiesApplyGravity(allBodies, engine.gravity);
                  if (delta > 0) {
                    Engine2._bodiesUpdate(allBodies, delta);
                  }
                  Events.trigger(engine, "beforeSolve", event);
                  Constraint.preSolveAll(allBodies);
                  for (i = 0; i < engine.constraintIterations; i++) {
                    Constraint.solveAll(allConstraints, delta);
                  }
                  Constraint.postSolveAll(allBodies);
                  var collisions = Detector.collisions(detector);
                  Pairs.update(pairs, collisions, timestamp);
                  if (engine.enableSleeping)
                    Sleeping.afterCollisions(pairs.list);
                  if (pairs.collisionStart.length > 0) {
                    Events.trigger(engine, "collisionStart", {
                      pairs: pairs.collisionStart,
                      timestamp: timing.timestamp,
                      delta
                    });
                  }
                  var positionDamping = Common.clamp(20 / engine.positionIterations, 0, 1);
                  Resolver.preSolvePosition(pairs.list);
                  for (i = 0; i < engine.positionIterations; i++) {
                    Resolver.solvePosition(pairs.list, delta, positionDamping);
                  }
                  Resolver.postSolvePosition(allBodies);
                  Constraint.preSolveAll(allBodies);
                  for (i = 0; i < engine.constraintIterations; i++) {
                    Constraint.solveAll(allConstraints, delta);
                  }
                  Constraint.postSolveAll(allBodies);
                  Resolver.preSolveVelocity(pairs.list);
                  for (i = 0; i < engine.velocityIterations; i++) {
                    Resolver.solveVelocity(pairs.list, delta);
                  }
                  Engine2._bodiesUpdateVelocities(allBodies);
                  if (pairs.collisionActive.length > 0) {
                    Events.trigger(engine, "collisionActive", {
                      pairs: pairs.collisionActive,
                      timestamp: timing.timestamp,
                      delta
                    });
                  }
                  if (pairs.collisionEnd.length > 0) {
                    Events.trigger(engine, "collisionEnd", {
                      pairs: pairs.collisionEnd,
                      timestamp: timing.timestamp,
                      delta
                    });
                  }
                  Engine2._bodiesClearForces(allBodies);
                  Events.trigger(engine, "afterUpdate", event);
                  engine.timing.lastElapsed = Common.now() - startTime;
                  return engine;
                };
                Engine2.merge = function(engineA, engineB) {
                  Common.extend(engineA, engineB);
                  if (engineB.world) {
                    engineA.world = engineB.world;
                    Engine2.clear(engineA);
                    var bodies = Composite.allBodies(engineA.world);
                    for (var i = 0; i < bodies.length; i++) {
                      var body = bodies[i];
                      Sleeping.set(body, false);
                      body.id = Common.nextId();
                    }
                  }
                };
                Engine2.clear = function(engine) {
                  Pairs.clear(engine.pairs);
                  Detector.clear(engine.detector);
                };
                Engine2._bodiesClearForces = function(bodies) {
                  var bodiesLength = bodies.length;
                  for (var i = 0; i < bodiesLength; i++) {
                    var body = bodies[i];
                    body.force.x = 0;
                    body.force.y = 0;
                    body.torque = 0;
                  }
                };
                Engine2._bodiesApplyGravity = function(bodies, gravity) {
                  var gravityScale = typeof gravity.scale !== "undefined" ? gravity.scale : 1e-3, bodiesLength = bodies.length;
                  if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {
                    return;
                  }
                  for (var i = 0; i < bodiesLength; i++) {
                    var body = bodies[i];
                    if (body.isStatic || body.isSleeping)
                      continue;
                    body.force.y += body.mass * gravity.y * gravityScale;
                    body.force.x += body.mass * gravity.x * gravityScale;
                  }
                };
                Engine2._bodiesUpdate = function(bodies, delta) {
                  var bodiesLength = bodies.length;
                  for (var i = 0; i < bodiesLength; i++) {
                    var body = bodies[i];
                    if (body.isStatic || body.isSleeping)
                      continue;
                    Body2.update(body, delta);
                  }
                };
                Engine2._bodiesUpdateVelocities = function(bodies) {
                  var bodiesLength = bodies.length;
                  for (var i = 0; i < bodiesLength; i++) {
                    Body2.updateVelocities(bodies[i]);
                  }
                };
              })();
            },
            /* 18 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Resolver = {};
              module2.exports = Resolver;
              var Vertices = __webpack_require__(3);
              var Common = __webpack_require__(0);
              var Bounds = __webpack_require__(1);
              (function() {
                Resolver._restingThresh = 2;
                Resolver._restingThreshTangent = Math.sqrt(6);
                Resolver._positionDampen = 0.9;
                Resolver._positionWarming = 0.8;
                Resolver._frictionNormalMultiplier = 5;
                Resolver._frictionMaxStatic = Number.MAX_VALUE;
                Resolver.preSolvePosition = function(pairs) {
                  var i, pair, contactCount, pairsLength = pairs.length;
                  for (i = 0; i < pairsLength; i++) {
                    pair = pairs[i];
                    if (!pair.isActive)
                      continue;
                    contactCount = pair.contactCount;
                    pair.collision.parentA.totalContacts += contactCount;
                    pair.collision.parentB.totalContacts += contactCount;
                  }
                };
                Resolver.solvePosition = function(pairs, delta, damping) {
                  var i, pair, collision, bodyA, bodyB, normal, contactShare, positionImpulse, positionDampen = Resolver._positionDampen * (damping || 1), slopDampen = Common.clamp(delta / Common._baseDelta, 0, 1), pairsLength = pairs.length;
                  for (i = 0; i < pairsLength; i++) {
                    pair = pairs[i];
                    if (!pair.isActive || pair.isSensor)
                      continue;
                    collision = pair.collision;
                    bodyA = collision.parentA;
                    bodyB = collision.parentB;
                    normal = collision.normal;
                    pair.separation = collision.depth + normal.x * (bodyB.positionImpulse.x - bodyA.positionImpulse.x) + normal.y * (bodyB.positionImpulse.y - bodyA.positionImpulse.y);
                  }
                  for (i = 0; i < pairsLength; i++) {
                    pair = pairs[i];
                    if (!pair.isActive || pair.isSensor)
                      continue;
                    collision = pair.collision;
                    bodyA = collision.parentA;
                    bodyB = collision.parentB;
                    normal = collision.normal;
                    positionImpulse = pair.separation - pair.slop * slopDampen;
                    if (bodyA.isStatic || bodyB.isStatic)
                      positionImpulse *= 2;
                    if (!(bodyA.isStatic || bodyA.isSleeping)) {
                      contactShare = positionDampen / bodyA.totalContacts;
                      bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;
                      bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;
                    }
                    if (!(bodyB.isStatic || bodyB.isSleeping)) {
                      contactShare = positionDampen / bodyB.totalContacts;
                      bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;
                      bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;
                    }
                  }
                };
                Resolver.postSolvePosition = function(bodies) {
                  var positionWarming = Resolver._positionWarming, bodiesLength = bodies.length, verticesTranslate = Vertices.translate, boundsUpdate = Bounds.update;
                  for (var i = 0; i < bodiesLength; i++) {
                    var body = bodies[i], positionImpulse = body.positionImpulse, positionImpulseX = positionImpulse.x, positionImpulseY = positionImpulse.y, velocity = body.velocity;
                    body.totalContacts = 0;
                    if (positionImpulseX !== 0 || positionImpulseY !== 0) {
                      for (var j = 0; j < body.parts.length; j++) {
                        var part = body.parts[j];
                        verticesTranslate(part.vertices, positionImpulse);
                        boundsUpdate(part.bounds, part.vertices, velocity);
                        part.position.x += positionImpulseX;
                        part.position.y += positionImpulseY;
                      }
                      body.positionPrev.x += positionImpulseX;
                      body.positionPrev.y += positionImpulseY;
                      if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {
                        positionImpulse.x = 0;
                        positionImpulse.y = 0;
                      } else {
                        positionImpulse.x *= positionWarming;
                        positionImpulse.y *= positionWarming;
                      }
                    }
                  }
                };
                Resolver.preSolveVelocity = function(pairs) {
                  var pairsLength = pairs.length, i, j;
                  for (i = 0; i < pairsLength; i++) {
                    var pair = pairs[i];
                    if (!pair.isActive || pair.isSensor)
                      continue;
                    var contacts = pair.contacts, contactCount = pair.contactCount, collision = pair.collision, bodyA = collision.parentA, bodyB = collision.parentB, normal = collision.normal, tangent = collision.tangent;
                    for (j = 0; j < contactCount; j++) {
                      var contact = contacts[j], contactVertex = contact.vertex, normalImpulse = contact.normalImpulse, tangentImpulse = contact.tangentImpulse;
                      if (normalImpulse !== 0 || tangentImpulse !== 0) {
                        var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse, impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;
                        if (!(bodyA.isStatic || bodyA.isSleeping)) {
                          bodyA.positionPrev.x += impulseX * bodyA.inverseMass;
                          bodyA.positionPrev.y += impulseY * bodyA.inverseMass;
                          bodyA.anglePrev += bodyA.inverseInertia * ((contactVertex.x - bodyA.position.x) * impulseY - (contactVertex.y - bodyA.position.y) * impulseX);
                        }
                        if (!(bodyB.isStatic || bodyB.isSleeping)) {
                          bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;
                          bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;
                          bodyB.anglePrev -= bodyB.inverseInertia * ((contactVertex.x - bodyB.position.x) * impulseY - (contactVertex.y - bodyB.position.y) * impulseX);
                        }
                      }
                    }
                  }
                };
                Resolver.solveVelocity = function(pairs, delta) {
                  var timeScale = delta / Common._baseDelta, timeScaleSquared = timeScale * timeScale, timeScaleCubed = timeScaleSquared * timeScale, restingThresh = -Resolver._restingThresh * timeScale, restingThreshTangent = Resolver._restingThreshTangent, frictionNormalMultiplier = Resolver._frictionNormalMultiplier * timeScale, frictionMaxStatic = Resolver._frictionMaxStatic, pairsLength = pairs.length, tangentImpulse, maxFriction, i, j;
                  for (i = 0; i < pairsLength; i++) {
                    var pair = pairs[i];
                    if (!pair.isActive || pair.isSensor)
                      continue;
                    var collision = pair.collision, bodyA = collision.parentA, bodyB = collision.parentB, normalX = collision.normal.x, normalY = collision.normal.y, tangentX = collision.tangent.x, tangentY = collision.tangent.y, inverseMassTotal = pair.inverseMass, friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier, contacts = pair.contacts, contactCount = pair.contactCount, contactShare = 1 / contactCount;
                    var bodyAVelocityX = bodyA.position.x - bodyA.positionPrev.x, bodyAVelocityY = bodyA.position.y - bodyA.positionPrev.y, bodyAAngularVelocity = bodyA.angle - bodyA.anglePrev, bodyBVelocityX = bodyB.position.x - bodyB.positionPrev.x, bodyBVelocityY = bodyB.position.y - bodyB.positionPrev.y, bodyBAngularVelocity = bodyB.angle - bodyB.anglePrev;
                    for (j = 0; j < contactCount; j++) {
                      var contact = contacts[j], contactVertex = contact.vertex;
                      var offsetAX = contactVertex.x - bodyA.position.x, offsetAY = contactVertex.y - bodyA.position.y, offsetBX = contactVertex.x - bodyB.position.x, offsetBY = contactVertex.y - bodyB.position.y;
                      var velocityPointAX = bodyAVelocityX - offsetAY * bodyAAngularVelocity, velocityPointAY = bodyAVelocityY + offsetAX * bodyAAngularVelocity, velocityPointBX = bodyBVelocityX - offsetBY * bodyBAngularVelocity, velocityPointBY = bodyBVelocityY + offsetBX * bodyBAngularVelocity;
                      var relativeVelocityX = velocityPointAX - velocityPointBX, relativeVelocityY = velocityPointAY - velocityPointBY;
                      var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY, tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;
                      var normalOverlap = pair.separation + normalVelocity;
                      var normalForce = Math.min(normalOverlap, 1);
                      normalForce = normalOverlap < 0 ? 0 : normalForce;
                      var frictionLimit = normalForce * friction;
                      if (tangentVelocity < -frictionLimit || tangentVelocity > frictionLimit) {
                        maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;
                        tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleCubed;
                        if (tangentImpulse < -maxFriction) {
                          tangentImpulse = -maxFriction;
                        } else if (tangentImpulse > maxFriction) {
                          tangentImpulse = maxFriction;
                        }
                      } else {
                        tangentImpulse = tangentVelocity;
                        maxFriction = frictionMaxStatic;
                      }
                      var oAcN = offsetAX * normalY - offsetAY * normalX, oBcN = offsetBX * normalY - offsetBY * normalX, share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);
                      var normalImpulse = (1 + pair.restitution) * normalVelocity * share;
                      tangentImpulse *= share;
                      if (normalVelocity < restingThresh) {
                        contact.normalImpulse = 0;
                      } else {
                        var contactNormalImpulse = contact.normalImpulse;
                        contact.normalImpulse += normalImpulse;
                        if (contact.normalImpulse > 0) contact.normalImpulse = 0;
                        normalImpulse = contact.normalImpulse - contactNormalImpulse;
                      }
                      if (tangentVelocity < -restingThreshTangent || tangentVelocity > restingThreshTangent) {
                        contact.tangentImpulse = 0;
                      } else {
                        var contactTangentImpulse = contact.tangentImpulse;
                        contact.tangentImpulse += tangentImpulse;
                        if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;
                        if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;
                        tangentImpulse = contact.tangentImpulse - contactTangentImpulse;
                      }
                      var impulseX = normalX * normalImpulse + tangentX * tangentImpulse, impulseY = normalY * normalImpulse + tangentY * tangentImpulse;
                      if (!(bodyA.isStatic || bodyA.isSleeping)) {
                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;
                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;
                        bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;
                      }
                      if (!(bodyB.isStatic || bodyB.isSleeping)) {
                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;
                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;
                        bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;
                      }
                    }
                  }
                };
              })();
            },
            /* 19 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Pairs = {};
              module2.exports = Pairs;
              var Pair = __webpack_require__(9);
              var Common = __webpack_require__(0);
              (function() {
                Pairs.create = function(options) {
                  return Common.extend({
                    table: {},
                    list: [],
                    collisionStart: [],
                    collisionActive: [],
                    collisionEnd: []
                  }, options);
                };
                Pairs.update = function(pairs, collisions, timestamp) {
                  var pairUpdate = Pair.update, pairCreate = Pair.create, pairSetActive = Pair.setActive, pairsTable = pairs.table, pairsList = pairs.list, pairsListLength = pairsList.length, pairsListIndex = pairsListLength, collisionStart = pairs.collisionStart, collisionEnd = pairs.collisionEnd, collisionActive = pairs.collisionActive, collisionsLength = collisions.length, collisionStartIndex = 0, collisionEndIndex = 0, collisionActiveIndex = 0, collision, pair, i;
                  for (i = 0; i < collisionsLength; i++) {
                    collision = collisions[i];
                    pair = collision.pair;
                    if (pair) {
                      if (pair.isActive) {
                        collisionActive[collisionActiveIndex++] = pair;
                      }
                      pairUpdate(pair, collision, timestamp);
                    } else {
                      pair = pairCreate(collision, timestamp);
                      pairsTable[pair.id] = pair;
                      collisionStart[collisionStartIndex++] = pair;
                      pairsList[pairsListIndex++] = pair;
                    }
                  }
                  pairsListIndex = 0;
                  pairsListLength = pairsList.length;
                  for (i = 0; i < pairsListLength; i++) {
                    pair = pairsList[i];
                    if (pair.timeUpdated >= timestamp) {
                      pairsList[pairsListIndex++] = pair;
                    } else {
                      pairSetActive(pair, false, timestamp);
                      if (pair.collision.bodyA.sleepCounter > 0 && pair.collision.bodyB.sleepCounter > 0) {
                        pairsList[pairsListIndex++] = pair;
                      } else {
                        collisionEnd[collisionEndIndex++] = pair;
                        delete pairsTable[pair.id];
                      }
                    }
                  }
                  if (pairsList.length !== pairsListIndex) {
                    pairsList.length = pairsListIndex;
                  }
                  if (collisionStart.length !== collisionStartIndex) {
                    collisionStart.length = collisionStartIndex;
                  }
                  if (collisionEnd.length !== collisionEndIndex) {
                    collisionEnd.length = collisionEndIndex;
                  }
                  if (collisionActive.length !== collisionActiveIndex) {
                    collisionActive.length = collisionActiveIndex;
                  }
                };
                Pairs.clear = function(pairs) {
                  pairs.table = {};
                  pairs.list.length = 0;
                  pairs.collisionStart.length = 0;
                  pairs.collisionActive.length = 0;
                  pairs.collisionEnd.length = 0;
                  return pairs;
                };
              })();
            },
            /* 20 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Matter = module2.exports = __webpack_require__(21);
              Matter.Axes = __webpack_require__(11);
              Matter.Bodies = __webpack_require__(12);
              Matter.Body = __webpack_require__(4);
              Matter.Bounds = __webpack_require__(1);
              Matter.Collision = __webpack_require__(8);
              Matter.Common = __webpack_require__(0);
              Matter.Composite = __webpack_require__(6);
              Matter.Composites = __webpack_require__(22);
              Matter.Constraint = __webpack_require__(10);
              Matter.Contact = __webpack_require__(16);
              Matter.Detector = __webpack_require__(13);
              Matter.Engine = __webpack_require__(17);
              Matter.Events = __webpack_require__(5);
              Matter.Grid = __webpack_require__(23);
              Matter.Mouse = __webpack_require__(14);
              Matter.MouseConstraint = __webpack_require__(24);
              Matter.Pair = __webpack_require__(9);
              Matter.Pairs = __webpack_require__(19);
              Matter.Plugin = __webpack_require__(15);
              Matter.Query = __webpack_require__(25);
              Matter.Render = __webpack_require__(26);
              Matter.Resolver = __webpack_require__(18);
              Matter.Runner = __webpack_require__(27);
              Matter.SAT = __webpack_require__(28);
              Matter.Sleeping = __webpack_require__(7);
              Matter.Svg = __webpack_require__(29);
              Matter.Vector = __webpack_require__(2);
              Matter.Vertices = __webpack_require__(3);
              Matter.World = __webpack_require__(30);
              Matter.Engine.run = Matter.Runner.run;
              Matter.Common.deprecated(Matter.Engine, "run", "Engine.run \u27A4 use Matter.Runner.run(engine) instead");
            },
            /* 21 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Matter = {};
              module2.exports = Matter;
              var Plugin = __webpack_require__(15);
              var Common = __webpack_require__(0);
              (function() {
                Matter.name = "matter-js";
                Matter.version = true ? "0.20.0" : void 0;
                Matter.uses = [];
                Matter.used = [];
                Matter.use = function() {
                  Plugin.use(Matter, Array.prototype.slice.call(arguments));
                };
                Matter.before = function(path, func) {
                  path = path.replace(/^Matter./, "");
                  return Common.chainPathBefore(Matter, path, func);
                };
                Matter.after = function(path, func) {
                  path = path.replace(/^Matter./, "");
                  return Common.chainPathAfter(Matter, path, func);
                };
              })();
            },
            /* 22 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Composites = {};
              module2.exports = Composites;
              var Composite = __webpack_require__(6);
              var Constraint = __webpack_require__(10);
              var Common = __webpack_require__(0);
              var Body2 = __webpack_require__(4);
              var Bodies3 = __webpack_require__(12);
              var deprecated = Common.deprecated;
              (function() {
                Composites.stack = function(x, y, columns, rows, columnGap, rowGap, callback) {
                  var stack = Composite.create({ label: "Stack" }), currentX = x, currentY = y, lastBody, i = 0;
                  for (var row = 0; row < rows; row++) {
                    var maxHeight = 0;
                    for (var column = 0; column < columns; column++) {
                      var body = callback(currentX, currentY, column, row, lastBody, i);
                      if (body) {
                        var bodyHeight = body.bounds.max.y - body.bounds.min.y, bodyWidth = body.bounds.max.x - body.bounds.min.x;
                        if (bodyHeight > maxHeight)
                          maxHeight = bodyHeight;
                        Body2.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });
                        currentX = body.bounds.max.x + columnGap;
                        Composite.addBody(stack, body);
                        lastBody = body;
                        i += 1;
                      } else {
                        currentX += columnGap;
                      }
                    }
                    currentY += maxHeight + rowGap;
                    currentX = x;
                  }
                  return stack;
                };
                Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {
                  var bodies = composite.bodies;
                  for (var i = 1; i < bodies.length; i++) {
                    var bodyA = bodies[i - 1], bodyB = bodies[i], bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y, bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y, bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;
                    var defaults = {
                      bodyA,
                      pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },
                      bodyB,
                      pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }
                    };
                    var constraint = Common.extend(defaults, options);
                    Composite.addConstraint(composite, Constraint.create(constraint));
                  }
                  composite.label += " Chain";
                  return composite;
                };
                Composites.mesh = function(composite, columns, rows, crossBrace, options) {
                  var bodies = composite.bodies, row, col, bodyA, bodyB, bodyC;
                  for (row = 0; row < rows; row++) {
                    for (col = 1; col < columns; col++) {
                      bodyA = bodies[col - 1 + row * columns];
                      bodyB = bodies[col + row * columns];
                      Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA, bodyB }, options)));
                    }
                    if (row > 0) {
                      for (col = 0; col < columns; col++) {
                        bodyA = bodies[col + (row - 1) * columns];
                        bodyB = bodies[col + row * columns];
                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA, bodyB }, options)));
                        if (crossBrace && col > 0) {
                          bodyC = bodies[col - 1 + (row - 1) * columns];
                          Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB }, options)));
                        }
                        if (crossBrace && col < columns - 1) {
                          bodyC = bodies[col + 1 + (row - 1) * columns];
                          Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB }, options)));
                        }
                      }
                    }
                  }
                  composite.label += " Mesh";
                  return composite;
                };
                Composites.pyramid = function(x, y, columns, rows, columnGap, rowGap, callback) {
                  return Composites.stack(x, y, columns, rows, columnGap, rowGap, function(stackX, stackY, column, row, lastBody, i) {
                    var actualRows = Math.min(rows, Math.ceil(columns / 2)), lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;
                    if (row > actualRows)
                      return;
                    row = actualRows - row;
                    var start2 = row, end = columns - 1 - row;
                    if (column < start2 || column > end)
                      return;
                    if (i === 1) {
                      Body2.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });
                    }
                    var xOffset = lastBody ? column * lastBodyWidth : 0;
                    return callback(x + xOffset + column * columnGap, stackY, column, row, lastBody, i);
                  });
                };
                Composites.newtonsCradle = function(x, y, number, size, length) {
                  var newtonsCradle = Composite.create({ label: "Newtons Cradle" });
                  for (var i = 0; i < number; i++) {
                    var separation = 1.9, circle = Bodies3.circle(
                      x + i * (size * separation),
                      y + length,
                      size,
                      { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 1e-4, slop: 1 }
                    ), constraint = Constraint.create({ pointA: { x: x + i * (size * separation), y }, bodyB: circle });
                    Composite.addBody(newtonsCradle, circle);
                    Composite.addConstraint(newtonsCradle, constraint);
                  }
                  return newtonsCradle;
                };
                deprecated(Composites, "newtonsCradle", "Composites.newtonsCradle \u27A4 moved to newtonsCradle example");
                Composites.car = function(x, y, width, height, wheelSize) {
                  var group = Body2.nextGroup(true), wheelBase = 20, wheelAOffset = -width * 0.5 + wheelBase, wheelBOffset = width * 0.5 - wheelBase, wheelYOffset = 0;
                  var car = Composite.create({ label: "Car" }), body = Bodies3.rectangle(x, y, width, height, {
                    collisionFilter: {
                      group
                    },
                    chamfer: {
                      radius: height * 0.5
                    },
                    density: 2e-4
                  });
                  var wheelA = Bodies3.circle(x + wheelAOffset, y + wheelYOffset, wheelSize, {
                    collisionFilter: {
                      group
                    },
                    friction: 0.8
                  });
                  var wheelB = Bodies3.circle(x + wheelBOffset, y + wheelYOffset, wheelSize, {
                    collisionFilter: {
                      group
                    },
                    friction: 0.8
                  });
                  var axelA = Constraint.create({
                    bodyB: body,
                    pointB: { x: wheelAOffset, y: wheelYOffset },
                    bodyA: wheelA,
                    stiffness: 1,
                    length: 0
                  });
                  var axelB = Constraint.create({
                    bodyB: body,
                    pointB: { x: wheelBOffset, y: wheelYOffset },
                    bodyA: wheelB,
                    stiffness: 1,
                    length: 0
                  });
                  Composite.addBody(car, body);
                  Composite.addBody(car, wheelA);
                  Composite.addBody(car, wheelB);
                  Composite.addConstraint(car, axelA);
                  Composite.addConstraint(car, axelB);
                  return car;
                };
                deprecated(Composites, "car", "Composites.car \u27A4 moved to car example");
                Composites.softBody = function(x, y, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {
                  particleOptions = Common.extend({ inertia: Infinity }, particleOptions);
                  constraintOptions = Common.extend({ stiffness: 0.2, render: { type: "line", anchors: false } }, constraintOptions);
                  var softBody = Composites.stack(x, y, columns, rows, columnGap, rowGap, function(stackX, stackY) {
                    return Bodies3.circle(stackX, stackY, particleRadius, particleOptions);
                  });
                  Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);
                  softBody.label = "Soft Body";
                  return softBody;
                };
                deprecated(Composites, "softBody", "Composites.softBody \u27A4 moved to softBody and cloth examples");
              })();
            },
            /* 23 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Grid = {};
              module2.exports = Grid;
              var Pair = __webpack_require__(9);
              var Common = __webpack_require__(0);
              var deprecated = Common.deprecated;
              (function() {
                Grid.create = function(options) {
                  var defaults = {
                    buckets: {},
                    pairs: {},
                    pairsList: [],
                    bucketWidth: 48,
                    bucketHeight: 48
                  };
                  return Common.extend(defaults, options);
                };
                Grid.update = function(grid, bodies, engine, forceUpdate) {
                  var i, col, row, world = engine.world, buckets = grid.buckets, bucket, bucketId, gridChanged = false;
                  for (i = 0; i < bodies.length; i++) {
                    var body = bodies[i];
                    if (body.isSleeping && !forceUpdate)
                      continue;
                    if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))
                      continue;
                    var newRegion = Grid._getRegion(grid, body);
                    if (!body.region || newRegion.id !== body.region.id || forceUpdate) {
                      if (!body.region || forceUpdate)
                        body.region = newRegion;
                      var union = Grid._regionUnion(newRegion, body.region);
                      for (col = union.startCol; col <= union.endCol; col++) {
                        for (row = union.startRow; row <= union.endRow; row++) {
                          bucketId = Grid._getBucketId(col, row);
                          bucket = buckets[bucketId];
                          var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;
                          var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow;
                          if (!isInsideNewRegion && isInsideOldRegion) {
                            if (isInsideOldRegion) {
                              if (bucket)
                                Grid._bucketRemoveBody(grid, bucket, body);
                            }
                          }
                          if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {
                            if (!bucket)
                              bucket = Grid._createBucket(buckets, bucketId);
                            Grid._bucketAddBody(grid, bucket, body);
                          }
                        }
                      }
                      body.region = newRegion;
                      gridChanged = true;
                    }
                  }
                  if (gridChanged)
                    grid.pairsList = Grid._createActivePairsList(grid);
                };
                deprecated(Grid, "update", "Grid.update \u27A4 replaced by Matter.Detector");
                Grid.clear = function(grid) {
                  grid.buckets = {};
                  grid.pairs = {};
                  grid.pairsList = [];
                };
                deprecated(Grid, "clear", "Grid.clear \u27A4 replaced by Matter.Detector");
                Grid._regionUnion = function(regionA, regionB) {
                  var startCol = Math.min(regionA.startCol, regionB.startCol), endCol = Math.max(regionA.endCol, regionB.endCol), startRow = Math.min(regionA.startRow, regionB.startRow), endRow = Math.max(regionA.endRow, regionB.endRow);
                  return Grid._createRegion(startCol, endCol, startRow, endRow);
                };
                Grid._getRegion = function(grid, body) {
                  var bounds = body.bounds, startCol = Math.floor(bounds.min.x / grid.bucketWidth), endCol = Math.floor(bounds.max.x / grid.bucketWidth), startRow = Math.floor(bounds.min.y / grid.bucketHeight), endRow = Math.floor(bounds.max.y / grid.bucketHeight);
                  return Grid._createRegion(startCol, endCol, startRow, endRow);
                };
                Grid._createRegion = function(startCol, endCol, startRow, endRow) {
                  return {
                    id: startCol + "," + endCol + "," + startRow + "," + endRow,
                    startCol,
                    endCol,
                    startRow,
                    endRow
                  };
                };
                Grid._getBucketId = function(column, row) {
                  return "C" + column + "R" + row;
                };
                Grid._createBucket = function(buckets, bucketId) {
                  var bucket = buckets[bucketId] = [];
                  return bucket;
                };
                Grid._bucketAddBody = function(grid, bucket, body) {
                  var gridPairs = grid.pairs, pairId = Pair.id, bucketLength = bucket.length, i;
                  for (i = 0; i < bucketLength; i++) {
                    var bodyB = bucket[i];
                    if (body.id === bodyB.id || body.isStatic && bodyB.isStatic)
                      continue;
                    var id = pairId(body, bodyB), pair = gridPairs[id];
                    if (pair) {
                      pair[2] += 1;
                    } else {
                      gridPairs[id] = [body, bodyB, 1];
                    }
                  }
                  bucket.push(body);
                };
                Grid._bucketRemoveBody = function(grid, bucket, body) {
                  var gridPairs = grid.pairs, pairId = Pair.id, i;
                  bucket.splice(Common.indexOf(bucket, body), 1);
                  var bucketLength = bucket.length;
                  for (i = 0; i < bucketLength; i++) {
                    var pair = gridPairs[pairId(body, bucket[i])];
                    if (pair)
                      pair[2] -= 1;
                  }
                };
                Grid._createActivePairsList = function(grid) {
                  var pair, gridPairs = grid.pairs, pairKeys = Common.keys(gridPairs), pairKeysLength = pairKeys.length, pairs = [], k;
                  for (k = 0; k < pairKeysLength; k++) {
                    pair = gridPairs[pairKeys[k]];
                    if (pair[2] > 0) {
                      pairs.push(pair);
                    } else {
                      delete gridPairs[pairKeys[k]];
                    }
                  }
                  return pairs;
                };
              })();
            },
            /* 24 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var MouseConstraint2 = {};
              module2.exports = MouseConstraint2;
              var Vertices = __webpack_require__(3);
              var Sleeping = __webpack_require__(7);
              var Mouse2 = __webpack_require__(14);
              var Events = __webpack_require__(5);
              var Detector = __webpack_require__(13);
              var Constraint = __webpack_require__(10);
              var Composite = __webpack_require__(6);
              var Common = __webpack_require__(0);
              var Bounds = __webpack_require__(1);
              (function() {
                MouseConstraint2.create = function(engine, options) {
                  var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);
                  if (!mouse) {
                    if (engine && engine.render && engine.render.canvas) {
                      mouse = Mouse2.create(engine.render.canvas);
                    } else if (options && options.element) {
                      mouse = Mouse2.create(options.element);
                    } else {
                      mouse = Mouse2.create();
                      Common.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected");
                    }
                  }
                  var constraint = Constraint.create({
                    label: "Mouse Constraint",
                    pointA: mouse.position,
                    pointB: { x: 0, y: 0 },
                    length: 0.01,
                    stiffness: 0.1,
                    angularStiffness: 1,
                    render: {
                      strokeStyle: "#90EE90",
                      lineWidth: 3
                    }
                  });
                  var defaults = {
                    type: "mouseConstraint",
                    mouse,
                    element: null,
                    body: null,
                    constraint,
                    collisionFilter: {
                      category: 1,
                      mask: 4294967295,
                      group: 0
                    }
                  };
                  var mouseConstraint = Common.extend(defaults, options);
                  Events.on(engine, "beforeUpdate", function() {
                    var allBodies = Composite.allBodies(engine.world);
                    MouseConstraint2.update(mouseConstraint, allBodies);
                    MouseConstraint2._triggerEvents(mouseConstraint);
                  });
                  return mouseConstraint;
                };
                MouseConstraint2.update = function(mouseConstraint, bodies) {
                  var mouse = mouseConstraint.mouse, constraint = mouseConstraint.constraint, body = mouseConstraint.body;
                  if (mouse.button === 0) {
                    if (!constraint.bodyB) {
                      for (var i = 0; i < bodies.length; i++) {
                        body = bodies[i];
                        if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {
                          for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {
                            var part = body.parts[j];
                            if (Vertices.contains(part.vertices, mouse.position)) {
                              constraint.pointA = mouse.position;
                              constraint.bodyB = mouseConstraint.body = body;
                              constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };
                              constraint.angleB = body.angle;
                              Sleeping.set(body, false);
                              Events.trigger(mouseConstraint, "startdrag", { mouse, body });
                              break;
                            }
                          }
                        }
                      }
                    } else {
                      Sleeping.set(constraint.bodyB, false);
                      constraint.pointA = mouse.position;
                    }
                  } else {
                    constraint.bodyB = mouseConstraint.body = null;
                    constraint.pointB = null;
                    if (body)
                      Events.trigger(mouseConstraint, "enddrag", { mouse, body });
                  }
                };
                MouseConstraint2._triggerEvents = function(mouseConstraint) {
                  var mouse = mouseConstraint.mouse, mouseEvents = mouse.sourceEvents;
                  if (mouseEvents.mousemove)
                    Events.trigger(mouseConstraint, "mousemove", { mouse });
                  if (mouseEvents.mousedown)
                    Events.trigger(mouseConstraint, "mousedown", { mouse });
                  if (mouseEvents.mouseup)
                    Events.trigger(mouseConstraint, "mouseup", { mouse });
                  Mouse2.clearSourceEvents(mouse);
                };
              })();
            },
            /* 25 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Query = {};
              module2.exports = Query;
              var Vector3 = __webpack_require__(2);
              var Collision = __webpack_require__(8);
              var Bounds = __webpack_require__(1);
              var Bodies3 = __webpack_require__(12);
              var Vertices = __webpack_require__(3);
              (function() {
                Query.collides = function(body, bodies) {
                  var collisions = [], bodiesLength = bodies.length, bounds = body.bounds, collides = Collision.collides, overlaps = Bounds.overlaps;
                  for (var i = 0; i < bodiesLength; i++) {
                    var bodyA = bodies[i], partsALength = bodyA.parts.length, partsAStart = partsALength === 1 ? 0 : 1;
                    if (overlaps(bodyA.bounds, bounds)) {
                      for (var j = partsAStart; j < partsALength; j++) {
                        var part = bodyA.parts[j];
                        if (overlaps(part.bounds, bounds)) {
                          var collision = collides(part, body);
                          if (collision) {
                            collisions.push(collision);
                            break;
                          }
                        }
                      }
                    }
                  }
                  return collisions;
                };
                Query.ray = function(bodies, startPoint, endPoint, rayWidth) {
                  rayWidth = rayWidth || 1e-100;
                  var rayAngle = Vector3.angle(startPoint, endPoint), rayLength = Vector3.magnitude(Vector3.sub(startPoint, endPoint)), rayX = (endPoint.x + startPoint.x) * 0.5, rayY = (endPoint.y + startPoint.y) * 0.5, ray = Bodies3.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }), collisions = Query.collides(ray, bodies);
                  for (var i = 0; i < collisions.length; i += 1) {
                    var collision = collisions[i];
                    collision.body = collision.bodyB = collision.bodyA;
                  }
                  return collisions;
                };
                Query.region = function(bodies, bounds, outside) {
                  var result = [];
                  for (var i = 0; i < bodies.length; i++) {
                    var body = bodies[i], overlaps = Bounds.overlaps(body.bounds, bounds);
                    if (overlaps && !outside || !overlaps && outside)
                      result.push(body);
                  }
                  return result;
                };
                Query.point = function(bodies, point) {
                  var result = [];
                  for (var i = 0; i < bodies.length; i++) {
                    var body = bodies[i];
                    if (Bounds.contains(body.bounds, point)) {
                      for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {
                        var part = body.parts[j];
                        if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {
                          result.push(body);
                          break;
                        }
                      }
                    }
                  }
                  return result;
                };
              })();
            },
            /* 26 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Render2 = {};
              module2.exports = Render2;
              var Body2 = __webpack_require__(4);
              var Common = __webpack_require__(0);
              var Composite = __webpack_require__(6);
              var Bounds = __webpack_require__(1);
              var Events = __webpack_require__(5);
              var Vector3 = __webpack_require__(2);
              var Mouse2 = __webpack_require__(14);
              (function() {
                var _requestAnimationFrame, _cancelAnimationFrame;
                if (typeof window !== "undefined") {
                  _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
                    window.setTimeout(function() {
                      callback(Common.now());
                    }, 1e3 / 60);
                  };
                  _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;
                }
                Render2._goodFps = 30;
                Render2._goodDelta = 1e3 / 60;
                Render2.create = function(options) {
                  var defaults = {
                    engine: null,
                    element: null,
                    canvas: null,
                    mouse: null,
                    frameRequestId: null,
                    timing: {
                      historySize: 60,
                      delta: 0,
                      deltaHistory: [],
                      lastTime: 0,
                      lastTimestamp: 0,
                      lastElapsed: 0,
                      timestampElapsed: 0,
                      timestampElapsedHistory: [],
                      engineDeltaHistory: [],
                      engineElapsedHistory: [],
                      engineUpdatesHistory: [],
                      elapsedHistory: []
                    },
                    options: {
                      width: 800,
                      height: 600,
                      pixelRatio: 1,
                      background: "#14151f",
                      wireframeBackground: "#14151f",
                      wireframeStrokeStyle: "#bbb",
                      hasBounds: !!options.bounds,
                      enabled: true,
                      wireframes: true,
                      showSleeping: true,
                      showDebug: false,
                      showStats: false,
                      showPerformance: false,
                      showBounds: false,
                      showVelocity: false,
                      showCollisions: false,
                      showSeparations: false,
                      showAxes: false,
                      showPositions: false,
                      showAngleIndicator: false,
                      showIds: false,
                      showVertexNumbers: false,
                      showConvexHulls: false,
                      showInternalEdges: false,
                      showMousePosition: false
                    }
                  };
                  var render = Common.extend(defaults, options);
                  if (render.canvas) {
                    render.canvas.width = render.options.width || render.canvas.width;
                    render.canvas.height = render.options.height || render.canvas.height;
                  }
                  render.mouse = options.mouse;
                  render.engine = options.engine;
                  render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);
                  render.context = render.canvas.getContext("2d");
                  render.textures = {};
                  render.bounds = render.bounds || {
                    min: {
                      x: 0,
                      y: 0
                    },
                    max: {
                      x: render.canvas.width,
                      y: render.canvas.height
                    }
                  };
                  render.controller = Render2;
                  render.options.showBroadphase = false;
                  if (render.options.pixelRatio !== 1) {
                    Render2.setPixelRatio(render, render.options.pixelRatio);
                  }
                  if (Common.isElement(render.element)) {
                    render.element.appendChild(render.canvas);
                  }
                  return render;
                };
                Render2.run = function(render) {
                  (function loop(time) {
                    render.frameRequestId = _requestAnimationFrame(loop);
                    _updateTiming(render, time);
                    Render2.world(render, time);
                    render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);
                    if (render.options.showStats || render.options.showDebug) {
                      Render2.stats(render, render.context, time);
                    }
                    if (render.options.showPerformance || render.options.showDebug) {
                      Render2.performance(render, render.context, time);
                    }
                    render.context.setTransform(1, 0, 0, 1, 0, 0);
                  })();
                };
                Render2.stop = function(render) {
                  _cancelAnimationFrame(render.frameRequestId);
                };
                Render2.setPixelRatio = function(render, pixelRatio) {
                  var options = render.options, canvas = render.canvas;
                  if (pixelRatio === "auto") {
                    pixelRatio = _getPixelRatio(canvas);
                  }
                  options.pixelRatio = pixelRatio;
                  canvas.setAttribute("data-pixel-ratio", pixelRatio);
                  canvas.width = options.width * pixelRatio;
                  canvas.height = options.height * pixelRatio;
                  canvas.style.width = options.width + "px";
                  canvas.style.height = options.height + "px";
                };
                Render2.setSize = function(render, width, height) {
                  render.options.width = width;
                  render.options.height = height;
                  render.bounds.max.x = render.bounds.min.x + width;
                  render.bounds.max.y = render.bounds.min.y + height;
                  if (render.options.pixelRatio !== 1) {
                    Render2.setPixelRatio(render, render.options.pixelRatio);
                  } else {
                    render.canvas.width = width;
                    render.canvas.height = height;
                  }
                };
                Render2.lookAt = function(render, objects, padding, center) {
                  center = typeof center !== "undefined" ? center : true;
                  objects = Common.isArray(objects) ? objects : [objects];
                  padding = padding || {
                    x: 0,
                    y: 0
                  };
                  var bounds = {
                    min: { x: Infinity, y: Infinity },
                    max: { x: -Infinity, y: -Infinity }
                  };
                  for (var i = 0; i < objects.length; i += 1) {
                    var object = objects[i], min = object.bounds ? object.bounds.min : object.min || object.position || object, max = object.bounds ? object.bounds.max : object.max || object.position || object;
                    if (min && max) {
                      if (min.x < bounds.min.x)
                        bounds.min.x = min.x;
                      if (max.x > bounds.max.x)
                        bounds.max.x = max.x;
                      if (min.y < bounds.min.y)
                        bounds.min.y = min.y;
                      if (max.y > bounds.max.y)
                        bounds.max.y = max.y;
                    }
                  }
                  var width = bounds.max.x - bounds.min.x + 2 * padding.x, height = bounds.max.y - bounds.min.y + 2 * padding.y, viewHeight = render.canvas.height, viewWidth = render.canvas.width, outerRatio = viewWidth / viewHeight, innerRatio = width / height, scaleX = 1, scaleY = 1;
                  if (innerRatio > outerRatio) {
                    scaleY = innerRatio / outerRatio;
                  } else {
                    scaleX = outerRatio / innerRatio;
                  }
                  render.options.hasBounds = true;
                  render.bounds.min.x = bounds.min.x;
                  render.bounds.max.x = bounds.min.x + width * scaleX;
                  render.bounds.min.y = bounds.min.y;
                  render.bounds.max.y = bounds.min.y + height * scaleY;
                  if (center) {
                    render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;
                    render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;
                    render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;
                    render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;
                  }
                  render.bounds.min.x -= padding.x;
                  render.bounds.max.x -= padding.x;
                  render.bounds.min.y -= padding.y;
                  render.bounds.max.y -= padding.y;
                  if (render.mouse) {
                    Mouse2.setScale(render.mouse, {
                      x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,
                      y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height
                    });
                    Mouse2.setOffset(render.mouse, render.bounds.min);
                  }
                };
                Render2.startViewTransform = function(render) {
                  var boundsWidth = render.bounds.max.x - render.bounds.min.x, boundsHeight = render.bounds.max.y - render.bounds.min.y, boundsScaleX = boundsWidth / render.options.width, boundsScaleY = boundsHeight / render.options.height;
                  render.context.setTransform(
                    render.options.pixelRatio / boundsScaleX,
                    0,
                    0,
                    render.options.pixelRatio / boundsScaleY,
                    0,
                    0
                  );
                  render.context.translate(-render.bounds.min.x, -render.bounds.min.y);
                };
                Render2.endViewTransform = function(render) {
                  render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);
                };
                Render2.world = function(render, time) {
                  var startTime = Common.now(), engine = render.engine, world = engine.world, canvas = render.canvas, context = render.context, options = render.options, timing = render.timing;
                  var allBodies = Composite.allBodies(world), allConstraints = Composite.allConstraints(world), background = options.wireframes ? options.wireframeBackground : options.background, bodies = [], constraints = [], i;
                  var event = {
                    timestamp: engine.timing.timestamp
                  };
                  Events.trigger(render, "beforeRender", event);
                  if (render.currentBackground !== background)
                    _applyBackground(render, background);
                  context.globalCompositeOperation = "source-in";
                  context.fillStyle = "transparent";
                  context.fillRect(0, 0, canvas.width, canvas.height);
                  context.globalCompositeOperation = "source-over";
                  if (options.hasBounds) {
                    for (i = 0; i < allBodies.length; i++) {
                      var body = allBodies[i];
                      if (Bounds.overlaps(body.bounds, render.bounds))
                        bodies.push(body);
                    }
                    for (i = 0; i < allConstraints.length; i++) {
                      var constraint = allConstraints[i], bodyA = constraint.bodyA, bodyB = constraint.bodyB, pointAWorld = constraint.pointA, pointBWorld = constraint.pointB;
                      if (bodyA) pointAWorld = Vector3.add(bodyA.position, constraint.pointA);
                      if (bodyB) pointBWorld = Vector3.add(bodyB.position, constraint.pointB);
                      if (!pointAWorld || !pointBWorld)
                        continue;
                      if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))
                        constraints.push(constraint);
                    }
                    Render2.startViewTransform(render);
                    if (render.mouse) {
                      Mouse2.setScale(render.mouse, {
                        x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,
                        y: (render.bounds.max.y - render.bounds.min.y) / render.options.height
                      });
                      Mouse2.setOffset(render.mouse, render.bounds.min);
                    }
                  } else {
                    constraints = allConstraints;
                    bodies = allBodies;
                    if (render.options.pixelRatio !== 1) {
                      render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);
                    }
                  }
                  if (!options.wireframes || engine.enableSleeping && options.showSleeping) {
                    Render2.bodies(render, bodies, context);
                  } else {
                    if (options.showConvexHulls)
                      Render2.bodyConvexHulls(render, bodies, context);
                    Render2.bodyWireframes(render, bodies, context);
                  }
                  if (options.showBounds)
                    Render2.bodyBounds(render, bodies, context);
                  if (options.showAxes || options.showAngleIndicator)
                    Render2.bodyAxes(render, bodies, context);
                  if (options.showPositions)
                    Render2.bodyPositions(render, bodies, context);
                  if (options.showVelocity)
                    Render2.bodyVelocity(render, bodies, context);
                  if (options.showIds)
                    Render2.bodyIds(render, bodies, context);
                  if (options.showSeparations)
                    Render2.separations(render, engine.pairs.list, context);
                  if (options.showCollisions)
                    Render2.collisions(render, engine.pairs.list, context);
                  if (options.showVertexNumbers)
                    Render2.vertexNumbers(render, bodies, context);
                  if (options.showMousePosition)
                    Render2.mousePosition(render, render.mouse, context);
                  Render2.constraints(constraints, context);
                  if (options.hasBounds) {
                    Render2.endViewTransform(render);
                  }
                  Events.trigger(render, "afterRender", event);
                  timing.lastElapsed = Common.now() - startTime;
                };
                Render2.stats = function(render, context, time) {
                  var engine = render.engine, world = engine.world, bodies = Composite.allBodies(world), parts = 0, width = 55, height = 44, x = 0, y = 0;
                  for (var i = 0; i < bodies.length; i += 1) {
                    parts += bodies[i].parts.length;
                  }
                  var sections = {
                    "Part": parts,
                    "Body": bodies.length,
                    "Cons": Composite.allConstraints(world).length,
                    "Comp": Composite.allComposites(world).length,
                    "Pair": engine.pairs.list.length
                  };
                  context.fillStyle = "#0e0f19";
                  context.fillRect(x, y, width * 5.5, height);
                  context.font = "12px Arial";
                  context.textBaseline = "top";
                  context.textAlign = "right";
                  for (var key in sections) {
                    var section = sections[key];
                    context.fillStyle = "#aaa";
                    context.fillText(key, x + width, y + 8);
                    context.fillStyle = "#eee";
                    context.fillText(section, x + width, y + 26);
                    x += width;
                  }
                };
                Render2.performance = function(render, context) {
                  var engine = render.engine, timing = render.timing, deltaHistory = timing.deltaHistory, elapsedHistory = timing.elapsedHistory, timestampElapsedHistory = timing.timestampElapsedHistory, engineDeltaHistory = timing.engineDeltaHistory, engineUpdatesHistory = timing.engineUpdatesHistory, engineElapsedHistory = timing.engineElapsedHistory, lastEngineUpdatesPerFrame = engine.timing.lastUpdatesPerFrame, lastEngineDelta = engine.timing.lastDelta;
                  var deltaMean = _mean(deltaHistory), elapsedMean = _mean(elapsedHistory), engineDeltaMean = _mean(engineDeltaHistory), engineUpdatesMean = _mean(engineUpdatesHistory), engineElapsedMean = _mean(engineElapsedHistory), timestampElapsedMean = _mean(timestampElapsedHistory), rateMean = timestampElapsedMean / deltaMean || 0, neededUpdatesPerFrame = Math.round(deltaMean / lastEngineDelta), fps = 1e3 / deltaMean || 0;
                  var graphHeight = 4, gap = 12, width = 60, height = 34, x = 10, y = 69;
                  context.fillStyle = "#0e0f19";
                  context.fillRect(0, 50, gap * 5 + width * 6 + 22, height);
                  Render2.status(
                    context,
                    x,
                    y,
                    width,
                    graphHeight,
                    deltaHistory.length,
                    Math.round(fps) + " fps",
                    fps / Render2._goodFps,
                    function(i) {
                      return deltaHistory[i] / deltaMean - 1;
                    }
                  );
                  Render2.status(
                    context,
                    x + gap + width,
                    y,
                    width,
                    graphHeight,
                    engineDeltaHistory.length,
                    lastEngineDelta.toFixed(2) + " dt",
                    Render2._goodDelta / lastEngineDelta,
                    function(i) {
                      return engineDeltaHistory[i] / engineDeltaMean - 1;
                    }
                  );
                  Render2.status(
                    context,
                    x + (gap + width) * 2,
                    y,
                    width,
                    graphHeight,
                    engineUpdatesHistory.length,
                    lastEngineUpdatesPerFrame + " upf",
                    Math.pow(Common.clamp(engineUpdatesMean / neededUpdatesPerFrame || 1, 0, 1), 4),
                    function(i) {
                      return engineUpdatesHistory[i] / engineUpdatesMean - 1;
                    }
                  );
                  Render2.status(
                    context,
                    x + (gap + width) * 3,
                    y,
                    width,
                    graphHeight,
                    engineElapsedHistory.length,
                    engineElapsedMean.toFixed(2) + " ut",
                    1 - lastEngineUpdatesPerFrame * engineElapsedMean / Render2._goodFps,
                    function(i) {
                      return engineElapsedHistory[i] / engineElapsedMean - 1;
                    }
                  );
                  Render2.status(
                    context,
                    x + (gap + width) * 4,
                    y,
                    width,
                    graphHeight,
                    elapsedHistory.length,
                    elapsedMean.toFixed(2) + " rt",
                    1 - elapsedMean / Render2._goodFps,
                    function(i) {
                      return elapsedHistory[i] / elapsedMean - 1;
                    }
                  );
                  Render2.status(
                    context,
                    x + (gap + width) * 5,
                    y,
                    width,
                    graphHeight,
                    timestampElapsedHistory.length,
                    rateMean.toFixed(2) + " x",
                    rateMean * rateMean * rateMean,
                    function(i) {
                      return (timestampElapsedHistory[i] / deltaHistory[i] / rateMean || 0) - 1;
                    }
                  );
                };
                Render2.status = function(context, x, y, width, height, count, label, indicator, plotY) {
                  context.strokeStyle = "#888";
                  context.fillStyle = "#444";
                  context.lineWidth = 1;
                  context.fillRect(x, y + 7, width, 1);
                  context.beginPath();
                  context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));
                  for (var i = 0; i < width; i += 1) {
                    context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));
                  }
                  context.stroke();
                  context.fillStyle = "hsl(" + Common.clamp(25 + 95 * indicator, 0, 120) + ",100%,60%)";
                  context.fillRect(x, y - 7, 4, 4);
                  context.font = "12px Arial";
                  context.textBaseline = "middle";
                  context.textAlign = "right";
                  context.fillStyle = "#eee";
                  context.fillText(label, x + width, y - 5);
                };
                Render2.constraints = function(constraints, context) {
                  var c = context;
                  for (var i = 0; i < constraints.length; i++) {
                    var constraint = constraints[i];
                    if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)
                      continue;
                    var bodyA = constraint.bodyA, bodyB = constraint.bodyB, start2, end;
                    if (bodyA) {
                      start2 = Vector3.add(bodyA.position, constraint.pointA);
                    } else {
                      start2 = constraint.pointA;
                    }
                    if (constraint.render.type === "pin") {
                      c.beginPath();
                      c.arc(start2.x, start2.y, 3, 0, 2 * Math.PI);
                      c.closePath();
                    } else {
                      if (bodyB) {
                        end = Vector3.add(bodyB.position, constraint.pointB);
                      } else {
                        end = constraint.pointB;
                      }
                      c.beginPath();
                      c.moveTo(start2.x, start2.y);
                      if (constraint.render.type === "spring") {
                        var delta = Vector3.sub(end, start2), normal = Vector3.perp(Vector3.normalise(delta)), coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)), offset;
                        for (var j = 1; j < coils; j += 1) {
                          offset = j % 2 === 0 ? 1 : -1;
                          c.lineTo(
                            start2.x + delta.x * (j / coils) + normal.x * offset * 4,
                            start2.y + delta.y * (j / coils) + normal.y * offset * 4
                          );
                        }
                      }
                      c.lineTo(end.x, end.y);
                    }
                    if (constraint.render.lineWidth) {
                      c.lineWidth = constraint.render.lineWidth;
                      c.strokeStyle = constraint.render.strokeStyle;
                      c.stroke();
                    }
                    if (constraint.render.anchors) {
                      c.fillStyle = constraint.render.strokeStyle;
                      c.beginPath();
                      c.arc(start2.x, start2.y, 3, 0, 2 * Math.PI);
                      c.arc(end.x, end.y, 3, 0, 2 * Math.PI);
                      c.closePath();
                      c.fill();
                    }
                  }
                };
                Render2.bodies = function(render, bodies, context) {
                  var c = context, engine = render.engine, options = render.options, showInternalEdges = options.showInternalEdges || !options.wireframes, body, part, i, k;
                  for (i = 0; i < bodies.length; i++) {
                    body = bodies[i];
                    if (!body.render.visible)
                      continue;
                    for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {
                      part = body.parts[k];
                      if (!part.render.visible)
                        continue;
                      if (options.showSleeping && body.isSleeping) {
                        c.globalAlpha = 0.5 * part.render.opacity;
                      } else if (part.render.opacity !== 1) {
                        c.globalAlpha = part.render.opacity;
                      }
                      if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {
                        var sprite = part.render.sprite, texture = _getTexture(render, sprite.texture);
                        c.translate(part.position.x, part.position.y);
                        c.rotate(part.angle);
                        c.drawImage(
                          texture,
                          texture.width * -sprite.xOffset * sprite.xScale,
                          texture.height * -sprite.yOffset * sprite.yScale,
                          texture.width * sprite.xScale,
                          texture.height * sprite.yScale
                        );
                        c.rotate(-part.angle);
                        c.translate(-part.position.x, -part.position.y);
                      } else {
                        if (part.circleRadius) {
                          c.beginPath();
                          c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);
                        } else {
                          c.beginPath();
                          c.moveTo(part.vertices[0].x, part.vertices[0].y);
                          for (var j = 1; j < part.vertices.length; j++) {
                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {
                              c.lineTo(part.vertices[j].x, part.vertices[j].y);
                            } else {
                              c.moveTo(part.vertices[j].x, part.vertices[j].y);
                            }
                            if (part.vertices[j].isInternal && !showInternalEdges) {
                              c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);
                            }
                          }
                          c.lineTo(part.vertices[0].x, part.vertices[0].y);
                          c.closePath();
                        }
                        if (!options.wireframes) {
                          c.fillStyle = part.render.fillStyle;
                          if (part.render.lineWidth) {
                            c.lineWidth = part.render.lineWidth;
                            c.strokeStyle = part.render.strokeStyle;
                            c.stroke();
                          }
                          c.fill();
                        } else {
                          c.lineWidth = 1;
                          c.strokeStyle = render.options.wireframeStrokeStyle;
                          c.stroke();
                        }
                      }
                      c.globalAlpha = 1;
                    }
                  }
                };
                Render2.bodyWireframes = function(render, bodies, context) {
                  var c = context, showInternalEdges = render.options.showInternalEdges, body, part, i, j, k;
                  c.beginPath();
                  for (i = 0; i < bodies.length; i++) {
                    body = bodies[i];
                    if (!body.render.visible)
                      continue;
                    for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {
                      part = body.parts[k];
                      c.moveTo(part.vertices[0].x, part.vertices[0].y);
                      for (j = 1; j < part.vertices.length; j++) {
                        if (!part.vertices[j - 1].isInternal || showInternalEdges) {
                          c.lineTo(part.vertices[j].x, part.vertices[j].y);
                        } else {
                          c.moveTo(part.vertices[j].x, part.vertices[j].y);
                        }
                        if (part.vertices[j].isInternal && !showInternalEdges) {
                          c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);
                        }
                      }
                      c.lineTo(part.vertices[0].x, part.vertices[0].y);
                    }
                  }
                  c.lineWidth = 1;
                  c.strokeStyle = render.options.wireframeStrokeStyle;
                  c.stroke();
                };
                Render2.bodyConvexHulls = function(render, bodies, context) {
                  var c = context, body, part, i, j, k;
                  c.beginPath();
                  for (i = 0; i < bodies.length; i++) {
                    body = bodies[i];
                    if (!body.render.visible || body.parts.length === 1)
                      continue;
                    c.moveTo(body.vertices[0].x, body.vertices[0].y);
                    for (j = 1; j < body.vertices.length; j++) {
                      c.lineTo(body.vertices[j].x, body.vertices[j].y);
                    }
                    c.lineTo(body.vertices[0].x, body.vertices[0].y);
                  }
                  c.lineWidth = 1;
                  c.strokeStyle = "rgba(255,255,255,0.2)";
                  c.stroke();
                };
                Render2.vertexNumbers = function(render, bodies, context) {
                  var c = context, i, j, k;
                  for (i = 0; i < bodies.length; i++) {
                    var parts = bodies[i].parts;
                    for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {
                      var part = parts[k];
                      for (j = 0; j < part.vertices.length; j++) {
                        c.fillStyle = "rgba(255,255,255,0.2)";
                        c.fillText(i + "_" + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);
                      }
                    }
                  }
                };
                Render2.mousePosition = function(render, mouse, context) {
                  var c = context;
                  c.fillStyle = "rgba(255,255,255,0.8)";
                  c.fillText(mouse.position.x + "  " + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);
                };
                Render2.bodyBounds = function(render, bodies, context) {
                  var c = context, engine = render.engine, options = render.options;
                  c.beginPath();
                  for (var i = 0; i < bodies.length; i++) {
                    var body = bodies[i];
                    if (body.render.visible) {
                      var parts = bodies[i].parts;
                      for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {
                        var part = parts[j];
                        c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);
                      }
                    }
                  }
                  if (options.wireframes) {
                    c.strokeStyle = "rgba(255,255,255,0.08)";
                  } else {
                    c.strokeStyle = "rgba(0,0,0,0.1)";
                  }
                  c.lineWidth = 1;
                  c.stroke();
                };
                Render2.bodyAxes = function(render, bodies, context) {
                  var c = context, engine = render.engine, options = render.options, part, i, j, k;
                  c.beginPath();
                  for (i = 0; i < bodies.length; i++) {
                    var body = bodies[i], parts = body.parts;
                    if (!body.render.visible)
                      continue;
                    if (options.showAxes) {
                      for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {
                        part = parts[j];
                        for (k = 0; k < part.axes.length; k++) {
                          var axis = part.axes[k];
                          c.moveTo(part.position.x, part.position.y);
                          c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);
                        }
                      }
                    } else {
                      for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {
                        part = parts[j];
                        for (k = 0; k < part.axes.length; k++) {
                          c.moveTo(part.position.x, part.position.y);
                          c.lineTo(
                            (part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2,
                            (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2
                          );
                        }
                      }
                    }
                  }
                  if (options.wireframes) {
                    c.strokeStyle = "indianred";
                    c.lineWidth = 1;
                  } else {
                    c.strokeStyle = "rgba(255, 255, 255, 0.4)";
                    c.globalCompositeOperation = "overlay";
                    c.lineWidth = 2;
                  }
                  c.stroke();
                  c.globalCompositeOperation = "source-over";
                };
                Render2.bodyPositions = function(render, bodies, context) {
                  var c = context, engine = render.engine, options = render.options, body, part, i, k;
                  c.beginPath();
                  for (i = 0; i < bodies.length; i++) {
                    body = bodies[i];
                    if (!body.render.visible)
                      continue;
                    for (k = 0; k < body.parts.length; k++) {
                      part = body.parts[k];
                      c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);
                      c.closePath();
                    }
                  }
                  if (options.wireframes) {
                    c.fillStyle = "indianred";
                  } else {
                    c.fillStyle = "rgba(0,0,0,0.5)";
                  }
                  c.fill();
                  c.beginPath();
                  for (i = 0; i < bodies.length; i++) {
                    body = bodies[i];
                    if (body.render.visible) {
                      c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);
                      c.closePath();
                    }
                  }
                  c.fillStyle = "rgba(255,165,0,0.8)";
                  c.fill();
                };
                Render2.bodyVelocity = function(render, bodies, context) {
                  var c = context;
                  c.beginPath();
                  for (var i = 0; i < bodies.length; i++) {
                    var body = bodies[i];
                    if (!body.render.visible)
                      continue;
                    var velocity = Body2.getVelocity(body);
                    c.moveTo(body.position.x, body.position.y);
                    c.lineTo(body.position.x + velocity.x, body.position.y + velocity.y);
                  }
                  c.lineWidth = 3;
                  c.strokeStyle = "cornflowerblue";
                  c.stroke();
                };
                Render2.bodyIds = function(render, bodies, context) {
                  var c = context, i, j;
                  for (i = 0; i < bodies.length; i++) {
                    if (!bodies[i].render.visible)
                      continue;
                    var parts = bodies[i].parts;
                    for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {
                      var part = parts[j];
                      c.font = "12px Arial";
                      c.fillStyle = "rgba(255,255,255,0.5)";
                      c.fillText(part.id, part.position.x + 10, part.position.y - 10);
                    }
                  }
                };
                Render2.collisions = function(render, pairs, context) {
                  var c = context, options = render.options, pair, collision, corrected, bodyA, bodyB, i, j;
                  c.beginPath();
                  for (i = 0; i < pairs.length; i++) {
                    pair = pairs[i];
                    if (!pair.isActive)
                      continue;
                    collision = pair.collision;
                    for (j = 0; j < pair.contactCount; j++) {
                      var contact = pair.contacts[j], vertex = contact.vertex;
                      c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);
                    }
                  }
                  if (options.wireframes) {
                    c.fillStyle = "rgba(255,255,255,0.7)";
                  } else {
                    c.fillStyle = "orange";
                  }
                  c.fill();
                  c.beginPath();
                  for (i = 0; i < pairs.length; i++) {
                    pair = pairs[i];
                    if (!pair.isActive)
                      continue;
                    collision = pair.collision;
                    if (pair.contactCount > 0) {
                      var normalPosX = pair.contacts[0].vertex.x, normalPosY = pair.contacts[0].vertex.y;
                      if (pair.contactCount === 2) {
                        normalPosX = (pair.contacts[0].vertex.x + pair.contacts[1].vertex.x) / 2;
                        normalPosY = (pair.contacts[0].vertex.y + pair.contacts[1].vertex.y) / 2;
                      }
                      if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {
                        c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);
                      } else {
                        c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);
                      }
                      c.lineTo(normalPosX, normalPosY);
                    }
                  }
                  if (options.wireframes) {
                    c.strokeStyle = "rgba(255,165,0,0.7)";
                  } else {
                    c.strokeStyle = "orange";
                  }
                  c.lineWidth = 1;
                  c.stroke();
                };
                Render2.separations = function(render, pairs, context) {
                  var c = context, options = render.options, pair, collision, corrected, bodyA, bodyB, i, j;
                  c.beginPath();
                  for (i = 0; i < pairs.length; i++) {
                    pair = pairs[i];
                    if (!pair.isActive)
                      continue;
                    collision = pair.collision;
                    bodyA = collision.bodyA;
                    bodyB = collision.bodyB;
                    var k = 1;
                    if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;
                    if (bodyB.isStatic) k = 0;
                    c.moveTo(bodyB.position.x, bodyB.position.y);
                    c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);
                    k = 1;
                    if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;
                    if (bodyA.isStatic) k = 0;
                    c.moveTo(bodyA.position.x, bodyA.position.y);
                    c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);
                  }
                  if (options.wireframes) {
                    c.strokeStyle = "rgba(255,165,0,0.5)";
                  } else {
                    c.strokeStyle = "orange";
                  }
                  c.stroke();
                };
                Render2.inspector = function(inspector, context) {
                  var engine = inspector.engine, selected = inspector.selected, render = inspector.render, options = render.options, bounds;
                  if (options.hasBounds) {
                    var boundsWidth = render.bounds.max.x - render.bounds.min.x, boundsHeight = render.bounds.max.y - render.bounds.min.y, boundsScaleX = boundsWidth / render.options.width, boundsScaleY = boundsHeight / render.options.height;
                    context.scale(1 / boundsScaleX, 1 / boundsScaleY);
                    context.translate(-render.bounds.min.x, -render.bounds.min.y);
                  }
                  for (var i = 0; i < selected.length; i++) {
                    var item = selected[i].data;
                    context.translate(0.5, 0.5);
                    context.lineWidth = 1;
                    context.strokeStyle = "rgba(255,165,0,0.9)";
                    context.setLineDash([1, 2]);
                    switch (item.type) {
                      case "body":
                        bounds = item.bounds;
                        context.beginPath();
                        context.rect(
                          Math.floor(bounds.min.x - 3),
                          Math.floor(bounds.min.y - 3),
                          Math.floor(bounds.max.x - bounds.min.x + 6),
                          Math.floor(bounds.max.y - bounds.min.y + 6)
                        );
                        context.closePath();
                        context.stroke();
                        break;
                      case "constraint":
                        var point = item.pointA;
                        if (item.bodyA)
                          point = item.pointB;
                        context.beginPath();
                        context.arc(point.x, point.y, 10, 0, 2 * Math.PI);
                        context.closePath();
                        context.stroke();
                        break;
                    }
                    context.setLineDash([]);
                    context.translate(-0.5, -0.5);
                  }
                  if (inspector.selectStart !== null) {
                    context.translate(0.5, 0.5);
                    context.lineWidth = 1;
                    context.strokeStyle = "rgba(255,165,0,0.6)";
                    context.fillStyle = "rgba(255,165,0,0.1)";
                    bounds = inspector.selectBounds;
                    context.beginPath();
                    context.rect(
                      Math.floor(bounds.min.x),
                      Math.floor(bounds.min.y),
                      Math.floor(bounds.max.x - bounds.min.x),
                      Math.floor(bounds.max.y - bounds.min.y)
                    );
                    context.closePath();
                    context.stroke();
                    context.fill();
                    context.translate(-0.5, -0.5);
                  }
                  if (options.hasBounds)
                    context.setTransform(1, 0, 0, 1, 0, 0);
                };
                var _updateTiming = function(render, time) {
                  var engine = render.engine, timing = render.timing, historySize = timing.historySize, timestamp = engine.timing.timestamp;
                  timing.delta = time - timing.lastTime || Render2._goodDelta;
                  timing.lastTime = time;
                  timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;
                  timing.lastTimestamp = timestamp;
                  timing.deltaHistory.unshift(timing.delta);
                  timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);
                  timing.engineDeltaHistory.unshift(engine.timing.lastDelta);
                  timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);
                  timing.timestampElapsedHistory.unshift(timing.timestampElapsed);
                  timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);
                  timing.engineUpdatesHistory.unshift(engine.timing.lastUpdatesPerFrame);
                  timing.engineUpdatesHistory.length = Math.min(timing.engineUpdatesHistory.length, historySize);
                  timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);
                  timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);
                  timing.elapsedHistory.unshift(timing.lastElapsed);
                  timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);
                };
                var _mean = function(values) {
                  var result = 0;
                  for (var i = 0; i < values.length; i += 1) {
                    result += values[i];
                  }
                  return result / values.length || 0;
                };
                var _createCanvas = function(width, height) {
                  var canvas = document.createElement("canvas");
                  canvas.width = width;
                  canvas.height = height;
                  canvas.oncontextmenu = function() {
                    return false;
                  };
                  canvas.onselectstart = function() {
                    return false;
                  };
                  return canvas;
                };
                var _getPixelRatio = function(canvas) {
                  var context = canvas.getContext("2d"), devicePixelRatio = window.devicePixelRatio || 1, backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
                  return devicePixelRatio / backingStorePixelRatio;
                };
                var _getTexture = function(render, imagePath) {
                  var image = render.textures[imagePath];
                  if (image)
                    return image;
                  image = render.textures[imagePath] = new Image();
                  image.src = imagePath;
                  return image;
                };
                var _applyBackground = function(render, background) {
                  var cssBackground = background;
                  if (/(jpg|gif|png)$/.test(background))
                    cssBackground = "url(" + background + ")";
                  render.canvas.style.background = cssBackground;
                  render.canvas.style.backgroundSize = "contain";
                  render.currentBackground = background;
                };
              })();
            },
            /* 27 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Runner2 = {};
              module2.exports = Runner2;
              var Events = __webpack_require__(5);
              var Engine2 = __webpack_require__(17);
              var Common = __webpack_require__(0);
              (function() {
                Runner2._maxFrameDelta = 1e3 / 15;
                Runner2._frameDeltaFallback = 1e3 / 60;
                Runner2._timeBufferMargin = 1.5;
                Runner2._elapsedNextEstimate = 1;
                Runner2._smoothingLowerBound = 0.1;
                Runner2._smoothingUpperBound = 0.9;
                Runner2.create = function(options) {
                  var defaults = {
                    delta: 1e3 / 60,
                    frameDelta: null,
                    frameDeltaSmoothing: true,
                    frameDeltaSnapping: true,
                    frameDeltaHistory: [],
                    frameDeltaHistorySize: 100,
                    frameRequestId: null,
                    timeBuffer: 0,
                    timeLastTick: null,
                    maxUpdates: null,
                    maxFrameTime: 1e3 / 30,
                    lastUpdatesDeferred: 0,
                    enabled: true
                  };
                  var runner = Common.extend(defaults, options);
                  runner.fps = 0;
                  return runner;
                };
                Runner2.run = function(runner, engine) {
                  runner.timeBuffer = Runner2._frameDeltaFallback;
                  (function onFrame(time) {
                    runner.frameRequestId = Runner2._onNextFrame(runner, onFrame);
                    if (time && runner.enabled) {
                      Runner2.tick(runner, engine, time);
                    }
                  })();
                  return runner;
                };
                Runner2.tick = function(runner, engine, time) {
                  var tickStartTime = Common.now(), engineDelta = runner.delta, updateCount = 0;
                  var frameDelta = time - runner.timeLastTick;
                  if (!frameDelta || !runner.timeLastTick || frameDelta > Math.max(Runner2._maxFrameDelta, runner.maxFrameTime)) {
                    frameDelta = runner.frameDelta || Runner2._frameDeltaFallback;
                  }
                  if (runner.frameDeltaSmoothing) {
                    runner.frameDeltaHistory.push(frameDelta);
                    runner.frameDeltaHistory = runner.frameDeltaHistory.slice(-runner.frameDeltaHistorySize);
                    var deltaHistorySorted = runner.frameDeltaHistory.slice(0).sort();
                    var deltaHistoryWindow = runner.frameDeltaHistory.slice(
                      deltaHistorySorted.length * Runner2._smoothingLowerBound,
                      deltaHistorySorted.length * Runner2._smoothingUpperBound
                    );
                    var frameDeltaSmoothed = _mean(deltaHistoryWindow);
                    frameDelta = frameDeltaSmoothed || frameDelta;
                  }
                  if (runner.frameDeltaSnapping) {
                    frameDelta = 1e3 / Math.round(1e3 / frameDelta);
                  }
                  runner.frameDelta = frameDelta;
                  runner.timeLastTick = time;
                  runner.timeBuffer += runner.frameDelta;
                  runner.timeBuffer = Common.clamp(
                    runner.timeBuffer,
                    0,
                    runner.frameDelta + engineDelta * Runner2._timeBufferMargin
                  );
                  runner.lastUpdatesDeferred = 0;
                  var maxUpdates = runner.maxUpdates || Math.ceil(runner.maxFrameTime / engineDelta);
                  var event = {
                    timestamp: engine.timing.timestamp
                  };
                  Events.trigger(runner, "beforeTick", event);
                  Events.trigger(runner, "tick", event);
                  var updateStartTime = Common.now();
                  while (engineDelta > 0 && runner.timeBuffer >= engineDelta * Runner2._timeBufferMargin) {
                    Events.trigger(runner, "beforeUpdate", event);
                    Engine2.update(engine, engineDelta);
                    Events.trigger(runner, "afterUpdate", event);
                    runner.timeBuffer -= engineDelta;
                    updateCount += 1;
                    var elapsedTimeTotal = Common.now() - tickStartTime, elapsedTimeUpdates = Common.now() - updateStartTime, elapsedNextEstimate = elapsedTimeTotal + Runner2._elapsedNextEstimate * elapsedTimeUpdates / updateCount;
                    if (updateCount >= maxUpdates || elapsedNextEstimate > runner.maxFrameTime) {
                      runner.lastUpdatesDeferred = Math.round(Math.max(0, runner.timeBuffer / engineDelta - Runner2._timeBufferMargin));
                      break;
                    }
                  }
                  engine.timing.lastUpdatesPerFrame = updateCount;
                  Events.trigger(runner, "afterTick", event);
                  if (runner.frameDeltaHistory.length >= 100) {
                    if (runner.lastUpdatesDeferred && Math.round(runner.frameDelta / engineDelta) > maxUpdates) {
                      Common.warnOnce("Matter.Runner: runner reached runner.maxUpdates, see docs.");
                    } else if (runner.lastUpdatesDeferred) {
                      Common.warnOnce("Matter.Runner: runner reached runner.maxFrameTime, see docs.");
                    }
                    if (typeof runner.isFixed !== "undefined") {
                      Common.warnOnce("Matter.Runner: runner.isFixed is now redundant, see docs.");
                    }
                    if (runner.deltaMin || runner.deltaMax) {
                      Common.warnOnce("Matter.Runner: runner.deltaMin and runner.deltaMax were removed, see docs.");
                    }
                    if (runner.fps !== 0) {
                      Common.warnOnce("Matter.Runner: runner.fps was replaced by runner.delta, see docs.");
                    }
                  }
                };
                Runner2.stop = function(runner) {
                  Runner2._cancelNextFrame(runner);
                };
                Runner2._onNextFrame = function(runner, callback) {
                  if (typeof window !== "undefined" && window.requestAnimationFrame) {
                    runner.frameRequestId = window.requestAnimationFrame(callback);
                  } else {
                    throw new Error("Matter.Runner: missing required global window.requestAnimationFrame.");
                  }
                  return runner.frameRequestId;
                };
                Runner2._cancelNextFrame = function(runner) {
                  if (typeof window !== "undefined" && window.cancelAnimationFrame) {
                    window.cancelAnimationFrame(runner.frameRequestId);
                  } else {
                    throw new Error("Matter.Runner: missing required global window.cancelAnimationFrame.");
                  }
                };
                var _mean = function(values) {
                  var result = 0, valuesLength = values.length;
                  for (var i = 0; i < valuesLength; i += 1) {
                    result += values[i];
                  }
                  return result / valuesLength || 0;
                };
              })();
            },
            /* 28 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var SAT = {};
              module2.exports = SAT;
              var Collision = __webpack_require__(8);
              var Common = __webpack_require__(0);
              var deprecated = Common.deprecated;
              (function() {
                SAT.collides = function(bodyA, bodyB) {
                  return Collision.collides(bodyA, bodyB);
                };
                deprecated(SAT, "collides", "SAT.collides \u27A4 replaced by Collision.collides");
              })();
            },
            /* 29 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var Svg = {};
              module2.exports = Svg;
              var Bounds = __webpack_require__(1);
              var Common = __webpack_require__(0);
              (function() {
                Svg.pathToVertices = function(path, sampleLength) {
                  if (typeof window !== "undefined" && !("SVGPathSeg" in window)) {
                    Common.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");
                  }
                  var i, il, total2, point, segment, segments, segmentsQueue, lastSegment, lastPoint, segmentIndex, points = [], lx, ly, length = 0, x = 0, y = 0;
                  sampleLength = sampleLength || 15;
                  var addPoint = function(px, py, pathSegType) {
                    var isRelative = pathSegType % 2 === 1 && pathSegType > 1;
                    if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {
                      if (lastPoint && isRelative) {
                        lx = lastPoint.x;
                        ly = lastPoint.y;
                      } else {
                        lx = 0;
                        ly = 0;
                      }
                      var point2 = {
                        x: lx + px,
                        y: ly + py
                      };
                      if (isRelative || !lastPoint) {
                        lastPoint = point2;
                      }
                      points.push(point2);
                      x = lx + px;
                      y = ly + py;
                    }
                  };
                  var addSegmentPoint = function(segment2) {
                    var segType = segment2.pathSegTypeAsLetter.toUpperCase();
                    if (segType === "Z")
                      return;
                    switch (segType) {
                      case "M":
                      case "L":
                      case "T":
                      case "C":
                      case "S":
                      case "Q":
                        x = segment2.x;
                        y = segment2.y;
                        break;
                      case "H":
                        x = segment2.x;
                        break;
                      case "V":
                        y = segment2.y;
                        break;
                    }
                    addPoint(x, y, segment2.pathSegType);
                  };
                  Svg._svgPathToAbsolute(path);
                  total2 = path.getTotalLength();
                  segments = [];
                  for (i = 0; i < path.pathSegList.numberOfItems; i += 1)
                    segments.push(path.pathSegList.getItem(i));
                  segmentsQueue = segments.concat();
                  while (length < total2) {
                    segmentIndex = path.getPathSegAtLength(length);
                    segment = segments[segmentIndex];
                    if (segment != lastSegment) {
                      while (segmentsQueue.length && segmentsQueue[0] != segment)
                        addSegmentPoint(segmentsQueue.shift());
                      lastSegment = segment;
                    }
                    switch (segment.pathSegTypeAsLetter.toUpperCase()) {
                      case "C":
                      case "T":
                      case "S":
                      case "Q":
                      case "A":
                        point = path.getPointAtLength(length);
                        addPoint(point.x, point.y, 0);
                        break;
                    }
                    length += sampleLength;
                  }
                  for (i = 0, il = segmentsQueue.length; i < il; ++i)
                    addSegmentPoint(segmentsQueue[i]);
                  return points;
                };
                Svg._svgPathToAbsolute = function(path) {
                  var x0, y0, x1, y1, x2, y2, segs = path.pathSegList, x = 0, y = 0, len = segs.numberOfItems;
                  for (var i = 0; i < len; ++i) {
                    var seg = segs.getItem(i), segType = seg.pathSegTypeAsLetter;
                    if (/[MLHVCSQTA]/.test(segType)) {
                      if ("x" in seg) x = seg.x;
                      if ("y" in seg) y = seg.y;
                    } else {
                      if ("x1" in seg) x1 = x + seg.x1;
                      if ("x2" in seg) x2 = x + seg.x2;
                      if ("y1" in seg) y1 = y + seg.y1;
                      if ("y2" in seg) y2 = y + seg.y2;
                      if ("x" in seg) x += seg.x;
                      if ("y" in seg) y += seg.y;
                      switch (segType) {
                        case "m":
                          segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);
                          break;
                        case "l":
                          segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);
                          break;
                        case "h":
                          segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);
                          break;
                        case "v":
                          segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);
                          break;
                        case "c":
                          segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);
                          break;
                        case "s":
                          segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);
                          break;
                        case "q":
                          segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);
                          break;
                        case "t":
                          segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);
                          break;
                        case "a":
                          segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);
                          break;
                        case "z":
                        case "Z":
                          x = x0;
                          y = y0;
                          break;
                      }
                    }
                    if (segType == "M" || segType == "m") {
                      x0 = x;
                      y0 = y;
                    }
                  }
                };
              })();
            },
            /* 30 */
            /***/
            function(module2, exports2, __webpack_require__) {
              var World3 = {};
              module2.exports = World3;
              var Composite = __webpack_require__(6);
              var Common = __webpack_require__(0);
              (function() {
                World3.create = Composite.create;
                World3.add = Composite.add;
                World3.remove = Composite.remove;
                World3.clear = Composite.clear;
                World3.addComposite = Composite.addComposite;
                World3.addBody = Composite.addBody;
                World3.addConstraint = Composite.addConstraint;
              })();
            }
            /******/
          ])
        );
      });
    }
  });

  // node_modules/vara/src/vara.min.js
  var require_vara_min = __commonJS({
    "node_modules/vara/src/vara.min.js"(exports, module) {
      "use strict";
      function _typeof(a) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a2) {
          return typeof a2;
        } : function(a2) {
          return a2 && "function" == typeof Symbol && a2.constructor === Symbol && a2 !== Symbol.prototype ? "symbol" : typeof a2;
        }, _typeof(a);
      }
      var Vara2 = function(a, b, c, d) {
        var e = this;
        this.elementName = a, this.textsInit = [], "string" == typeof c ? this.textsInit.push({ text: c }) : "object" == _typeof(c) && (this.textsInit = c), this.texts = this.textsInit, this.properties = d || {}, this.properties.textAlign = this.properties.textAlign || "left", this.letterSpacing = 0, this.element = document.querySelector(this.elementName), this.fontSource = b, this.characters = {}, this.drawnCharacters = {}, this.totalPathLength = 0, this.fontSize = 24, this.frameRate = 1e3 / 30, this.prevDuration = 0, this.completed = false, this.ready = function(a2) {
          e.readyF = a2;
        }, this.animationEnd = function(a2) {
          e.animationEndF = a2;
        }, this.svg = this.createNode("svg", { width: "100%" }), this.element.appendChild(this.svg), this.font = document.createElement("object"), this.getSVGData();
      };
      Vara2.prototype.createNode = function(a, b) {
        for (var c in a = document.createElementNS("http://www.w3.org/2000/svg", a), b) a.setAttributeNS(null, c.replace(/[A-Z]/g, function(a2) {
          return "-" + a2.toLowerCase();
        }), b[c]);
        return a;
      }, Vara2.prototype.getSVGData = function() {
        var a = this, b = new XMLHttpRequest();
        b.open("GET", this.fontSource, true), b.onreadystatechange = function() {
          4 == b.readyState && 200 == b.status && (a.contents = JSON.parse(b.responseText), a.characters = JSON.parse(b.responseText).c, a.preCreate(), a.createText());
        }, b.send(null);
      }, Vara2.prototype.preCreate = function() {
        (function() {
          return "function" != typeof NodeList.prototype.forEach && void (NodeList.prototype.forEach = Array.prototype.forEach);
        })(), this.questionMark = this.characters[63] == null ? { paths: [{ w: 8.643798828125, h: 14.231731414794922, my: 22.666500004827977, mx: 0, pw: 28.2464542388916, d: "m 0,0 c -2,-6.01,5,-8.64,8,-3.98,2,4.09,-7,8.57,-7,11.85" }, { w: 1.103759765625, h: 1.549820899963379, my: 8.881500004827977, mx: 1, pw: 4.466640472412109, d: "m 0,0 a 0.7592,0.7357,0,0,1,0,0.735,0.7592,0.7357,0,0,1,-1,-0.735,0.7592,0.7357,0,0,1,1,-0.738,0.7592,0.7357,0,0,1,0,0.738 z" }], w: 8.643798828125 } : this.characters[63], this.space = { paths: [{ d: "M0,0 l" + this.contents.p.space + " 0", mx: 0, my: 0, w: this.contents.p.space, h: 0 }], w: this.contents.p.space };
        for (var a = this.analyseWidth(), b = 0; b < this.texts.length; b++) {
          for (var c = [], d = "string" == typeof this.texts[b] ? { text: this.texts[b] } : this.texts[b], e = d.text, f = 0; f < e.length; f++) {
            var g = e[f];
            if (0 < a.breakPoints[b][f].length) for (var h, i, l = a.breakPoints[b][f].length, m = 0; m <= l; m++) {
              i = a.breakPoints[b][f][m], a.breakPoints[b][f][l - 1] != g.length && a.breakPoints[b][f].push(g.length);
              var n = null == a.breakPoints[b][f][m - 1] ? 0 : a.breakPoints[b][f][m - 1];
              h = g.slice(n, i).replace(/^\s+/g, ""), c.push(h);
            }
            else c.push(e[f]);
          }
          this.texts[b].text = c;
        }
      }, Vara2.prototype.createText = function() {
        var a, b = this, c = this.svg, d = 0, e = 0, f = this.properties.lineHeight == null ? this.contents.p.lh : this.properties.lineHeight;
        this.properties.autoAnimation = !(this.properties.autoAnimation != null) || this.properties.autoAnimation;
        for (var g = 0, h = true, k = 0; k < this.texts.length; k++) {
          var l = [], m = 0;
          a = this.texts[k].fontSize;
          var n = this.texts[k].strokeWidth, o = this.texts[k].color == null ? this.properties.color == null ? "black" : this.properties.color : this.texts[k].color, p = this.texts[k].duration == null ? this.properties.duration == null ? 2e3 : this.properties.duration : this.texts[k].duration;
          this.texts[k].duration = p;
          var q = this.texts[k].id == null ? k : this.texts[k].id;
          this.texts[k].delay = this.texts[k].delay == null ? 0 : this.texts[k].delay, this.prevDuration += this.texts[k].delay, this.texts[k].fromCurrentPosition == null && (this.texts[k].fromCurrentPosition = { x: true, y: true }), h = !(null != this.texts[k].y) || !!(null == this.texts[k].fromCurrentPosition.y || this.texts[k].fromCurrentPosition.y);
          var r = o, s = this.texts[k].textAlign == null ? this.properties.textAlign : this.texts[k].textAlign;
          f = this.texts[k].lineHeight == null ? f : this.texts[k].lineHeight / a;
          var t = this.createNode("g", { class: "outer", transform: "translate(0,0)", "data-text": this.texts[k].text });
          c.appendChild(t), e = g;
          for (var u = 0, v = 0; v < this.texts[k].text.length; v++) {
            var w = 0, y = this.createNode("g");
            t.appendChild(y);
            for (var z = 0, A = 0, B = 0; B < this.texts[k].text[v].length; B++) {
              var C = this.texts[k].text[v][B], D = this.createNode("g");
              y.appendChild(D);
              var d = 0, E = this.characters[C.charCodeAt(0)] != null || " " == C ? " " == C ? this.space.paths : this.characters[C.charCodeAt(0)].paths : this.questionMark.paths;
              o = " " == C ? "transparent" : r, E.forEach(function(a2, c2) {
                var d2 = b.createNode("path", { d: a2.d, "stroke-width": n, stroke: o, fill: "none", "stroke-linecap": b.contents.p.slc, "stroke-linejoin": b.contents.p.slj });
                D.appendChild(d2), d2.setAttribute("transform", "translate(" + a2.mx + "," + -a2.my + ")"), z = z > a2.my - d2.getBBox().y ? z : a2.my - d2.getBBox().y, 0 == c2 && (A = z), d2.style.opacity = 0, d2.style.strokeDasharray = d2.getTotalLength() + " " + (d2.getTotalLength() + 2), d2.style.strokeDashoffset = d2.getTotalLength() + 1;
              }), l.push(D);
              var d = D.getBBox().x * a, F = this.texts[k].letterSpacing;
              "object" === _typeof(F) && (F = F[C] === void 0 ? F.global === void 0 ? 0 : F.global : F[C]), D.getBBox().width < this.texts[k].minWidth && (d -= (this.texts[k].minWidth - D.getBBox().width) / 2), D.setAttribute("transform", "translate(" + (w - d + F) + ",0)  scale(" + a + ")"), w += D.getBBox().width * a + F, D.getBBox().width < this.texts[k].minWidth && (w += this.texts[k].minWidth - D.getBBox().width);
            }
            var G = y.getBBox();
            y.setAttribute("transform", "translate(" + n * a + "," + (-G.y + n * a) + ")");
            var H = 0;
            "center" == s ? H = (this.svg.getBoundingClientRect().width - G.width) / 2 : "right" == s && (H = this.svg.getBoundingClientRect().width - G.width), this.setPosition(y, { x: H, y: m + this.contents.p.tf * a - z }), m += f * a, u += this.contents.p.tf * a + (this.contents.p.tf * a - A);
          }
          (this.texts[k].y == null || true == this.texts[k].fromCurrentPosition.y) && this.setPosition(t, { y: e }), this.texts[k].fromCurrentPosition != null && this.texts[k].fromCurrentPosition.y && (g += this.texts[k].y == null ? 0 : this.texts[k].y), this.setPosition(t, { x: this.texts[k].x, y: this.texts[k].y }, this.texts[k].fromCurrentPosition), h && (g += u), this.drawnCharacters[q] != null && (q = k), this.drawnCharacters[q] = { characters: l, queued: this.texts[k].queued, container: t, index: k }, (this.texts[k].autoAnimation == null || this.texts[k].autoAnimation) && this.properties.autoAnimation && (b.draw(q, p), (this.texts[k].queued == null || this.texts[k].queued) && (b.prevDuration += p));
        }
        this.completed = true, this.svg.setAttribute("height", this.svg.getBBox().height + this.svg.getBBox().y + 10), this.readyF && this.readyF();
      }, Vara2.prototype.playAll = function() {
        this.prevDuration = 0;
        for (var a = 0; a < this.texts.length; a++) {
          var b = this.texts[a].duration, c = this.texts[a].id == null ? a : this.texts[a].id;
          this.prevDuration += this.texts[a].delay, this.draw(c, b), (this.texts[a].queued == null || this.texts[a].queued) && (this.prevDuration += b);
        }
      }, Vara2.prototype.draw = function(a, b) {
        var c = this;
        if (null == this.drawnCharacters[a]) return console.warn("ID:`" + a + "` not found. Animation skipped"), void console.trace();
        var d = b === void 0 ? this.texts[this.drawnCharacters[a].index].duration : b, e = this.getSectionPathLength(a), f = 0, g = !(this.drawnCharacters[a].queued != null) || this.drawnCharacters[a].queued, h = g ? this.prevDuration : 1;
        setTimeout(function() {
          c.drawnCharacters[a].characters.forEach(function(a2) {
            a2.querySelectorAll("path").forEach(function(a3) {
              var b2 = parseFloat(a3.style.strokeDashoffset) / e * d;
              a3.style.opacity = 1, c.animate(a3, b2, f, 0), f += b2;
            });
          }), setTimeout(function() {
            c.animationEndF && c.animationEndF(a, c.drawnCharacters[a]);
          }, f);
        }, h);
      }, Vara2.prototype.get = function(a) {
        this;
        return null == this.drawnCharacters[a] ? (console.warn("ID:`" + a + "` not found."), console.trace(), false) : this.drawnCharacters[a];
      }, Vara2.prototype.animate = function(a, b, c, d) {
        var e = this;
        d = +d || 0, setTimeout(function() {
          var c2 = (/* @__PURE__ */ new Date()).getTime(), f = parseFloat(a.style.strokeDashoffset), g = setInterval(function() {
            var e2 = Math.min(1, ((/* @__PURE__ */ new Date()).getTime() - c2) / b);
            a.style.strokeDashoffset = f + e2 * (d - f), 1 == e2 && clearInterval(g);
          }, e.frameRate);
        }, c);
      }, Vara2.prototype.getSectionPathLength = function(a) {
        var b = this;
        return this.totalPathLength = 0, this.drawnCharacters[a].characters.forEach(function(a2) {
          a2.querySelectorAll("path").forEach(function(a3) {
            b.totalPathLength += a3.getTotalLength();
          });
        }), this.totalPathLength;
      }, Vara2.prototype.analyseWidth = function() {
        var a = String.fromCharCode, b = Math.round, c = 0, d = this.svg.getBoundingClientRect().width, e = [], f = null == this.characters[97] ? Object.keys(this.characters)[b(Math.random() * Object.keys(this.characters).length - 1)] : "97", g = document.createElement("span");
        this.element.appendChild(g), g.style.opacity = 0, g.style.position = "absolute", g.innerHTML = a(f);
        var h = document.createElement("span");
        this.element.appendChild(h), h.style.opacity = 0, h.style.position = "absolute", h.innerHTML = " . ";
        for (var k = 0; k < this.texts.length; k++) {
          var l, m = this.texts[k];
          l = "string" == typeof m.text ? [m.text] : m.text, this.texts[k].text = l, this.texts[k].letterSpacing = null == this.texts[k].letterSpacing ? null == this.properties.letterSpacing ? 0 : this.properties.letterSpacing : this.texts[k].letterSpacing, this.texts[k].strokeWidth = null == this.texts[k].strokeWidth ? null == this.properties.strokeWidth ? this.contents.p.bsw : this.properties.strokeWidth : this.texts[k].strokeWidth;
          var n = null == this.texts[k].breakWord ? null != this.properties.breakWord && this.properties.breakWord : this.texts[k].breakWord, o = null == m.fontSize ? null == this.properties.fontSize ? this.fontSize : this.properties.fontSize : m.fontSize;
          g.style.fontSize = o + "px", h.style.fontSize = o + "px";
          var p = g.getBoundingClientRect().width / this.characters[f].w;
          this.texts[k].minWidth = h.getBoundingClientRect().width;
          var q, r = null == this.texts[k].width ? d : this.texts[k].width, s = [], t = null == this.texts[k].x ? 0 : this.texts[k].x;
          this.trueFontSize = o, this.texts[k].fontSize = p;
          for (var u = this.texts[k].letterSpacing, v = 0; v < l.length; v++) {
            for (var w = t, y = [], z = l[v], A = 0, B = 0; B < z.length; B++) if ("object" === _typeof(u) && "object" === _typeof(u) && (u = void 0 === u[z] ? void 0 === u.global ? 0 : u.global : u[z]), null == this.characters[z[B].charCodeAt(0)] ? " " == z[B] ? (q = this.space.w * p, A = w) : q = this.questionMark.w * p + u : (q = this.characters[z[B].charCodeAt(0)].w * p, q < this.texts[k].minWidth && (q += p * (this.texts[k].minWidth - this.characters[z[B].charCodeAt(0)].w) / 2), q += u), q += this.texts[k].strokeWidth * p, w + q >= r) {
              0 == A && (n = true);
              var C = B;
              " " == z[B] || n || (C = z.slice(0, C + 1).search(/\S+$/)), y.push(C), w = t + w - A;
            } else c += q, w += q;
            s.push(y);
          }
          e.push(s);
        }
        return g.parentNode.removeChild(g), h.parentNode.removeChild(h), { width: c, breakPoints: e };
      }, Vara2.prototype.setPosition = function(a, b, c) {
        var c = c == null ? { x: false, y: false } : c;
        c.x = c.x != null && c.x, c.y = c.y != null && c.y;
        var d = a.transform.baseVal.consolidate().matrix, e = d.e, f = d.f;
        b.x != null && (c.x ? e += b.x : e = b.x), b.y != null && (c.y ? f += b.y : f = b.y - a.getBBox().y);
        var g = this.svg.createSVGTransform();
        g.setTranslate(e, f), a.transform.baseVal.replaceItem(g, 0);
      }, "undefined" == typeof module ? window.Vara = Vara2 : module.exports = Vara2;
    }
  });

  // src/index.ts
  var import_matter_js2 = __toESM(require_matter());

  // src/render.ts
  function drawCircle(ctx, circleCenter, circleRadius) {
    ctx.beginPath();
    ctx.arc(circleCenter.x, circleCenter.y, circleRadius, 0, 2 * Math.PI);
    ctx.strokeStyle = "#ccc";
    ctx.lineWidth = 2;
    ctx.stroke();
  }
  function drawBeads(ctx, beads) {
    for (let i = 0; i < beads.length; i++) {
      const bead = beads[i];
      const body = bead.body;
      if (!body.render.visible) continue;
      for (let k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {
        const part = body.parts[k];
        if (!part.render.visible) continue;
        ctx.save();
        ctx.translate(part.position.x, part.position.y);
        ctx.rotate(part.angle);
        if (part.circleRadius) {
          ctx.beginPath();
          ctx.arc(0, 0, part.circleRadius, 0, 2 * Math.PI);
          ctx.fillStyle = part.render.fillStyle ?? "#ffffff";
          ctx.fill();
          if (bead.letter !== "") {
            ctx.fillStyle = "black";
            ctx.font = `${part.circleRadius}px Arial`;
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillText(bead.letter, 0, 0);
          }
        } else {
          ctx.fillStyle = "red";
          ctx.fillRect(-20, -10, 40, 20);
        }
        ctx.restore();
      }
    }
  }

  // src/beads.ts
  var import_matter_js = __toESM(require_matter());

  // src/albums.json
  var albums_default = [
    {
      title: "Taylor Swift",
      songs: [
        {
          title: "Tim McGraw",
          lines: [
            "He said the way my blue eyes shined",
            "Put those Georgia stars to shame that night",
            `I said, "That's a lie"`,
            "Just a boy in a Chevy truck",
            "That had a tendency of gettin' stuck",
            "On backroads at night",
            "And I was right there beside him all summer long",
            "And then the time we woke up to find that summer gone",
            "But when you think Tim-McGraw",
            "I hope you think my favorite song",
            "The one we danced to all night long",
            "The moon like a spotlight on the lake",
            "When you think happiness",
            "I hope you think that little black dress",
            "Think of my head on your chest",
            "And my old faded blue jeans",
            "When you think Tim-McGraw",
            "I hope you think of me",
            "September saw a month of tears",
            "And thankin' God that you weren't here",
            "To see me like that",
            "But in a box beneath my bed",
            "Is a letter that you never read",
            "From three summers back",
            "It's hard not to find it all a little bittersweet",
            "And lookin' back on all of that, it's nice to believe",
            "When you think Tim-McGraw",
            "I hope you think my favorite song",
            "The one we danced to all night long",
            "The moon like a spotlight on the lake",
            "When you think happiness",
            "I hope you think that little black dress",
            "Think of my head on your chest",
            "And my old faded blue jeans",
            "When you think Tim-McGraw",
            "I hope you think of me",
            "And I'm back for the first time since then",
            "I'm standin' on your street",
            "And there's a letter left on your doorstep",
            "And the first thing that you'll read",
            'Is, "When you think Tim-McGraw',
            "I hope you think my favorite song",
            "Someday you'll turn your radio on",
            'I hope it takes you back to that place"',
            "When you think happiness",
            "I hope you think that little black dress",
            "Think of my head on your chest",
            "And my old faded blue jeans",
            "When you think Tim-McGraw",
            "I hope you think of me",
            "Oh, think of me, mmm",
            "He said the way my blue eyes shined",
            "Put those Georgia stars to shame that night",
            `I said, "That's a lie"`
          ]
        },
        {
          title: "Picture To Burn",
          lines: [
            "State the obvious, I didn't get my perfect fantasy",
            "I realize you love yourself more than you could ever love me",
            "So go and tell your friends that I'm obsessive and crazy",
            "That's fine, you won't mind if I say",
            "By the way",
            "I hate that stupid old pickup truck you never let me drive",
            "You're a redneck heartbreak who's really bad at lyin'",
            "So watch me strike a match on all my wasted time",
            "As far as I'm concerned, you're just another picture to burn",
            "There's no time for tears, I'm just sittin' here planning my revenge",
            "There's nothing stoppin' me from goin' out with all of your best friends",
            "And if you come around sayin' sorry to me",
            "My daddy's gonna show ya how sorry you'll be",
            "'Cause I hate that stupid old pickup truck you never let me drive",
            "You're a redneck heartbreak who's really bad at lyin'",
            "So watch me strike a match on all my wasted time",
            "As far as I'm concerned, you're just another picture to burn",
            "And if you're missing me, you'd better keep it to yourself",
            "'Cause coming back around here would be bad for your health",
            "'Cause I hate that stupid old pickup truck you never let me drive",
            "You're a redneck heartbreak who's really bad at lyin'",
            "So watch me strike a match on all my wasted time",
            "In case you haven't heard",
            "I really, really hate that stupid old pickup truck you never let me drive",
            "You're a redneck heartbreak who's really bad at lyin'",
            "So watch me strike a match on all my wasted time",
            "As far as I'm concerned, you're just another picture to burn",
            "Burn, burn, burn, baby, burn",
            "You're just another picture to burn",
            "Baby, burn"
          ]
        },
        {
          title: "Teardrops On My Guitar",
          lines: [
            "Drew looks at me",
            "I fake a smile so he won't see",
            "That I want and I'm needing",
            "Everything that we should be",
            "I'll bet she's beautiful, that girl he talks about",
            "And she's got everything that I have to live without",
            "Drew talks to me",
            "I laugh 'cause it's just so funny",
            "That I can't even see",
            "Anyone when he's with me",
            "He says he's so in love, he's finally got it right",
            "I wonder if he knows he's all I think about at night",
            "He's the reason for the teardrops on my guitar",
            "The only thing that keeps me wishin' on a wishing star",
            "He's the song in the car I keep singing, don't know why I do",
            "Drew walks by me",
            "Can he tell that I can't breathe?",
            "And there he goes, so perfectly",
            "The kind of flawless I wish I could be",
            "She'd better hold him tight, give him all her love",
            "Look in those beautiful eyes and know she's lucky 'cause",
            "He's the reason for the teardrops on my guitar",
            "The only thing that keeps me wishin' on a wishing star",
            "He's the song in the car I keep singing, don't know why I do",
            "So I'll drive home alone as I turn off the light",
            "I'll put his picture down and maybe get some sleep tonight",
            "'Cause he's the reason for the teardrops on my guitar",
            "The only one who's got enough of me to break my heart",
            "He's the song in the car I keep singing, don't know why I do",
            "He's the time taken up, but there's never enough",
            "And he's all that I need to fall into",
            "Drew looks at me",
            "I fake a smile, so he won't see"
          ]
        },
        {
          title: "A Place In This World",
          lines: [
            "I don't know what I want, so don't ask me",
            "'Cause I'm still trying to figure it out",
            "Don't know what's down this road, I'm just walking",
            "Trying to see through the rain coming down",
            "Even though I'm not the only one",
            "Who feels the way I do",
            "I'm alone, on my own, and that's all I know",
            "I'll be strong, I'll be wrong, oh, but life goes on",
            "Oh, I'm just a girl trying to find a place in this world",
            "Got the radio on, my old blue jeans",
            "And I'm wearing my heart on my sleeve",
            "Feeling lucky today, got the sunshine",
            "Could you tell me what more do I need?",
            "And tomorrow's just a mystery, oh, yeah",
            "But that's okay",
            "I'm alone, on my own, and that's all I know",
            "I'll be strong, I'll be wrong, oh, but life goes on",
            "Oh, I'm just a girl trying to find a place in this world",
            "Maybe I'm just a girl on a mission",
            "But I'm ready to fly",
            "I'm alone, on my own, and that's all I know",
            "I'll be strong, I'll be wrong, oh, but life goes on",
            "Oh, I'm alone, on my own, and that's all I know",
            "Oh, I'm just a girl trying to find a place in this world",
            "Oh, I'm just a girl",
            "Oh, I'm just a girl, oh, oh",
            "Oh, I'm just a girl"
          ]
        },
        {
          title: "Cold As You",
          lines: [
            "You have a way of coming easily to me",
            "And when you take, you take the very best of me",
            "So I start a fight 'cause I need to feel something",
            "And you do what you want 'cause I'm not what you wanted",
            "Oh, what a shame, what a rainy ending",
            "Given to a perfect day",
            "Just walk away, ain't no use defending",
            "Words that you will never say",
            "And now that I'm sitting here thinking it through",
            "I've never been anywhere cold as you",
            "You put up walls and paint them all a shade of gray",
            "And I stood there loving you and wished them all away",
            "And you come away with a great little story",
            "Of a mess of a dreamer with the nerve to adore you",
            "Oh, what a shame, what a rainy ending",
            "Given to a perfect day",
            "So just walk away, ain't no use defending",
            "Words that you will never say",
            "And now that I'm sitting here thinking it through",
            "I've never been anywhere cold as you",
            "You never did give a damn thing, honey",
            "But I cried, cried for you",
            "And I know you wouldn't have told nobody",
            "If I died, died for you, died for you",
            "Oh, what a shame, what a rainy ending",
            "Given to a perfect day, oh",
            "Every smile you fake is so condescending",
            "Counting all the scars you made",
            "And now that I'm sitting here thinking it through",
            "I've never been anywhere cold as you",
            "Ooh-oh"
          ]
        },
        {
          title: "The Outside",
          lines: [
            "I didn't know what I would find",
            "When I went looking for a reason, I know",
            "I didn't read between the lines",
            "And, baby, I've got nowhere to go",
            "I tried to take the road less traveled by",
            "But nothing seems to work the first few times",
            "Am I right?",
            "So how can I ever try to be better?",
            "Nobody ever lets me in",
            "I can still see you, this ain't the best view",
            "On the outside looking in",
            "I've been a lot of lonely places",
            "I've never been on the outside",
            "You saw me there, but never knew",
            "That I would give it all up to be",
            "A part of this, a part of you",
            "And now, it's all too late, so you see",
            "You could've helped if you had wanted to",
            "But no one notices until it's too late to do anything",
            "How can I ever try to be better?",
            "Nobody ever lets me in",
            "I can still see you, this ain't the best view",
            "On the outside looking in",
            "I've been a lot of lonely places",
            "I've never been on the outside",
            "Oh, yeah",
            "How can I ever try to be better?",
            "Nobody ever lets me in",
            "And I can still see you, this ain't the best view",
            "On the outside looking in",
            "I've been a lot of lonely places",
            "I've never been on the outside",
            "Oh-oh",
            "Oh, oh-oh",
            "Oh-oh",
            "Oh-oh"
          ]
        },
        {
          title: "Tied Together With A Smile",
          lines: [
            "Seems the only one who doesn't see your beauty",
            "Is the face in the mirror looking back at you",
            "You walk around here thinking you're not pretty",
            "But that's not true",
            "'Cause I know you",
            "Hold on, baby, you're losing it",
            "The water's high, you're jumping into it and letting go",
            "And no one knows",
            "That you cry, but you don't tell anyone",
            "That you might not be the golden one",
            "And you're tied together with a smile",
            "But you're coming undone, oh",
            "I guess it's true that love was all you wanted",
            "'Cause you're giving it away like it's extra change",
            "Hoping it will end up in his pocket (Pocket)",
            "But he leaves you out like a penny in the rain",
            "Oh, 'cause it's not his price to pay",
            "It's not his price to pay",
            "Hold on, baby, you're losing it",
            "The water's high, you're jumping into it and letting go",
            "And no one knows",
            "That you cry, but you don't tell anyone",
            "That you might not be the golden one",
            "And you're tied together with a smile",
            "But you're coming undone, oh",
            "Oh, oh",
            "Hold on, baby, you're losing it",
            "The water's high, you're jumping into it and letting go",
            "And no one knows",
            "That you cry but you don't tell anyone",
            "That you might not be the golden one",
            "And you're tied together with a smile",
            "But you're coming undone, oh",
            "You're tied together with a smile",
            "But you're coming undone, oh, oh-oh",
            "Goodbye, baby",
            "With a smile, baby, baby",
            "Oh"
          ]
        },
        {
          title: "Stay Beautiful",
          lines: [
            "Cory's eyes are like a jungle",
            "He smiles, it's like the radio",
            "He whispers songs into my window",
            "In words that nobody knows",
            "There's pretty girls on every corner",
            "They watch him as he's walking home",
            'Saying, "Does he know?"',
            "Will you ever know?",
            "You're beautiful, every little piece, love",
            "Don't you know you're really gonna be someone?",
            "Ask anyone",
            "And when you find everything you looked for",
            "I hope your life leads you back to my door",
            "Oh, but if it don't",
            "Stay beautiful",
            "Cory finds another way to be",
            "The highlight of my day",
            "I'm taking pictures in my mind",
            "So I can save 'em for a rainy day",
            "It's hard to make a conversation",
            "When he's taking my breath away",
            'I should say, "Hey, by the way"',
            "You're beautiful, every little piece, love",
            "Don't you know you're really gonna be someone?",
            "Ask anyone",
            "And when you find everything you looked for",
            "I hope your life leads you back to my door",
            "Oh, but if it don't",
            "Stay beautiful",
            "If you and I are a story",
            "That never gets told",
            "If what you are is a daydream",
            "I'll never get to hold, at least you'll know",
            "You're beautiful, every little piece, love",
            "Don't you know you're really gonna be someone?",
            "Ask anyone",
            "And when you find everything you looked for",
            "I hope your life leads you back to my front door",
            "Oh, but if it don't",
            "Will you stay beautiful, beautiful, beautiful?",
            "Beautiful, beautiful, beautiful",
            "La-la-la",
            "Oh-oh-oh",
            "Oh-oh-oh-oh",
            "Oh, but if it don't",
            "Stay beautiful, stay beautiful",
            "Na-na-na, na-na"
          ]
        },
        {
          title: "Should've Said No",
          lines: [
            "It's strange to think the songs we used to sing",
            "The smiles, the flowers, everything is gone",
            "Yesterday, I found out about you",
            "Even now, just lookin' at you feels wrong",
            "You say that you'd take it all back",
            "Given one chance",
            "It was a moment of weakness",
            "And you said yes",
            "You should've said no, you should've gone home",
            "You should've thought twice 'fore you let it all go",
            "You should've known that word",
            "'Bout what you did with her'd get back to me (Get back to me)",
            "And I should've been there in the back of your mind",
            "I shouldn't be asking myself why",
            "You shouldn't be begging for forgiveness at my feet",
            "You should've said no",
            "Baby, and you might still have me",
            "You can see that I've been cryin'",
            "And baby, you know all the right things to say",
            "But do you honestly expect me to believe",
            "We could ever be the same?",
            "You say that the past is the past",
            "You need one chance",
            "It was a moment of weakness",
            "And you said yes",
            "You should've said no, you should've gone home",
            "You should've thought twice 'fore you let it all go",
            "You should've known that word",
            "'Bout what you did with her'd get back to me (Get back to me)",
            "And I should've been there in the back of your mind",
            "I shouldn't be asking myself why",
            "You shouldn't be begging for forgiveness at my feet",
            "You should've said no",
            "Baby, and you might still have me",
            "Oh, oh",
            "I can't resist",
            "Before you go, tell me this",
            "Was it worth it?",
            "Was she worth this?",
            "No, no",
            "No, no, no, no",
            "You should've said no, you should've gone home",
            "You should've thought twice 'fore you let it all go",
            "You should've known that word",
            "'Bout what you did with her'd get back to me (Get back to me)",
            "And I should've been there, in the back of your mind",
            "I shouldn't be asking myself why",
            "You shouldn't be begging for forgiveness at my feet",
            "You should've said no",
            "Baby, and you might still have me"
          ]
        },
        {
          title: "Mary's Song (Oh My My My)",
          lines: [
            "She said I was seven and you were nine",
            "I looked at you like the stars that shined",
            "In the sky, the pretty lights",
            "And our daddies used to joke about the two of us",
            "Growing up and falling in love",
            "And our mamas smiled and rolled their eyes",
            'And said, "Oh, my, my, my"',
            "Take me back to the house in the backyard tree",
            "Said you'd beat me up, you were bigger than me",
            "You never did, you never did",
            "Take me back when our world was one block wide",
            "I dared you to kiss me and ran when you tried",
            "Just two kids, you and I",
            "Oh, my, my, my, my",
            "Well, I was sixteen when suddenly",
            "I wasn't that little girl you used to see",
            "But your eyes still shined like pretty lights",
            "And our daddies used to joke about the two of us",
            "They never believed we'd really fall in love",
            "And our mamas smiled and rolled their eyes",
            'And said, "Oh, my, my, my"',
            "Take me back to the creek beds we turned up",
            "2AM riding in your truck",
            "And all I need is you next to me",
            "Take me back to the time we had our very first fight",
            "The slamming of doors 'stead of kissing goodnight",
            "You stayed outside 'til the morning light",
            "Oh, my, my, my, my",
            "A few years had gone and come around",
            "We were sitting at our favorite spot in town",
            "And you looked at me, got down on one knee",
            "Take me back to the time when we walked down the aisle",
            "Our whole town came and our mamas cried",
            'You said, "I do," and I did, too',
            "Take me home where we met so many years before",
            "We'll rock our babies on that very front porch",
            "After all this time, you and I",
            "And I'll be eighty-seven, you'll be eighty-nine",
            "I'll still look at you like the stars that shine",
            "In the sky, oh, my, my, my"
          ]
        },
        {
          title: "Our Song",
          lines: [
            "I was ridin' shotgun with my hair undone",
            "In the front seat of his car",
            "He's got a one-hand feel on the steering wheel",
            "The other on my heart",
            "I look around, turn the radio down",
            'He says, "Baby, is something wrong?"',
            `I say, "Nothin', I was just thinkin'`,
            `How we don't have a song"`,
            "And he says",
            "Our song is a slamming screen door",
            "Sneakin' out late, tapping on your window",
            "When we're on the phone and you talk real slow",
            "'Cause it's late and your mama don't know",
            "Our song is the way you laugh",
            `The first date, "Man, I didn't kiss her and I should have"`,
            `And when I got home, 'fore I said, "Amen"`,
            "Askin' God if he could play it again",
            "I was walking up the front porch steps",
            "After everything that day",
            "Had gone all wrong and been trampled on",
            "And lost and thrown away",
            "Got to the hallway, well on my way to my lovin' bed",
            "I almost didn't notice all the roses",
            "And the note that said",
            "Our song is a slamming screen door",
            "Sneakin' out late, tapping on your window",
            "When we're on the phone and you talk real slow",
            "'Cause it's late and your mama don't know",
            "Our song is the way you laugh",
            `The first date, "Man, I didn't kiss her and I should have"`,
            `And when I got home, 'fore I said, "Amen"`,
            "Askin' God if he could play it again",
            "Da-da-da-da",
            "I've heard every album, listened to the radio",
            "Waited for somethin' to come along",
            "That was as good as our song",
            "'Cause our song is a slamming screen door",
            "Sneakin' out late, tapping on his window",
            "When we're on the phone and he talks real slow",
            "'Cause it's late and his mama don't know",
            "Our song is the way he laughs",
            `The first date, "Man, I didn't kiss him and I should have"`,
            `And when I got home, 'fore I said, "Amen"`,
            "Askin' God if he could play it again",
            "Play it again, oh yeah",
            "Oh-oh, yeah",
            "I was ridin' shotgun with my hair undone",
            "In the front seat of his car",
            "I grabbed a pen and an old napkin",
            "And I wrote down our song"
          ]
        },
        {
          title: "I'm Only Me When I'm With You",
          lines: [
            "Friday night beneath the stars",
            "In a field behind your yard",
            "You and I are painting pictures in the sky",
            "And sometimes, we don't say a thing",
            "Just listen to the crickets sing",
            "Everything I need is right here by my side",
            "And I know everything about you",
            "I don't wanna live without you",
            "I'm only up when you're not down",
            "Don't wanna fly if you're still on the ground",
            "It's like no matter what I do",
            "Well, you drive me crazy half the time",
            "The other half, I'm only tryin' to",
            "Let you know that what I feel is true",
            "And I'm only me when I'm with you",
            "Just a small-town boy and girl",
            "Livin' in a crazy world",
            "Tryna figure out what is and isn't true",
            "And I don't try to hide my tears",
            "My secrets or my deepest fears",
            "Through it all, nobody gets me like you do",
            "And you know everything about me",
            "You say that you can't live without me",
            "I'm only up when you're not down",
            "Don't wanna fly if you're still on the ground",
            "It's like no matter what I do",
            "Well, you drive me crazy half the time",
            "The other half, I'm only tryin' to",
            "Let you know that what I feel is true",
            "And I'm only me when I'm with you",
            "When I'm with anybody else",
            "It's so hard to be myself",
            "And only you can tell",
            "That I'm only up when you're not down",
            "Don't wanna fly if you're still on the ground",
            "It's like no matter what I do",
            "Well, you drive me crazy half the time",
            "The other half, I'm only tryin' to",
            "Let you know that what I feel is true",
            "And I'm only me",
            "Who I wanna be",
            "Well, I'm only me when I'm with you",
            "With you",
            "Uh-huh-huh, yeah"
          ]
        },
        {
          title: "Invisible",
          lines: [
            "She can't see the way your eyes",
            "Light up when you smile",
            "She'll never notice how you stop and stare",
            "Whenever she walks by",
            "And you can't see me wanting you the way you want her",
            "But you are everything to me",
            "And I just wanna show you",
            "She don't even know you",
            "She's never gonna love you like I want to",
            "And you just see right through me",
            "But if you only knew me",
            "We could be a beautiful miracle, unbelievable",
            "Instead of just invisible",
            "Oh, yeah, oh",
            "There's a fire inside of you",
            "That can't help but shine through",
            "She's never gonna see the light",
            "No matter what you do",
            "And all I think about is how to make you think of me",
            "And everything that we could be",
            "And I just wanna show you",
            "She don't even know you",
            "She's never gonna love you like I want to",
            "And you just see right through me",
            "But if you only knew me",
            "We could be a beautiful miracle, unbelievable",
            "Instead of just invisible",
            "Like shadows in a faded light",
            "Oh, we're invisible",
            "I just wanna open your eyes",
            "And make you realize",
            "I just wanna show you",
            "She don't even know you",
            "Baby, let me love you, let me want you",
            "You just see right through me",
            "But if you only knew me",
            "We could be a beautiful miracle, unbelievable",
            "Instead of just invisible",
            "Oh, yeah",
            "She can't see the way your eyes",
            "Light up when you smile"
          ]
        },
        {
          title: "A Perfectly Good Heart",
          lines: [
            "Why would you wanna break",
            "A perfectly good heart?",
            "Why would you wanna take",
            "Our love and tear it all apart now?",
            "Why would you wanna make",
            "The very first scar?",
            "Why would you wanna break",
            "A perfectly good heart?",
            "Maybe I should've seen the signs",
            "Should've read the writing on the wall",
            "And realized by the distance in your eyes",
            "That I would be the one to fall",
            "No matter what you say",
            "I still can't believe that you would walk away",
            "It don't make sense to me, but",
            "Why would you wanna break",
            "A perfectly good heart?",
            "Why would you wanna take",
            "Our love and tear it all apart now?",
            "Why would you wanna make",
            "The very first scar?",
            "Why would you wanna break",
            "A perfectly good heart?",
            "It's not unbroken anymore (It's not unbroken anymore)",
            "How do I get it back the way it was before?",
            "Why would you wanna break",
            "A perfectly good heart?",
            "Why would you wanna take",
            "Our love and tear it all apart now?",
            "Why would you wanna make",
            "The very first scar?",
            "Why would you wanna break\u2014",
            "(Why) Would you wanna break it?",
            "Why would you wanna break",
            "A perfectly good heart?",
            "Why would you wanna take",
            "Our love and tear it all apart now?",
            "Why would you wanna make",
            "The very first scar?",
            "Why would you wanna break",
            "A perfectly good heart?",
            "Mmm-hmm"
          ]
        }
      ]
    },
    {
      title: "Fearless",
      songs: [
        {
          title: "Fearless",
          lines: [
            "There's somethin' 'bout the way",
            "The street looks when it's just rained",
            "There's a glow off the pavement",
            "You walk me to the car",
            "And you know I wanna ask you to dance right there",
            "In the middle of the parkin' lot, yeah",
            "Oh, yeah",
            "We're driving down the road",
            "I wonder if you know",
            "I'm trying so hard not to get caught up now",
            "But you're just so cool",
            "Run your hands through your hair",
            "Absent-mindedly makin' me want you",
            "And I don't know how it gets better than this",
            "You take my hand and drag me headfirst, fearless",
            "And I don't know why, but with you, I'd dance",
            "In a storm, in my best dress, fearless",
            "So, baby, drive slow 'til we run out of road",
            "In this one-horse town, I wanna stay right here",
            "In this passenger seat, you put your eyes on me",
            "In this moment now, capture it, remember it",
            "'Cause I don't know how it gets better than this",
            "You take my hand and drag me headfirst, fearless",
            "And I don't know why, but with you, I'd dance",
            "In a storm, in my best dress, fearless",
            "Oh-oh",
            "Well, you stood there with me in the doorway",
            "My hands shake, I'm not usually this way",
            "But you pull me in and I'm a little more brave",
            "It's the first kiss, it's flawless, really somethin'",
            "It's fearless",
            "Oh, yeah",
            "'Cause I don't know how it gets better than this",
            "You take my hand and drag me headfirst, fearless",
            "And I don't know why, but with you, I'd dance",
            "In a storm, in my best dress, fearless",
            "'Cause I don't know how it gets better than this",
            "You take my hand and drag me headfirst, fearless",
            "And I don't know why, but with you, I'd dance",
            "In a storm, in my best dress, fearless",
            "Oh-oh",
            "Oh-oh, yeah"
          ]
        },
        {
          title: "Fifteen",
          lines: [
            "You take a deep breath and you walk through the doors",
            "It's the mornin' of your very first day",
            "You say hi to your friends you ain't seen in a while",
            "Try and stay out of everybody's way",
            "It's your freshman year and you're gonna be here",
            "For the next four years in this town",
            "Hopin' one of those senior boys will wink at you and say",
            `"You know, I haven't seen you around before"`,
            "'Cause when you're fifteen and somebody tells you they love you",
            "You're gonna believe them",
            "And when you're fifteen, feelin' like there's nothin' to figure out",
            "Well, count to ten, take it in",
            "This is life before you know who you're gonna be",
            "At fifteen",
            "You sit in class next to a redhead named Abigail",
            "And soon enough, you're best friends",
            "Laughin' at the other girls who think they're so cool",
            "We'll be outta here as soon as we can",
            "And then you're on your very first date and he's got a car",
            "And you're feelin' like flyin'",
            "And your mama's waitin' up and you're thinkin' he's the one",
            "And you're dancin' 'round your room when the night ends",
            "When the night ends",
            "'Cause when you're fifteen and somebody tells you they love you",
            "You're gonna believe them",
            "And when you're fifteen and your first kiss",
            "Makes your head spin around, well",
            "In your life you'll do things greater than",
            "Datin' the boy on the football team",
            "I didn't know it at fifteen",
            "When all you wanted was to be wanted",
            "Wish you could go back",
            "And tell yourself what you know now",
            "Back then, I swore I was gonna marry him someday",
            "But I realized some bigger dreams of mine",
            "And Abigail gave everything she had",
            "To a boy who changed his mind",
            "And we both cried",
            "'Cause when you're fifteen and somebody tells you they love you",
            "You're gonna believe them",
            "And when you're fifteen, don't forget to look before you fall",
            "But I've found time can heal most anything",
            "And you just might find who you're supposed to be",
            "I didn't know who I was supposed to be",
            "At fifteen",
            "La-la-la, la-la-la, la-la-la-la",
            "La-la-la, la-la-la, la-la-la-la",
            "La-la-la, la-la-la",
            "Your very first day",
            "Take a deep breath, girl",
            "Take a deep breath as you walk through the doors"
          ]
        },
        {
          title: "Love Story",
          lines: [
            "We were both young when I first saw you",
            "I close my eyes and the flashback starts",
            "I'm standing there",
            "On a balcony in summer air",
            "See the lights, see the party, the ball gowns",
            "See you make your way through the crowd",
            'And say, "Hello"',
            "Little did I know",
            "That you were Romeo, you were throwing pebbles",
            'And my daddy said, "Stay away from Juliet"',
            "And I was crying on the staircase",
            `Begging you, "Please don't go," and I said`,
            "Romeo, take me somewhere we can be alone",
            "I'll be waiting, all there's left to do is run",
            "You'll be the prince and I'll be the princess",
            `It's a love story, baby, just say, "Yes"`,
            "So I sneak out to the garden to see you",
            "We keep quiet 'cause we're dead if they knew",
            "So close your eyes",
            "Escape this town for a little while, oh, oh",
            "'Cause you were Romeo, I was a scarlet letter",
            'And my daddy said, "Stay away from Juliet"',
            "But you were everything to me",
            `I was begging you, "Please don't go," and I said`,
            "Romeo, take me somewhere we can be alone",
            "I'll be waiting, all there's left to do is run",
            "You'll be the prince and I'll be the princess",
            `It's a love story, baby, just say, "Yes"`,
            "Romeo, save me, they're trying to tell me how to feel",
            "This love is difficult, but it's real",
            "Don't be afraid, we'll make it out of this mess",
            `It's a love story, baby, just say, "Yes"`,
            "Oh, oh",
            "But I got tired of waiting",
            "Wondering if you were ever coming around",
            "My faith in you was fading",
            "When I met you on the outskirts of town",
            `And I said, "Romeo, save me, I've been feeling so alone`,
            "I keep waiting for you, but you never come",
            `Is this in my head? I don't know what to think"`,
            "He knelt to the ground and pulled out a ring, and said",
            `"Marry me, Juliet, you'll never have to be alone`,
            "I love you and that's all I really know",
            "I talked to your dad, go pick out a white dress",
            `It's a love story, baby, just say, 'Yes'"`,
            "Oh, oh, oh",
            "Oh, oh, oh",
            "'Cause we were both young when I first saw you"
          ]
        },
        {
          title: "Hey Stephen",
          lines: [
            "Mmm, mmm",
            "Mmm, mmm",
            "Mmm, yeah",
            "Hey Stephen, I know looks can be deceivin'",
            "But I know I saw a light in you",
            "And as we walked, we were talkin'",
            "I didn't say half the things I wanted to",
            "Of all the girls tossing rocks at your window",
            "I'll be the one waiting there even when it's cold",
            "Hey Stephen, boy, you might have me believin'",
            "I don't always have to be alone",
            "'Cause I can't help it if you look like an angel",
            "Can't help it if I wanna kiss you in the rain, so",
            "Come feel this magic I've been feelin' since I met you",
            "Can't help it if there's no one else",
            "Mmm, I can't help myself",
            "Mm, mmm",
            "Oh-woah, mmm",
            "Hey Stephen, I've been holdin' back this feelin'",
            "So I've got some things to say to you, huh",
            "I've seen it all, so I thought",
            "But I never seen nobody shine the way you do",
            "The way you walk, way you talk, way you say my name",
            "It's beautiful, wonderful, don't you ever change",
            "Hey Stephen, why are people always leavin'?",
            "I think you and I should stay the same",
            "'Cause I can't help it if you look like an angel",
            "Can't help it if I wanna kiss you in the rain, so",
            "Come feel this magic I've been feelin' since I met you",
            "Can't help it if there's no one else",
            "Mmm, I can't help myself",
            "Mmm, mmm",
            "They're dimming the street lights",
            "You're perfect for me",
            "Why aren't you here tonight?",
            "I'm waitin' alone now",
            "So come on and come out",
            "And pull me near",
            "And shine, shine, shine",
            "Hey Stephen, I could give you fifty reasons",
            "Why I should be the one you choose",
            "All those other girls, well, they're beautiful",
            "But would they write a song for you? ha-ha",
            "I can't help it if you look like an angel",
            "Can't help it if I wanna kiss you in the rain, so",
            "Come feel this magic I've been feelin' since I met you",
            "Can't help it if there's no one else",
            "Mmm, I can't help myself",
            "If you look like an angel",
            "Can't help it if I wanna kiss you in the rain, so",
            "Come feel this magic I've been feelin' since I met you",
            "Can't help it if there's no one else",
            "Mmm, I can't help myself",
            "Oh-oh, myself",
            "Mmm, I can't help myself",
            "I can't help myself, oh-oh-oh",
            "Mmm, mmm",
            "Mmm, mmm, mmm"
          ]
        },
        {
          title: "White Horse",
          lines: [
            "Say you're sorry, that face of an angel",
            "Comes out just when you need it to",
            "As I paced back and forth all this time",
            "'Cause I honestly believed in you",
            "Holdin' on, the days drag on",
            "Stupid girl, I shoulda known, I shoulda known",
            "That I'm not a princess, this ain't a fairytale",
            "I'm not the one you'll sweep off her feet, lead her up the stairwell",
            "This ain't Hollywood, this is a small town",
            "I was a dreamer before you went and let me down",
            "Now it's too late for you and your white horse",
            "To come around",
            "Maybe I was naive, got lost in your eyes",
            "And never really had a chance",
            "Well, my mistake, I didn't know to be in love",
            "You had to fight to have the upper hand",
            "I had so many dreams about you and me",
            "Happy endings, well now I know",
            "That I'm not a princess, this ain't a fairytale",
            "I'm not the one you'll sweep off her feet, lead her up the stairwell",
            "This ain't Hollywood, this is a small town",
            "I was a dreamer before you went and let me down",
            "Now it's too late for you and your white horse",
            "To come around",
            "And there you are on your knees",
            "Beggin' for forgiveness, beggin' for me",
            "Just like I always wanted",
            "But I'm so sorry",
            "'Cause I'm not your princess, this ain't our fairytale",
            "I'm gonna find someone someday",
            "Who might actually treat me well",
            "This is a big world, that was a small town",
            "There in my rearview mirror disappearing now",
            "And it's too late for you and your white horse",
            "Now it's too late for you and your white horse",
            "To catch me now",
            "Oh, woah, woah, woah",
            "Try and catch me now, oh",
            "It's too late to catch me now"
          ]
        },
        {
          title: "You Belong With Me",
          lines: [
            "You're on the phone with your girlfriend, she's upset",
            "She's goin' off about something that you said",
            "'Cause she doesn't get your humor like I do",
            "I'm in my room, it's a typical Tuesday night",
            "I'm listening to the kind of music she doesn't like",
            "And she'll never know your story like I do",
            "'Cause she wears short skirts, I wear T-shirts",
            "She's Cheer-Captain and I'm on the bleachers",
            "Dreaming 'bout the day when you wake up and find",
            "That what you're lookin' for has been here the whole time",
            "If you could see that I'm the one who understands you",
            "Been here all along, so why can't you see?",
            "You belong with me, you belong with me",
            "Walking the streets with you and your worn-out jeans",
            "I can't help thinking this is how it ought to be",
            "Laughin' on a park bench, thinking to myself",
            `"Hey, isn't this easy?"`,
            "And you've got a smile that could light up this whole town",
            "I haven't seen it in a while since she brought you down",
            "You say you're fine, I know you better than that",
            "Hey, what you doin' with a girl like that?",
            "She wears high heels, I wear sneakers",
            "She's Cheer-Captain and I'm on the bleachers",
            "Dreaming about the day when you wake up and find",
            "That what you're lookin' for has been here the whole time",
            "If you could see that I'm the one who understands you",
            "Been here all along, so why can't you see?",
            "You belong with me",
            "Standin' by and waitin' at your back door",
            "All this time, how could you not know, baby?",
            "You belong with me, you belong with me",
            "Oh, I remember you",
            "Driving to my house in the middle of the night",
            "I'm the one who makes you laugh when you know you're 'bout to cry",
            "I know your favorite songs and you tell me 'bout your dreams",
            "Think I know where you belong, think I know it's with me",
            "Can't you see that I'm the one who understands you?",
            "Been here all along, so why can't you see? (Ah)",
            "You belong with me",
            "Standin' by and waitin' at your back door",
            "All this time, how could you not know, baby?",
            "You belong with me, you belong with me",
            "You belong with me",
            "Have you ever thought, just maybe you belong with me?",
            "You belong with me"
          ]
        },
        {
          title: "Breathe",
          lines: [
            "I see your face in my mind as I drive away",
            "'Cause none of us thought it was gonna end that way",
            "People are people and sometimes we change our minds",
            "But it's killin' me to see you go after all this time",
            "Mm, mmm",
            "Mm, mmm",
            "The music starts playin' like the end of a sad movie",
            "It's the kind of endin' you don't really wanna see",
            "'Cause it's tragedy and it'll only bring you down",
            "Now I don't know what to be without you around",
            "And we know it's never simple, never easy",
            "Never a clean break, no one here to save me",
            "You're the only thing I know like the back of my hand",
            "And I can't breathe without you, but I have to",
            "Breathe without you, but I have to",
            "Never wanted this, never wanna see you hurt",
            "Every little bump in the road, I tried to swerve",
            "But people are people and sometimes it doesn't work out",
            "And nothin' we say is gonna save us from the fallout",
            "And we know it's never simple, never easy",
            "Never a clean break, no one here to save me",
            "You're the only thing I know like the back of my hand",
            "And I can't breathe without you, but I have to",
            "Breathe without you, but I have to",
            "It's 2AM, feelin' like I just lost a friend",
            "Hope you know it's not easy, easy for me",
            "It's 2AM, feelin' like I just lost a friend",
            "Hope you know this ain't easy, easy for me",
            "And we know it's never simple, never easy",
            "Never a clean break, no one here to save me",
            "Woah",
            "I can't breathe without you, but I have to",
            "Breathe without you, but I have to",
            "Breathe without you, but I have to",
            "I'm sorry, I'm sorry (Mmm), I'm sorry (Yeah, yeah), I'm sorry",
            "I'm sorry, I'm sorry (Ooh), I'm sorry"
          ]
        },
        {
          title: "Tell Me Why",
          lines: [
            "I took a chance, I took a shot",
            "And you might think I'm bulletproof, but I'm not",
            "You took a swing, I took it hard",
            "And down here from the ground, I see who you are",
            "I'm sick and tired of your attitude",
            "I'm feelin' like I don't know you",
            "You tell me that you love me, then cut me down",
            "And I need you like a heartbeat",
            "But you know you got a mean streak",
            "Makes me run for cover when you're around",
            "Here's to you and your temper",
            "Yes, I remember what you said last night",
            "And I know that you see what you're doing to me",
            "Tell me why",
            "Well, you could write a book on",
            "How to ruin someone's perfect day",
            "Well, I get so confused and frustrated",
            "Forget what I'm trying to say, oh-oh",
            "I'm sick and tired of your reasons",
            "I got no one to believe in",
            "You tell me that you want me, then push me around",
            "And I need you like a heartbeat",
            "But you know you got a mean streak",
            "Makes me run for cover when you're around",
            "Here's to you and your temper",
            "Yes, I remember what you said last night",
            "And I know that you see what you're doing to me",
            "Tell me why",
            "Why do you have to make me feel small",
            "So you can feel whole inside?",
            "Why do you have to put down my dreams",
            "So you're the only thing on my mind?",
            "Well, I'm sick and tired of your attitude",
            "Feelin' like I don't know you",
            "You tell me that you want me and cut me down",
            "I'm sick and tired of your reasons",
            "I've got no one to believe in",
            "You ask me for my love, then you push me around",
            "Here's to you and your temper",
            "Yes, I remember what you said last night",
            "And I know that you see what you're doing to me",
            "Tell me why",
            "Why",
            "Tell me why, oh",
            "I take a step back, I let you go",
            "I told you I'm not bulletproof, now you know"
          ]
        },
        {
          title: "You're Not Sorry",
          lines: [
            "All this time, I was wastin', hopin' you would come around",
            "I've been givin' out chances every time and all you do is let me down",
            "And it's taken me this long, baby, but I've figured you out",
            "And you're thinkin' we'll be fine again, but not this time around",
            "You don't have to call anymore",
            "I won't pick up the phone",
            "This is the last straw",
            "Don't wanna hurt anymore",
            "And you can tell me that you're sorry",
            "But I don't believe you, baby, like I did before",
            "You're not sorry",
            "No, no, no, no",
            "You're lookin' so innocent, I might believe you if I didn't know",
            "Could've loved you all my life if you hadn't left me waitin' in the cold",
            "And you've got your share of secrets and I'm tired of bein' last to know, oh",
            "And now you're askin' me to listen 'cause it's worked each time before",
            "But you don't have to call anymore",
            "I won't pick up the phone",
            "This is the last straw",
            "Don't wanna hurt anymore",
            "And you can tell me that you're sorry",
            "But I don't believe you, baby, like I did before",
            "You're not sorry",
            "No, no",
            "You're not sorry",
            "No, no",
            "You had me crawlin' for you, honey, and it never would've gone away, no",
            "You used to shine so bright, but I watched all of it fade",
            "So you don't have to call anymore",
            "I won't pick up the phone",
            "This is the last straw",
            "There's nothin' left to beg for",
            "And you can tell me that you're sorry",
            "But I don't believe you, baby, like I did before",
            "You're not sorry",
            "No, no",
            "You're not sorry",
            "No, no",
            "No, no, no, no, no",
            "No, no, no",
            "No, no, no, no",
            "Woah, oh, oh, oh, oh, oh, oh",
            "Oh, oh, oh, no, no, no",
            "No, no"
          ]
        },
        {
          title: "The Way I Loved You",
          lines: [
            "He is sensible and so incredible",
            "And all my single friends are jealous",
            "He says everything I need to hear",
            "And it's like I couldn't ask for anything better",
            "He opens up my door and I get into his car",
            'And he says, "You look beautiful tonight"',
            "And I feel perfectly fine",
            "But I miss screamin' and fightin' and kissin' in the rain",
            "And it's 2AM and I'm cursin' your name",
            "So in love that you act insane",
            "And that's the way I loved you",
            "Breakin' down and comin' undone",
            "It's a, a rollercoaster kind of rush",
            "And I never knew I could feel that much",
            "And that's the way I loved you",
            "He respects my space",
            "And never makes me wait",
            "And he calls exactly when he says he will",
            "He's close to my mother",
            "Talks business with my father",
            "He's charming and endearing",
            "And I'm comfortable",
            "But I miss screamin' and fightin' and kissin' in the rain",
            "And it's 2AM and I'm cursin' your name",
            "So in love that you act insane",
            "And that's the way I loved you",
            "Breakin' down and comin' undone",
            "It's a, a rollercoaster kind of rush",
            "And I never knew I could feel that much",
            "And that's the way I loved you",
            "He can't see the smile I'm fakin'",
            "And my heart's not breakin'",
            "'Cause I'm not feelin' anything at all",
            "And you were wild and crazy",
            "Just so frustrating, intoxicatin', complicated",
            "Got away by some mistake and now",
            "I miss screamin' and fightin' and kissin' in the rain",
            "It's 2AM and I'm cursin' your name",
            "So in love that I acted insane",
            "And that's the way I loved you",
            "Breakin' down and comin' undone",
            "It's a, a rollercoaster kind of rush",
            "And I never knew I could feel that much",
            "And that's the way I loved you",
            "Woah, woah, oh-oh",
            "Oh, and that's the way I loved you",
            "Oh, oh, oh-woah, oh, oh, oh-woah",
            "Never knew I could feel that much",
            "That's the way I loved you"
          ]
        },
        {
          title: "Forever & Always",
          lines: [
            "Once upon a time",
            "I believe it was a Tuesday when I caught your eye",
            "And we caught onto somethin'",
            "I hold onto the night",
            "You looked me in the eye and told me you loved me",
            "Were you just kiddin'?",
            "'Cause it seems to me",
            "This thing is breaking down, we almost never speak",
            "I don't feel welcome anymore",
            "Baby, what happened? Please, tell me",
            "'Cause, one second, it was perfect",
            "Now you're halfway out the door",
            "And I stare at the phone, he still hasn't called",
            "And then you feel so low you can't feel nothin' at all",
            'And you flashback to when he said, "Forever and always," oh',
            "Oh, and it rains in your bedroom, everythin' is wrong",
            "It rains when you're here and it rains when you're gone",
            `'Cause I was there when you said, "Forever and always"`,
            "Was I out of line?",
            "Did I say somethin' way too honest, made you run and hide",
            "Like a scared little boy?",
            "I looked into your eyes",
            "Thought I knew you for a minute, now I'm not so sure",
            "So here's to everything coming down to nothin'",
            "Here's to silence that cuts me to the core",
            "Where is this going?",
            "Thought I knew for a minute, but I don't anymore",
            "And I stare at the phone, he still hasn't called",
            "And then you feel so low you can't feel nothin' at all",
            'And you flashback to when he said, "Forever and always," oh',
            "Oh, and it rains in your bedroom, everythin' is wrong",
            "It rains when you're here and it rains when you're gone",
            `'Cause I was there when you said, "Forever and always"`,
            "You didn't mean it, baby",
            "I don't think so",
            "Oh, woah",
            "Oh, back up, baby, back up",
            "Did you forget everything?",
            "Back up, baby, back up",
            "Did you forget everything?",
            "'Cause it rains in your bedroom, everythin' is wrong",
            "It rains when you're here and it rains when you're gone",
            `'Cause I was there when you said, "Forever and always"`,
            "Oh, I stare at the phone, he still hasn't called",
            "And then you feel so low you can't feel nothin' at all",
            'And you flashback to when we said, "Forever and always"',
            "And it rains in your bedroom, everythin' is wrong",
            "It rains when you're here and it rains when you're gone",
            `'Cause I was there when you said, "Forever and always"`,
            "You didn't mean it, baby",
            'You said, "Forever and always," yeah'
          ]
        },
        {
          title: "The Best Day",
          lines: [
            "I'm five years old, it's gettin' cold, I've got my big coat on",
            "I hear your laugh and look up smilin' at you, I run and run",
            "Past the pumpkin patch and the tractor rides, look, now the sky is gold",
            "I hug your legs and fall asleep on the way home",
            "I don't know why all the trees change in the fall",
            "But I know you're not scared of anything at all",
            "Don't know if Snow-White's house is near or far away",
            "But I know I had the best day with you today",
            "I'm thirteen now and don't know how my friends could be so mean",
            "I come home cryin' and you hold me tight and grab the keys",
            "And we drive and drive until we found a town far enough away",
            "And we talk and window shop 'til I've forgotten all their names",
            "I don't know who I'm gonna talk to now at school",
            "But I know I'm laughin' on the car ride home with you",
            "Don't know how long it's gonna take to feel okay",
            "But I know I had the best day with you today",
            "I have an excellent father, his strength is making me stronger",
            "God smiles on my little brother, inside and out, he's better than I am",
            "I grew up in a pretty house and I had space to run",
            "And I had the best days with you",
            "There is a video I found from back when I was three",
            "You set up a paint set in the kitchen and you're talkin' to me",
            "It's the age of princesses and pirate ships and the seven dwarves",
            "Daddy's smart and you're the prettiest lady in the whole wide world",
            "Now I know why all the trees change in the fall",
            "I know you were on my side even when I was wrong",
            "And I love you for givin' me your eyes",
            "For staying back and watchin' me shine",
            "And I didn't know if you knew",
            "So I'm taking this chance to say",
            "That I had the best day with you today"
          ]
        },
        {
          title: "Change",
          lines: [
            "Well, it's a sad picture, the final blow hits ya",
            "Somebody else gets what you wanted again and",
            "You know it's all the same, another time and place",
            "Repeatin' history and you're gettin' sick of it",
            "But I believe in whatever you do",
            "And I'll do anything to see it through",
            "Because these things will change, can you feel it now?",
            "These walls that they put up to hold us back will fall down",
            "This revolution, the time will come for us to finally win",
            "And we'll sing hallelujah, we'll sing hallelujah",
            "Oh, oh",
            "So we've been outnumbered, raided and, now, cornered",
            "It's hard to fight when the fight ain't fair",
            "We're getting stronger now, find things they never found",
            "They might be bigger but we're faster and never scared",
            `You can walk away, say, "We don't need this"`,
            `But there's somethin' in your eyes, says, "We can beat this"`,
            "'Cause these things will change, can you feel it now?",
            "These walls that they put up to hold us back will fall down",
            "This revolution, the time will come for us to finally win",
            "And we'll sing hallelujah, we'll sing hallelujah",
            "Oh, oh-woah",
            "Tonight, we'll stand and get off our knees",
            "Fight for what we've worked for all these years",
            "And the battle was long, it's the fight of our lives",
            "But we'll stand up champions tonight",
            "It was the night things changed, can you see it now?",
            "When the walls that they put up to hold us back fell down",
            "It's a revolution, throw your hands up 'cause we never gave in",
            "And we'll sing hallelujah, we sang hallelujah, oh",
            "Hallelujah"
          ]
        },
        {
          title: "Jump Then Fall",
          lines: [
            "I like the way you sound in the mornin'",
            "We're on the phone and without a warnin'",
            "I realize your laugh is the best sound",
            "I have ever heard",
            "I like the way I can't keep my focus",
            "I watch you talk, you didn't notice",
            "I hear the words, but all I can think is",
            '"We should be together"',
            "Every time you smile, I smile",
            "And every time you shine, I'll shine for you",
            "Woah-oh, I'm feelin' you, baby",
            "Don't be afraid to jump, then fall",
            "Jump, then fall into me",
            "Baby, I'm never gonna leave you",
            "Say that you wanna be with me too",
            "'Cause I'ma stay through it all",
            "So, jump, then fall",
            "Huh, well, I like the way your hair falls in your face",
            "You got the keys to me, I love each freckle on your face, oh",
            "I've never been so wrapped up, honey",
            "I like the way you're everything I ever wanted",
            "I had time to think it oh-over",
            'And all I can say is, "Come closer"',
            "Take a deep breath and jump, then fall into me",
            "'Cause every time you smile, I smile",
            "And every time you shine, I'll shine for you",
            "Woah-oh, I'm feelin' you, baby",
            "Don't be afraid to jump, then fall",
            "Jump, then fall into me",
            "Baby, I'm never gonna leave you",
            "Say that you wanna be with me too",
            "'Cause I'ma stay through it all",
            "So, jump, then fall",
            "The bottom's gonna drop out from under our feet",
            "I'll catch you, I'll catch you",
            "When people say things that bring you to your knees",
            "I'll catch you",
            "The time is gonna come when you're so mad you could cry",
            "But I'll hold you through the night until you smile",
            "Woah-oh, I need you, baby",
            "Don't be afraid, please, jump, then fall",
            "Jump, then fall into me",
            "Baby, I'm never gonna leave you",
            "Say that you wanna be with me too",
            "'Cause I'ma stay through it all",
            "So, jump, then fall",
            "Jump, then fall, baby",
            "Jump, then fall into me, into me",
            "Every time you smile, I smile",
            "And every time you shine, I'll shine",
            "And every time you're here",
            "Baby, I'll show you, I'll show you",
            "You can jump, then fall, jump, then fall",
            "Jump, then fall into me, into me, yeah"
          ]
        },
        {
          title: "Untouchable",
          lines: [
            "Untouchable like a distant diamond sky",
            "I'm reachin' out and I just can't tell you why",
            "I'm caught up in you, I'm caught up in you",
            "Untouchable, burning brighter than the sun",
            "And when you're close, I feel like comin' undone",
            "In the middle of the night, when I'm in this dream",
            "It's like a million little stars spellin' out your name",
            "You gotta come on, come on, say that we'll be together",
            "Come on, come on, little taste of Heaven",
            "Oh, oh",
            "It's half full and I won't wait here all day",
            "I know you're sayin' that you'd be here anyway",
            "But you're untouchable, burnin' brighter than the sun",
            "And now that you're close, I feel like comin' undone",
            "In the middle of the night, when I'm in this dream",
            "It's like a million little stars spellin' out your name",
            "You gotta come on, come on, say that we'll be together",
            "Come on, come on, oh",
            "In the middle of the night, wakin' from this dream",
            "I wanna feel you by my side, standin' next to me",
            "You gotta come on, come on, say that we'll be together",
            "Come on, come on, little taste of Heaven",
            "I'm caught up in you",
            "Oh, oh",
            "But you're untouchable, burnin' brighter than the sun",
            "Now that you're close, I feel like comin' undone",
            "In the middle of the night, when I'm in this dream",
            "It's like a million little stars spellin' out your name",
            "You gotta come on, come on, say that we'll be together",
            "Come on, come on, oh",
            "In the middle of the night, when I'm in this dream",
            "It's like a million little stars spellin' out your name",
            "You gotta come on, come on, say that we'll be together",
            "Come on, come on, come on",
            "In the middle of the night, wakin' from this dream",
            "I wanna feel you by my side, standin' next to me",
            "You gotta come on, come on, say that we'll be together",
            "Come on, come on, little taste of Heaven",
            "Oh, oh, oh, oh",
            "And in the middle of the night, when I'm in this dream",
            "It's like a million little stars spellin' out your name",
            "You gotta come on, come on, oh",
            "Come on, come on, come on, come on",
            "Oh, oh, oh, oh",
            "It's like a million little stars spellin' out your name",
            "Spellin' out your name, oh"
          ]
        },
        {
          title: "Come In With The Rain",
          lines: [
            "I could go back to every laugh",
            "But I don't wanna go there anymore",
            "And I know all the steps up to your door",
            "But I don't wanna go there anymore",
            "Talk to the wind, talk to the sky",
            "Talk to the man with the reasons why",
            "And let me know what you find",
            "I'll leave my window open",
            "'Cause I'm too tired at night to call your name",
            "Just know, I'm right here hopin'",
            "That you'll come in with the rain",
            "I could stand up and sing you a song",
            "But I don't wanna have to go that far",
            "And I, I've got you down, I know you by heart",
            "And you don't even know where I start",
            "Talk to yourself, talk to the tears",
            "Talk to the man who put you here",
            "And don't wait for the sky to clear",
            "I'll leave my window open",
            "'Cause I'm too tired at night to call your name, oh",
            "Just know, I'm right here hopin'",
            "That you'll come in with the rain",
            "I've watched you so long",
            "Screamed your name",
            "I don't know what else I can say",
            "I'll leave my window open",
            "'Cause I'm too tired at night for all these games",
            "Just know, I'm right here hopin'",
            "That you'll come in with the rain",
            "I could go back to every laugh",
            "But I don't wanna go there anymore"
          ]
        },
        {
          title: "Superstar",
          lines: [
            "This is wrong, but I can't help but feel like",
            "There ain't nothin' more right, babe",
            "Misty mornin' comes again and I can't",
            "Help but wish I could see your face",
            "I knew from the first note played",
            "I'd be breakin' all my rules to see you",
            "You smile that beautiful smile",
            "And all the girls in the front row",
            "Scream your name",
            "So dim that spotlight, tell me things like",
            `"I can't keep my eyes off of you"`,
            "I'm no one special, just another wide-eyed girl",
            "Who's desperately in love with you",
            "Give me a photograph to hang on my wall",
            "Superstar",
            "Mornin' loneliness comes around when I'm not",
            "Dreamin' about you",
            "When my world wakes up today",
            "You'll be in another town",
            "And I knew when I saw your face",
            "I'd be counting down the ways to see you",
            "You smile that beautiful smile",
            "And all the girls in the front row",
            "Scream your name",
            "So dim that spotlight, tell me things like",
            `"I can't take my eyes off of you"`,
            "I'm no one special, just another wide-eyed girl",
            "Who's desperately in love with you",
            "Give me a photograph to hang on my wall",
            "Superstar",
            "You played in bars, you play guitar",
            "I'm invisible and everyone knows who you are",
            "And you'll never see, you sing me to sleep",
            "Every night from the radio",
            "So dim that spotlight, tell me things like",
            `"I can't take my eyes off of you"`,
            "I'm no one special, just another wide-eyed girl",
            "Who's desperately in love with you",
            "Give me a photograph to hang on my wall",
            "Superstar",
            "Sweet, sweet superstar",
            "Superstar"
          ]
        },
        {
          title: "The Other Side Of The Door",
          lines: [
            "In the heat of the fight, I walked away",
            "Ignorin' words that you were sayin', tryna make me stay",
            `I said, "This time I've had enough"`,
            "And you've called a hundred times",
            "But I'm not pickin' up",
            "'Cause I'm so mad, I might tell you that it's over",
            "But if you look a little closer",
            'I said, "Leave," but all I really want is you',
            "To stand outside my window, throwin' pebbles",
            `Screamin', "I'm in love with you"`,
            "Wait there in the pourin' rain, comin' back for more",
            "And don't you leave 'cause I know",
            "All I need is on the other side of the door",
            "Well, me and my stupid pride are sittin' here alone",
            "Goin' through the photographs, starin' at the phone",
            "I keep goin' back over things we both said",
            "And I remember the slammin' door",
            "And all the things that I misread",
            "Oh, babe, if you know everything",
            "Tell me why you couldn't see",
            "When I left, I wanted you to chase after me, yeah",
            'I said, "Leave," but all I really want is you',
            "To stand outside my window throwin' pebbles",
            `Screamin', "I'm in love with you"`,
            "Wait there in the pourin' rain, comin' back for more",
            "And don't you leave 'cause I know",
            "All I need is on the other side of the door",
            "And I'll scream out the window",
            `"I can't even look at you"`,
            "I don't need you, but I do, I do, I do",
            `I say, "There's nothin' you can say`,
            'To make this right again, I mean it, I mean it"',
            "But what I mean is",
            'I said, "Leave," but, baby, all I want is you',
            "To stand outside my window throwin' pebbles",
            `Screamin', "I'm in love with you"`,
            "Wait there in the pourin' rain, comin' back for more",
            "And don't you leave 'cause I know",
            "All I need is on the other side of the door",
            "With your face and the beautiful eyes",
            "And the conversation with the little white lies",
            "And the faded picture of a beautiful night",
            "You carried me from your car up the stairs",
            "And I broke down cryin', was she worth this mess?",
            "After everything and that little black dress",
            "After everything, I must confess",
            "I need you"
          ]
        },
        {
          title: "Today Was A Fairytale",
          lines: [
            "Today was a fairytale, you were the prince",
            "I used to be a damsel in distress",
            "You took me by the hand and you picked me up at six",
            "Today was a fairytale",
            "Today was a fairytale",
            "Today was a fairytale, I wore a dress",
            "You wore a dark gray T-shirt",
            "You told me I was pretty when I looked like a mess",
            "Today was a fairytale",
            "Time slows down",
            "Whenever you're around",
            "Well, can you feel this magic in the air?",
            "It must have been the way you kissed me",
            "Fell in love when I saw you standing there",
            "It must have been the way",
            "Today was a fairytale",
            "It must have been the way",
            "Today was a fairytale",
            "Today was a fairytale, you've got a smile",
            "That takes me to another planet",
            "Every move you make, everything you say is right",
            "Today was a fairytale",
            "Today was a fairytale, all that I can say",
            "Is, now it's gettin' so much clearer",
            "Nothing made sense 'til the time I saw your face",
            "Today was a fairytale",
            "Time slows down",
            "Whenever you're around, yeah",
            "But can you feel this magic in the air?",
            "It must have been the way you kissed me",
            "Fell in love when I saw you standing there",
            "It must have been the way",
            "Today was a fairytale",
            "It must have been the way",
            "Today was a fairytale",
            "Time slows down",
            "Whenever you're around",
            "I can feel my heart",
            "It's beating in my chest",
            "Did you feel it?",
            "I can't put this down",
            "But can you feel this magic in the air?",
            "It must have been the way you kissed me",
            "Fell in love when I saw you standing there",
            "It must have been the way",
            "But can you feel this magic in the air?",
            "It must have been the way you kissed me",
            "Fell in love when I saw you standing there",
            "It must have been the way",
            "Today was a fairytale",
            "It must have been the way",
            "Today was a fairytale",
            "Oh, oh, yeah, woah",
            "Today was a fairytale"
          ]
        },
        {
          title: "You All Over Me",
          lines: [
            "Once the last drop of rain has dried off the pavement",
            "Shouldn't I find a stain? But I never do",
            "The way the tires turn stones on old county roads",
            "They leave 'em muddy underneath, reminds me of you",
            "You find graffiti on the walls of old bathroom stalls, you know",
            "You can scratch it right off, it's how it used to be",
            "But like the dollar in your pocket, it's been spent and traded in",
            "You can't change where it's been, reminds me of me",
            "I lived and I learned",
            "Had you, got burned",
            "Held out and held on",
            "God knows, too long, and wasted time",
            "Lost tears, swore that I'd get out of here",
            "But no amount of freedom gets you clean",
            "I've still got you all over me",
            "The best and worst day of June",
            "Was the one that I met you",
            "With your hands in your pockets",
            `And your "Don't you wish you had me?" grin`,
            "Well I did, so I smiled, and I melted like a child",
            "Now, every breath of air I breathe reminds me of then",
            "And I lived and I learned",
            "Had you, got burned",
            "Held out and held on",
            "God knows, too long, and wasted time",
            "Lost tears, swore that I'd get out of here",
            "But no amount of freedom gets you clean",
            "I've still got you all over me",
            "I lived and I learned",
            "And found out what it was to turn around",
            "And see that we",
            "Were never really meant to be",
            "So I lied, and I cried",
            "And I watched a part of myself die",
            "'Cause no amount of freedom gets you clean",
            "I've still got you all over me",
            "I've still got you all over me",
            "Still got you all over me"
          ]
        },
        {
          title: "Mr. Perfectly Fine",
          lines: [
            'Mr. "Perfect face," Mr. "Here to stay"',
            'Mr. "Looked me in the eye and told me you would never go away"',
            `Everything was right, Mr. "I've been waitin' for you all my life"`,
            'Mr. "Every single day until the end, I will be by your side"',
            'But that was when I got to know Mr. "Change of heart"',
            'Mr. "Leaves me all alone," I fall apart',
            "It takes everything in me just to get up each day",
            "But it's wonderful to see that you're okay",
            'Hello, Mr. "Perfectly fine"',
            "How's your heart after breakin' mine?",
            'Mr. "Always at the right place at the right time," baby',
            'Hello, Mr. "Casually cruel"',
            'Mr. "Everything revolves around you"',
            "I've been Miss Misery since your goodbye",
            `And you're Mr. "Perfectly fine"`,
            'Mr. "Never told me why," Mr. "Never had to see me cry"',
            `Mr. "Insincere apology, so he doesn't look like the bad guy"`,
            "He goes about his day, forgets he ever even heard my name",
            "Well, I thought you might be different than the rest, I guess you're all the same",
            "Because I hear he's got his arm 'round a brand-new girl",
            "I've been pickin' up my heart, he's been pickin' up her",
            "And I never got past what you put me through",
            "But it's wonderful to see that it never phased you",
            'Hello, Mr. "Perfectly fine"',
            "How's your heart after breakin' mine?",
            'Mr. "Always at the right place at the right time," baby',
            'Hello, Mr. "Casually cruel"',
            'Mr. "Everything revolves around you"',
            "I've been Miss Misery since your goodbye",
            `And you're Mr. "Perfectly fine"`,
            "So dignified in your well-pressed suit",
            "So strategized, all the eyes on you",
            "Sashay your way to your seat",
            "It's the best seat in the best room",
            `Oh, he's so smug, Mr. "Always wins"`,
            "So far above me in every sense",
            "So far above feelin' anything",
            "And it's really such a shame",
            "It's such a shame",
            `'Cause I was Miss "Here to stay"`,
            `Now I'm Miss "Gonna be alright someday"`,
            "And someday, maybe you'll miss me",
            `But by then, you'll be Mr. "Too late"`,
            'Goodbye, Mr. "Perfectly fine"',
            "How's your heart after breakin' mine?",
            'Mr. "Always at the right place at the right time," baby',
            'Goodbye, Mr. "Casually cruel"',
            'Mr. "Everything revolves around you"',
            "I've been Miss Misery for the last time",
            `And you're Mr. "Perfectly fine"`,
            "You're perfectly fine",
            'Mr. "Looked me in the eye and told me you would never go away"',
            "You said you'd never go away"
          ]
        },
        {
          title: "We Were Happy",
          lines: [
            "We used to walk along the streets",
            "When the porch lights were shinin' bright",
            "Before I had somewhere to be",
            "Back when we had all night",
            "And we were happy",
            "I do recall a good while back",
            "We snuck into the circus",
            "You threw your arms around my neck",
            "Back when I deserved it",
            "And we were happy",
            "When it was good, baby, it was good, baby",
            "We showed 'em all up",
            "No one could touch the way we",
            "Laughed in the dark, talkin' 'bout your daddy's farm",
            "We were gonna buy someday",
            "And we were happy",
            "We used to watch the Sun go down",
            "On the boats in the water",
            "That's sorta how I feel right now",
            "And goodbye's so much harder",
            "'Cause we were happy",
            "When it was good, baby, it was good, baby",
            "We showed 'em all up",
            "No one could touch the way we",
            "Laughed in the dark, talkin' 'bout your daddy's farm",
            "We were gonna buy someday",
            "And we were happy",
            "We were happy",
            "Oh, I hate those voices",
            "Tellin' me I'm not in love anymore",
            "But they don't give me choices",
            "And that's what these tears are for",
            "'Cause we were happy",
            "We were happy",
            "When it was good, baby, it was good, baby",
            "We showed 'em all up",
            "No one could touch the way we",
            "Laughed in the dark, talkin' 'bout your daddy's farm",
            "And you were gonna marry me",
            "And we were happy",
            "We were happy",
            "Oh, we were happy"
          ]
        },
        {
          title: "That's When",
          lines: [
            'You said, "I know"',
            'When I said, "I need some time, need some space',
            'To think about all of this"',
            "And you watched me go",
            "And I knew my words were hard to hear",
            "And harder to ever take back",
            'And I said, "When can I come back?"',
            `And you said, "That's when`,
            "When I wake up in the morning",
            "That's when, when it's sunny or stormin'",
            "Laughin', when I'm cryin'",
            "And that's when",
            "I'll be waitin' at the front gate",
            "That's when, when I see your face",
            `I'll let you in and, baby, that's when"`,
            "Mmm, mm",
            'I said, "I know"',
            'When you said, "I did you wrong, made mistakes',
            'And put you through all of this" (Through all of this)',
            "Then through the phone",
            "Came all your tears",
            'And I said, "Leave those all in our past"',
            'And you said, "When can I come back?"',
            `And I said, "That's when`,
            "When I wake up in the morning",
            "That's when, when it's sunny or stormin'",
            "Laughin', when I'm cryin'",
            "And that's when",
            "I'll be waitin' at the front gate",
            "That's when, when I see your face",
            `I'll let you in and, baby, that's when"`,
            'And you said, "Honestly',
            "When you were gone",
            'Did you ever think of me?"',
            `And I said, "That's when`,
            "When I woke up in the morning",
            "That's when it was sunny or stormin'",
            "Laughin', when I was cryin'",
            "And that's when",
            "You were waitin' at the front gate",
            "That's when, when I saw your face",
            `You let me in, and baby, that's when"`,
            "(That's when)",
            "(When I woke up in the morning) Yeah",
            "(That's when it was sunny or stormin')",
            "When I'm laughin', when I'm cryin'",
            "(That's when I'll be waitin' at the front gate)",
            "That's when I miss you, that's when I want you",
            "(That's when, when I see your face)",
            "That's when I love you, that's when"
          ]
        },
        {
          title: "Don't You",
          lines: [
            "Hey, I knew I'd run into you somewhere",
            "It's been a while, I didn't mean to stare",
            "I heard she's nothin' like me",
            "I'm sure she'll make you happy",
            "But don't you",
            "Don't you smile at me and ask me how I've been",
            "Don't you say you've missed me if you don't want me again",
            "You don't know how much I feel I love you still",
            "So why don't you, don't you?",
            "Sometimes, I really wish that I could hate you",
            "I've tried, but that's just somethin' I can't do",
            "My heart knows what the truth is",
            "I swore I wouldn't do this",
            "But don't you",
            "Don't you smile at me and ask me how I've been",
            "Don't you say you've missed me if you don't want me again",
            "You don't know how much I feel I love you still",
            "So why don't you, don't you?",
            "So I'll walk out of here tonight",
            "Try to go on with my life",
            "And you can say we're still friends",
            "(But I don't wanna pretend)",
            "So if I see you again",
            "Don't you (Don't you)",
            "Don't you smile at me and ask me how I've been",
            "Don't you (Don't you) say you've missed me if you don't want me again",
            "You don't (You don't) know how much I feel I love you still",
            "So why don't you, don't you?",
            "Don't you"
          ]
        },
        {
          title: "Bye Bye Baby",
          lines: [
            "It wasn't just like a movie",
            "The rain didn't soak through my clothes, down to my skin",
            "I'm drivin' away and I, I guess you could say",
            "This is the last time I'll drive this way again",
            "Lost in the gray and I try to grab at the fray",
            "'Cause I, I still love you, but I can't",
            "Bye, bye to everything I thought was on my side",
            "Bye, bye, baby",
            "I want you bad, but it's come down to nothing",
            "And all I have is your sympathy",
            "'Cause you took me home but you just couldn't keep me",
            "Bye, bye, baby",
            "Bye, bye, baby",
            "The picture frame is empty",
            "On the dresser, vacant just like me",
            "I see your writing on the dash",
            "Then back to your hesitation",
            "I was so sure of everything",
            "Everything I thought we'd always have",
            "Guess I never doubted it",
            "Then the here and the now floods in",
            "Feels like I'm becoming a part of your past",
            "Bye, bye to everything I thought was on my side",
            "Bye, bye, baby",
            "I want you bad, but it's come down to nothing",
            "And all I have is your sympathy",
            "'Cause you took me home but you just couldn't keep me",
            "Bye, bye, baby",
            "And there's so much that I can't touch",
            "You're all I want, but it's not enough this time",
            "And all the pages are just slipping through my hands",
            "And I'm so scared of how this ends",
            "Bye, bye to everything I thought was on my side",
            "Bye, bye, baby",
            "I want you bad, but it's come down to nothing",
            "And all I have is your sympathy",
            "'Cause you took me home but you just couldn't keep me",
            "Bye, bye to everything I thought was on my side",
            "Bye, bye, baby",
            "I want you bad, but it's come down to nothing",
            "And all I have is your sympathy",
            "'Cause you took me home but you just couldn't keep me",
            "Oh, you took me home, I thought you were gonna keep me",
            "Bye, bye, baby",
            "Bye, bye, baby"
          ]
        }
      ]
    },
    {
      title: "Speak Now",
      songs: [
        {
          title: "Mine",
          lines: [
            "Ah-ah, ah-ah",
            "Ah-ah, ah-ah",
            "You were in college working part-time, waiting tables",
            "Left a small town, never looked back",
            "I was a flight risk with a fear of falling",
            "Wondering why we bother with love if it never lasts",
            'I say, "Can you believe it?"',
            "As we're lying on the couch",
            "The moment I could see it",
            "Yes, yes, I can see it now",
            "Do you remember, we were sitting there by the water?",
            "You put your arm around me for the first time",
            "You made a rebel of a careless man's careful daughter",
            "You are the best thing that's ever been mine",
            "Flash forward and we're taking on the world together",
            "And there's a drawer of my things at your place",
            "You learn my secrets and you figure out why I'm guarded",
            "You say we'll never make my parents' mistakes",
            "But we got bills to pay",
            "We got nothing figured out",
            "When it was hard to take",
            "Yes, yes, this is what I thought about",
            "Do you remember, we were sitting there by the water?",
            "You put your arm around me for the first time",
            "You made a rebel of a careless man's careful daughter",
            "You are the best thing that's ever been mine",
            "Do you remember all the city lights on the water?",
            "You saw me start to believe for the first time",
            "You made a rebel of a careless man's careful daughter",
            "You are the best thing that's ever been mine",
            "Oh-oh, oh",
            "And I remember that fight, 2:30AM",
            "As everything was slipping right out of our hands",
            "I ran out crying and you followed me out into the street",
            "Braced myself for the goodbye",
            "'Cause it's all I've ever known",
            "Then you took me by surprise",
            `You said, "I'll never leave you alone" (Oh)`,
            'You said, "I remember how we felt sitting by the water',
            "And every time I look at you, it's like the first time",
            "I fell in love with a careless man's careful daughter",
            `She is the best thing that's ever been mine"`,
            "Hold on, make it last",
            "Hold on, never turn back",
            "(Hold on) You made a rebel of a careless man's careful daughter",
            "(Hold on) You are the best thing that's ever been mine",
            "Do you believe it? (Yeah, yeah, yeah)",
            "We're gonna make it now (Yeah, yeah, yeah)",
            "And I can see it (Yeah, yeah)",
            "I can see it now"
          ]
        },
        {
          title: "Sparks Fly",
          lines: [
            "The way you move is like a full on rainstorm",
            "And I'm a house of cards",
            "You're the kind of reckless that should send me runnin'",
            "But I kinda know that I won't get far",
            "And you stood there in front of me, just close enough to touch",
            "Close enough to hope you couldn't see what I was thinkin' of",
            "Drop everything now, meet me in the pouring rain",
            "Kiss me on the sidewalk, take away the pain",
            "'Cause I see sparks fly whenever you smile",
            "Get me with those green eyes, baby, as the lights go down",
            "Give me something that'll haunt me when you're not around",
            "'Cause I see sparks fly whenever you smile",
            "My mind forgets to remind me you're a bad idea",
            "You touch me once and it's really somethin'",
            "You find I'm even better than you imagined I would be",
            "I'm on my guard for the rest of the world",
            "But with you, I know it's no good",
            "And I could wait patiently, but I really wish you would",
            "Drop everything now, meet me in the pouring rain",
            "Kiss me on the sidewalk, take away the pain",
            "'Cause I see sparks fly whenever you smile",
            "Get me with those green eyes, baby, as the lights go down",
            "Give me something that'll haunt me when you're not around",
            "'Cause I see sparks fly whenever you smile",
            "I'll run my fingers through your hair and watch the lights go wild",
            "Just keep on keepin' your eyes on me",
            "It's just wrong enough to make it feel right",
            "And lead me up the staircase, won't you whisper soft and slow?",
            "I'm captivated by you, baby, like a fireworks show",
            "Drop everything now, meet me in the pouring rain",
            "Kiss me on the sidewalk (Ah-ah), take away the pain",
            "'Cause I see sparks fly whenever you smile",
            "Get me with those green eyes, baby, as the lights go down",
            "Give me something that'll haunt me when you're not around",
            "'Cause I see sparks fly whenever you smile",
            "And the sparks fly",
            "Oh, baby, smile",
            "And the sparks fly"
          ]
        },
        {
          title: "Back To December",
          lines: [
            "I'm so glad you made time to see me",
            "How's life? Tell me, how's your family?",
            "I haven't seen them in a while",
            "You've been good, busier than ever",
            "We small talk, work and the weather",
            "Your guard is up and I know why",
            "Because the last time you saw me",
            "Is still burned in the back of your mind",
            "You gave me roses and I left them there to die",
            "So, this is me swallowing my pride",
            `Standin' in front of you sayin', "I'm sorry for that night"`,
            "And I go back to December all the time",
            "It turns out freedom ain't nothing but missin' you",
            "Wishin' I'd realized what I had when you were mine",
            "I go back to December, turn around and make it alright",
            "I go back to December all the time",
            "These days, I haven't been sleeping",
            "Stayin' up, playing back myself leavin'",
            "When your birthday passed and I didn't call",
            "Then I think about summer, all the beautiful times",
            "I watched you laughin' from the passenger side",
            "And realized I loved you in the fall",
            "And then the cold came, the dark days",
            "When fear crept into my mind",
            "You gave me all your love and all I gave you was goodbye",
            "So, this is me swallowing my pride",
            `Standin' in front of you, sayin', "I'm sorry for that night"`,
            "And I go back to December all the time",
            "It turns out freedom ain't nothing but missin' you",
            "Wishin' I'd realized what I had when you were mine",
            "I go back to December, turn around and change my own mind",
            "I go back to December all the time",
            "I miss your tanned skin, your sweet smile",
            "So good to me, so right",
            "And how you held me in your arms that September night",
            "The first time you ever saw me cry",
            "Maybe this is wishful thinkin'",
            "Probably mindless dreaming",
            "But if we loved again, I swear I'd love you right",
            "I'd go back in time and change it, but I can't",
            "So, if the chain is on your door, I understand",
            "But this is me swallowing my pride",
            `Standin' in front of you, sayin', "I'm sorry for that night"`,
            "And I go back to December",
            "It turns out freedom ain't nothing but missin' you",
            "Wishin' I'd realized what I had when you were mine",
            "I go back to December, turn around and make it alright",
            "I go back to December, turn around and change my own mind",
            "I go back to December all the time",
            "All the time"
          ]
        },
        {
          title: "Speak Now",
          lines: [
            "I am not the kind of girl",
            "Who should be rudely bargin' in on a white veil occasion",
            "But you are not the kind of boy",
            "Who should be marrying the wrong girl",
            "I sneak in and see your friends",
            "And her snotty little family all dressed in pastel",
            "And she is yelling at a bridesmaid",
            "Somewhere back inside a room",
            "Wearin' a gown shaped like a pastry",
            "This is surely not what you thought it would be",
            "I lose myself in a daydream",
            "Where I stand and say",
            "Don't say yes, run away now",
            "I'll meet you when you're out",
            "Of the church, at the back door",
            "Don't wait or say a single vow",
            "You need to hear me out",
            'And they said, "Speak now"',
            "Fond gestures are exchanged",
            "And the organ starts to play a song that sounds like a death march",
            "And I am hiding in the curtains",
            "It seems that I was uninvited by your lovely bride-to-be",
            "She floats down the aisle like a pageant queen",
            "But I know you wish it was me",
            "You wish it was me, don't you?",
            "Don't say yes, run away now",
            "I'll meet you when you're out",
            "Of the church, at the back door",
            "Don't wait or say a single vow",
            "You need to hear me out",
            'And they said, "Speak now"',
            "Don't say yes, run away now (Run away now)",
            "I'll meet you when you're out",
            "Of the church, at the back door",
            "Don't wait or say a single vow (Say a single vow)",
            "Your time is running out",
            'And they said, "Speak now"',
            "Ooh (Run away now), la",
            "Ooh (Say a single vow), ooh",
            "I hear the preacher say",
            '"Speak now or forever hold your peace"',
            "There's the silence, there's my last chance",
            "I stand up with shaky hands, all eyes on me",
            "Horrified looks from everyone in the room",
            "But I'm only lookin' at you",
            "I am not the kind of girl",
            "Who should be rudely bargin' in on a white veil occasion",
            "But you are not the kind of boy",
            "Who should be marrying the wrong girl, ha-ha",
            "So, don't say yes, run away now",
            "I'll meet you when you're out",
            "Of the church, at the back door",
            "Don't wait or say a single vow",
            "You need to hear me out",
            'They said, "Speak now"',
            `And you say, "Let's run away now (Run away now)`,
            "I'll meet you when I'm out",
            "Of my tux, at the back door",
            "Baby, I didn't say my vows (Say a single vow)",
            "So glad you were around",
            "When they said, 'Speak now'"
          ]
        },
        {
          title: "Dear John",
          lines: [
            "Long were the nights",
            "When my days once revolved around you",
            "Counting my footsteps",
            "Prayin' the floor won't fall through again",
            "And my mother accused me of losin' my mind",
            "But I swore I was fine",
            "You paint me a blue sky",
            "Then go back and turn it to rain",
            "And I lived in your chess game",
            "But you change the rules every day",
            "Wonderin' which version of you",
            "I might get on the phone tonight",
            "Well, I stopped pickin' up",
            "And this song is to let you know why",
            "Dear John, I see it all now that you're gone",
            "Don't you think I was too young to be messed with?",
            "The girl in the dress cried the whole way home",
            "I shoulda known",
            "Well, maybe it's me and my blind optimism to blame",
            "Or maybe it's you and your sick need",
            "To give love and take it away",
            "And you'll add my name to your long list of traitors",
            "Who don't understand",
            "And I'll look back and regret how I ignored when they said",
            '"Run as fast as you can"',
            "Dear John, I see it all now that you're gone",
            "Don't you think I was too young to be messed with?",
            "The girl in the dress cried the whole way home",
            "Dear John, I see it all now, it was wrong",
            "Don't you think nineteen's too young to be played by",
            "Your dark, twisted games when I loved you so?",
            "I shoulda known",
            `You are an expert at "Sorry" and keepin' lines blurry`,
            "Never impressed by me acing your tests",
            "All the girls that you run dry have tired, lifeless eyes",
            "'Cause you burned them out",
            "But I took your matches before fire could catch me",
            "So don't look now",
            "I'm shining like fireworks over your sad, empty town",
            "Oh",
            "Dear John, I see it all now that you're gone",
            "Don't you think I was too young to be messed with?",
            "The girl in the dress cried the whole way home",
            "I see it all now that you're gone",
            "Don't you think I was too young to be messed with?",
            "The girl in the dress wrote you a song",
            "You shoulda known",
            "You shoulda known",
            "Don't you think I was too young?",
            "You shoulda known"
          ]
        },
        {
          title: "Mean",
          lines: [
            "You, with your words like knives",
            "And swords and weapons that you use against me",
            "You have knocked me off my feet again",
            "Got me feelin' like a nothing",
            "You, with your voice like nails on a chalkboard",
            "Calling me out when I'm wounded",
            "You, pickin' on the weaker man",
            "Well, you can take me down",
            "With just one single blow",
            "But you don't know what you don't know",
            "Someday, I'll be livin' in a big ole city",
            "And all you're ever gonna be is mean",
            "Someday, I'll be big enough so you can't hit me",
            "And all you're ever gonna be is mean",
            "Why you gotta be so mean?",
            "You, with your switching sides",
            "And your wildfire lies and your humiliation",
            "You have pointed out my flaws again",
            "As if I don't already see them",
            "I walk with my head down, trying to block you out",
            "'Cause I'll never impress you",
            "I just wanna feel okay again",
            "I bet you got pushed around",
            "Somebody made you cold",
            "But the cycle ends right now",
            "'Cause you can't lead me down that road",
            "And you don't know what you don't know",
            "Someday, I'll be livin' in a big ole city",
            "And all you're ever gonna be is mean",
            "Someday, I'll be big enough so you can't hit me",
            "And all you're ever gonna be is mean",
            "Why you gotta be so mean?",
            "And I can see you years from now in a bar",
            "Talking over a football game",
            "With that same big, loud opinion, but nobody's listening",
            "Washed up and ranting about the same ole bitter things",
            "Drunk and grumbling on about how I can't sing",
            "But all you are is mean",
            "All you are is mean",
            "And a liar, and pathetic",
            "And alone in life, and mean",
            "And mean, and mean, and mean",
            "But someday, I'll be livin' in a big ole city",
            "And all you're ever gonna be is mean, yeah",
            "Someday, I'll be big enough so you can't hit me",
            "And all you're ever gonna be is mean",
            "Why you gotta be so mean?",
            "Someday, I'll be livin' in a big ole city",
            "(Why you gotta be so mean?)",
            "And all you're ever gonna be is mean",
            "(Why you gotta be so mean?)",
            "Someday, I'll be big enough so you can't hit me",
            "(Why you gotta be so mean?)",
            "And all you're ever gonna be is mean",
            "Why you gotta be so mean?"
          ]
        },
        {
          title: "The Story Of Us",
          lines: [
            "I used to think one day we'd tell the story of us",
            "How we met and the sparks flew instantly",
            `And people would say, "They're the lucky ones"`,
            "I used to know my place was the spot next to you",
            "Now I'm searchin' the room for an empty seat",
            "'Cause lately I don't even know what page you're on",
            "Oh, a simple complication",
            "Miscommunications lead to fallout",
            "So many things that I wish you knew",
            "So many walls up, I can't break through",
            "Now I'm standin' alone in a crowded room",
            "And we're not speakin'",
            "And I'm dyin' to know, is it killin' you",
            "Like it's killin' me? Yeah",
            "I don't know what to say since the twist of fate",
            "When it all broke down",
            "And the story of us looks a lot like a tragedy now",
            "Next chapter",
            "How'd we end up this way?",
            "See me nervously pulling at my clothes and tryin' to look busy",
            "And you're doin' your best to avoid me",
            "I'm starting to think one day I'll tell the story of us",
            "How I was losin' my mind when I saw you here",
            "But you held your pride like you should've held me",
            "Oh, I'm scared to see the ending",
            "Why are we pretending this is nothin'?",
            "I'd tell you I miss you, but I don't know how",
            "I've never heard silence quite this loud",
            "Now I'm standin' alone in a crowded room",
            "And we're not speakin'",
            "And I'm dyin' to know, is it killin' you",
            "Like it's killin' me? Yeah",
            "I don't know what to say since the twist of fate",
            "When it all broke down",
            "And the story of us looks a lot like a tragedy now",
            "This is looking like a contest",
            "Of who can act like they care less",
            "But I liked it better when you were on my side",
            "The battle's in your hands now",
            "But I would lay my armor down",
            "If you said you'd rather love than fight",
            "So many things that you wish I knew",
            "But the story of us might be ending soon",
            "Now I'm standin' alone in a crowded room",
            "And we're not speakin'",
            "And I'm dyin' to know, is it killin' you",
            "Like it's killin' me? Yeah",
            "And I don't know what to say since the twist of fate",
            "When it all broke down",
            "And the story of us looks a lot like a tragedy now, now, now",
            "And we're not speakin'",
            "And I'm dyin' to know, is it killin' you",
            "Like it's killin' me? Yeah",
            "I don't know what to say since the twist of fate",
            "'Cause we're goin' down",
            "And the story of us looks a lot like a tragedy now",
            "The end"
          ]
        },
        {
          title: "Never Grow Up",
          lines: [
            "Your little hand's wrapped around my finger",
            "And it's so quiet in the world tonight",
            "Your little eyelids flutter 'cause you're dreaming",
            "So I tuck you in, turn on your favorite nightlight",
            "To you, everything's funny",
            "You got nothing to regret",
            "I'd give all I have, honey",
            "If you could stay like that",
            "Oh, darling, don't you ever grow up",
            "Don't you ever grow up, just stay this little",
            "Oh, darling, don't you ever grow up",
            "Don't you ever grow up, it could stay this simple",
            "I won't let nobody hurt you",
            "Won't let no one break your heart",
            "And no one will desert you",
            "Just try to never grow up",
            "And never grow up",
            "You're in the car, on the way to the movies",
            "And you're mortified your mom's droppin' you off",
            "At fourteen, there's just so much you can't do",
            "And you can't wait to move out someday and call your own shots",
            "But don't make her drop you off around the block",
            "Remember that she's gettin' older, too",
            "And don't lose the way that you dance around",
            "In your PJs getting ready for school",
            "Oh, darling, don't you ever grow up",
            "Don't you ever grow up, just stay this little",
            "Oh, darling, don't you ever grow up",
            "Don't you ever grow up, it could stay this simple",
            "And no one's ever burned you",
            "Nothing's ever left you scarred",
            "And even though you want to",
            "Just try to never grow up",
            "Take pictures in your mind of your childhood room",
            "Memorize what it sounded like when your dad gets home",
            "Remember the footsteps, remember the words said",
            "And all your little brother's favorite songs",
            "I just realized everything I have is, someday, gonna be gone",
            "So, here I am in my new apartment",
            "In a big city, they just dropped me off",
            "It's so much colder than I thought it would be",
            "So I tuck myself in and turn my nightlight on",
            "Wish I'd never grown up",
            "Wish I'd never grown up",
            "Oh, I don't wanna grow up",
            "Wish I'd never grown up, I could still be little",
            "Oh, I don't wanna grow up",
            "Wish I'd never grown up, it could still be simple",
            "Oh, darling, don't you ever grow up",
            "Don't you ever grow up, just stay this little",
            "Oh, darling, don't you ever grow up",
            "Don't you ever grow up, it could stay this simple",
            "I won't let nobody hurt you (Never grow up)",
            "Won't let no one break your heart",
            "And even though you want to",
            "Please, try to never grow up",
            "Oh, oh (Never grow up)",
            "Just never grow up",
            "Oh (Never grow up)",
            "Just never grow up"
          ]
        },
        {
          title: "Enchanted",
          lines: [
            "There I was again tonight",
            "Forcing laughter, faking smiles",
            "Same old tired, lonely place",
            "Walls of insincerity",
            "Shifting eyes and vacancy",
            "Vanished when I saw your face",
            "All I can say is it was enchanting to meet you",
            'Your eyes whispered, "Have we met?"',
            "Across the room, your silhouette",
            "Starts to make its way to me",
            "The playful conversation starts",
            "Counter all your quick remarks",
            "Like passing notes in secrecy",
            "And it was enchanting to meet you",
            "All I can say is I was enchanted to meet you",
            "This night is sparklin', don't you let it go",
            "I'm wonderstruck, blushin' all the way home",
            "I'll spend forever wonderin' if you knew",
            "I was enchanted to meet you",
            "The lingering question kept me up",
            "2AM, who do you love?",
            "I wonder 'til I'm wide awake",
            "And now, I'm pacing back and forth",
            "Wishing you were at my door",
            "I'd open up and you would say",
            '"Hey, it was enchanting to meet you"',
            "All I know is I was enchanted to meet you",
            "This night is sparklin', don't you let it go",
            "I'm wonderstruck, blushin' all the way home",
            "I'll spend forever wonderin' if you knew",
            "This night is flawless, don't you let it go",
            "I'm wonderstruck, dancing around all alone",
            "I'll spend forever wonderin' if you knew",
            "I was enchanted to meet you",
            "This is me praying that",
            "This was the very first page",
            "Not where the storyline ends",
            "My thoughts will echo your name",
            "Until I see you again",
            "These are the words I held back",
            "As I was leaving too soon",
            "I was enchanted to meet you",
            "Please, don't be in love with someone else",
            "Please, don't have somebody waitin' on you",
            "Please, don't be in love with someone else (Ooh)",
            "Please, don't have somebody waitin' on you (Oh-oh)",
            "This night is sparklin', don't you let it go",
            "I'm wonderstruck, blushin' all the way home",
            "I'll spend forever wonderin' if you knew",
            "This night is flawless (Please, don't be in love with someone else)",
            "Don't you let it go",
            "I'm wonderstruck (Please, don't have somebody waitin' on you)",
            "Dancing around all alone",
            "I'll spend forever (Please, don't be in love with someone else)",
            "Wonderin' if you knew",
            "I was enchanted to meet you",
            "Please, don't be in love with someone else",
            "Please, don't have somebody waitin' on you"
          ]
        },
        {
          title: "Better Than Revenge",
          lines: [
            "Now go stand in the corner and think about what you did (Ha)",
            "ha-ha, time for a little revenge",
            "The story starts when it was hot and it was summer, and",
            "I had it all, I had him right there where I wanted him",
            "She came along, got him alone, and let's hear the applause",
            'She took him faster than you can say "Sabotage"',
            "I never saw it coming, wouldn't have suspected it",
            "I underestimated just who I was dealing with (Oh)",
            "She had to know the pain was beating on me like a drum",
            "She underestimated just who she was stealin' from",
            "She's not a saint and she's not what you think",
            "She's an actress, woah",
            "He was a moth to the flame",
            "She was holding the matches, woah",
            "Soon, she's gonna find stealing other people's toys",
            "On the playground won't make you many friends",
            "She should keep in mind, she should keep in mind",
            "There is nothing I do better than revenge (Revenge), ha",
            "She looks at life like it's a party and she's on the list",
            "She looks at me like I'm a trend and she's so over it",
            "I think her ever-present frown is a little troubling, and",
            "She thinks I'm psycho 'cause I like to rhyme her name with things",
            "But sophistication isn't what you wear or who you know",
            "Or pushing people down to get you where you wanna go",
            "They didn't teach you that in prep school so it's up to me",
            "That no amount of vintage dresses gives you dignity",
            "(Think about what you did)",
            "She's not a saint and she's not what you think",
            "She's an actress, woah",
            "He was a moth to the flame",
            "She was holding the matches, woah",
            "Soon, she's gonna find stealing other people's toys",
            "On the playground won't make you many friends",
            "She should keep in mind, she should keep in mind",
            "There is nothing I do better than revenge (ha-ha)",
            "I'm just another thing for you to roll your eyes at, honey",
            "You might have him, but haven't you heard?",
            "I'm just another thing for you to roll your eyes at, honey",
            "You might have him, but I always get the last word",
            "Woah (Come on, can you take it back? Come on)",
            "She's not a saint and she's not what you think (No)",
            "She's an actress, woah (You know that you deserve this)",
            "He was a moth to the flame",
            "She was holding the matches, woah",
            "Soon, she's gonna find stealing other people's toys",
            "On the playground won't make you many friends",
            "She should keep in mind, she should keep in mind",
            "There is nothing I do better than revenge",
            "(Come on) Do you still feel like you know what you're doin'?",
            "'Cause I don't think you do, oh (No, no, no, no)",
            "Do you still feel like you know what you're doing? (No)",
            "I don't think you do, I don't think you do",
            "Let's hear the applause (Come on, come on)",
            "Come on, show me how much better you are (Oh, oh)",
            "(So much better, yeah?)",
            "So you deserve some applause",
            "'Cause you're so much better",
            'She took him faster than you could say "Sabotage"'
          ]
        },
        {
          title: "Innocent",
          lines: [
            "I guess you really did it this time",
            "Left yourself in your war path",
            "Lost your balance on a tightrope",
            "Lost your mind tryin' to get it back",
            "Wasn't it easier in your lunchbox days?",
            "Always a bigger bed to crawl into",
            "Wasn't it beautiful when you believed in everything",
            "And everybody believed in you?",
            "It's alright, just wait and see",
            "Your string of lights are still bright to me, oh",
            "Who you are is not where you've been",
            "You're still an innocent",
            "You're still an innocent",
            "Did some things you can't speak of",
            "But at night, you live it all again",
            "You wouldn't be shattered on the floor now",
            "If only you had seen what you know now then",
            "Wasn't it easier in your firefly-catching days?",
            "When everything out of reach",
            "Someone bigger brought down to you",
            "Wasn't it beautiful running wild 'til you fell asleep",
            "Before the monsters caught up to you?",
            "It's alright, just wait and see",
            "Your string of lights are still bright to me, oh",
            "Who you are is not where you've been",
            "You're still an innocent",
            "It's okay, life is a tough crowd",
            "Thirty-two and still growing up now",
            "Who you are is not what you did",
            "You're still an innocent",
            "Time turns flames to embers",
            "You'll have new Septembers",
            "Every one of us has messed up, too, ooh",
            "Minds change like the weather",
            "I hope you remember",
            "Today is never too late to be brand new",
            "Oh, oh",
            "It's alright, just wait and see",
            "Your string of lights is still bright to me, oh",
            "Who you are is not where you've been",
            "You're still an innocent",
            "It's okay, life is a tough crowd",
            "Thirty-two and still growing up now",
            "Who you are is not what you did",
            "You're still an innocent",
            "You're still an innocent",
            "Lost your balance on a tightrope, oh",
            "It's never too late to get it back"
          ]
        },
        {
          title: "Haunted",
          lines: [
            "You and I walk a fragile line",
            "I have known it all this time",
            "But I never thought I'd live to see it break",
            "It's getting dark and it's all so quiet",
            "And I can't trust anything now",
            "And it's coming over you like it's all a big mistake",
            "Oh, holding my breath",
            "Won't lose you again",
            "Something's made your eyes go cold",
            "Come on, come on, don't leave me like this",
            "I thought I had you figured out",
            "Something's gone terribly wrong",
            "You're all I wanted",
            "Come on, come on, don't leave me like this",
            "I thought I had you figured out",
            "Can't breathe whenever you're gone",
            "Can't turn back now, I'm haunted",
            "Stood there and watched you walk away",
            "From everything we had",
            "But I still mean every word I said to you",
            "He will try to take away my pain",
            "And he just might make me smile",
            "But the whole time, I'm wishing he was you instead",
            "Oh, holding my breath",
            "Won't see you again",
            "Something keeps me holding onto nothing",
            "Come on, come on, don't leave me like this",
            "I thought I had you figured out",
            "Something's gone terribly wrong",
            "You're all I wanted",
            "Come on, come on, don't leave me like this",
            "I thought I had you figured out",
            "Can't breathe whenever you're gone",
            "Can't turn back now, I'm haunted",
            "I know, I know",
            "I just know",
            "You're not gone",
            "You can't be gone, no",
            "Come on, come on, don't leave me like this",
            "I thought I had you figured out",
            "Something's gone terribly wrong (Terribly wrong)",
            "Won't finish what you started",
            "Come on, come on, don't leave me like this",
            "I thought I had you figured out",
            "Can't breathe whenever you're gone",
            "I can't go back, I'm haunted",
            "Oh",
            "You and I walk a fragile line",
            "I have known it all this time",
            "Never ever thought I'd see it break",
            "Never thought I'd see it"
          ]
        },
        {
          title: "Last Kiss",
          lines: [
            "I still remember the look on your face",
            "Lit through the darkness at 1:58",
            "The words that you whispered for just us to know",
            "You told me you loved me, so why did you go away?",
            "Away",
            "I do recall now, the smell of the rain",
            "Fresh on the pavement, I ran off the plane",
            "That July ninth, the beat of your heart",
            "It jumps through your shirt, I can still feel your arms",
            "But now I'll go",
            "Sit on the floor wearin' your clothes",
            "All that I know is I don't know",
            "How to be somethin' you miss",
            "I never thought we'd have a last kiss",
            "I never imagined we'd end like this",
            "Your name, forever the name on my lips",
            "I do remember the swing of your step",
            "The life of the party, you're showin' off again",
            "And I'd roll my eyes and then you'd pull me in",
            "I'm not much for dancin', but for you, I did",
            "Because I love your handshake meetin' my father",
            "I love how you walk with your hands in your pockets",
            "How you'd kiss me when I was in the middle of saying something",
            "There's not a day I don't miss those rude interruptions",
            "And I'll go",
            "Sit on the floor wearin' your clothes",
            "All that I know is I don't know",
            "How to be somethin' you miss",
            "I never thought we'd have a last kiss",
            "I never imagined we'd end like this",
            "Your name, forever the name on my lips, mmm",
            "So I'll watch your life in pictures like I used to watch you sleep",
            "And I feel you forget me like I used to feel you breathe",
            "And I'll keep up with our old friends just to ask them how you are",
            "Hope it's nice where you are",
            "And I hope the sun shines and it's a beautiful day",
            "And something reminds you you wish you had stayed",
            "You can plan for a change in the weather and time",
            "But I never planned on you changing your mind",
            "So I'll go",
            "Sit on the floor wearin' your clothes",
            "All that I know is I don't know",
            "How to be somethin' you miss",
            "I never thought we'd have a last kiss",
            "I never imagined we'd end like this",
            "Your name, forever the name on my lips",
            "Just like our last kiss",
            "Forever the name on my lips",
            "Forever the name on my lips",
            "Just like our last"
          ]
        },
        {
          title: "Long Live",
          lines: [
            'I said, "Remember this moment"',
            "In the back of my mind",
            "The time we stood with our shaking hands",
            "The crowds in stands went wild",
            "We were the kings and the queens",
            "And they read off our names",
            "The night you danced like you knew our lives",
            "Would never be the same",
            "You held your head like a hero",
            "On a history book page",
            "It was the end of a decade",
            "But the start of an age",
            "Long live the walls we crashed through",
            "How the kingdom lights shined just for me and you",
            'I was screaming, "Long live all the magic we made"',
            "And bring on all the pretenders",
            "One day, we will be remembered",
            'I said, "Remember this feeling"',
            "I pass the pictures around",
            "Of all the years that we stood there on the sidelines",
            "Wishin' for right now",
            "We are the kings and the queens",
            "You traded your baseball cap for a crown",
            "When they gave us our trophies",
            "And we held them up for our town",
            "And the cynics were outraged",
            'Screaming, "This is absurd"',
            "'Cause for a moment, a band of thieves",
            "In ripped up jeans got to rule the world",
            "Long live the walls we crashed through",
            "How the kingdom lights shined just for me and you",
            'I was screaming, "Long live all the magic we made"',
            "And bring on all the pretenders, I'm not afraid",
            "Long live all the mountains we moved",
            "I had the time of my life fighting dragons with you",
            'I was screaming, "Long live that look on your face"',
            "And bring on all the pretenders",
            "One day, we will be remembered",
            "Hold on to spinning around",
            "Confetti falls to the ground",
            "May these memories break our fall",
            "Will you take a moment? Promise me this",
            "That you'll stand by me forever",
            "But if, God forbid, fate should step in",
            "And force us into a goodbye",
            "If you have children some day",
            "When they point to the pictures",
            "Please, tell 'em my name",
            "Tell 'em how the crowds went wild",
            "Tell 'em how I hope they shine",
            "Long live the walls we crashed through",
            "I had the time of my life with you",
            "Long, long live the walls we crashed through",
            "How the kingdom lights shined just for me and you",
            'And I was screaming, "Long live all the magic we made"',
            "And bring on all the pretenders, I'm not afraid",
            'Singing, "Long live all the mountains we moved"',
            "I had the time of my life fighting dragons with you",
            "And long, long live that look on your face",
            "And bring on all the pretenders",
            "One day, we will be remembered"
          ]
        },
        {
          title: "Ours",
          lines: [
            "Elevator buttons and morning air",
            "Strangers' silence makes me want to take the stairs",
            "If you were here, we'd laugh about their vacant stares",
            "But right now, my time is theirs",
            "Seems like there's always someone who disapproves",
            "They'll judge it like they know about me and you",
            "And the verdict comes from those with nothing else to do",
            "The jury's out, but my choice is you",
            "So don't you worry your pretty little mind",
            "People throw rocks at things that shine",
            "And life makes love look hard",
            "The stakes are high, the water's rough",
            "But this love is ours",
            "You never know what people have up their sleeves",
            "Ghosts from your past gonna jump out at me",
            "Lurking in the shadows with their lip gloss smiles",
            "But I don't care, 'cause right now, you're mine",
            "And you'll say",
            "Don't you worry your pretty little mind",
            "People throw rocks at things that shine",
            "And life makes love look hard",
            "The stakes are high, the water's rough",
            "But this love is ours",
            "And it's not theirs to speculate if it's wrong and",
            "Your hands are tough, but they are where mine belong and",
            "I'll fight their doubt and give you faith with this song for you",
            "'Cause I love the gap between your teeth",
            "And I love the riddles that you speak",
            "And any snide remarks from my father about your tattoos",
            "Will be ignored, 'cause my heart is yours",
            "So don't you worry your pretty little mind",
            "People throw rocks at things that shine",
            "And life makes love look hard",
            "Don't you worry your pretty little mind",
            "People throw rocks at things that shine",
            "But they can't take what's ours",
            "They can't take what's ours",
            "The stakes are high, the water's rough",
            "But this love is ours"
          ]
        },
        {
          title: "Superman",
          lines: [
            "Tall, dark, and superman",
            "He puts papers in his briefcase and drives away",
            "To save the world or go to work",
            "It's the same thing to me",
            "He's got his mother's eyes, his father's ambition",
            "I wonder if he knows how much that I miss him",
            "I hang on every word you say",
            'And you smile and say, "How are you?\u201D',
            `And I'll say, "Just fine"`,
            'I always forget to tell you, "I love you"',
            "I love you forever",
            "I watch Superman fly away",
            "You've got a busy day today",
            "Go save the world, I'll be around",
            "And I watch Superman fly away",
            "Come back, I'll be with you someday",
            "I'll be right here on the ground",
            "When you come back down",
            "Tall, dark and beautiful",
            "He's complicated, he's irrational",
            "But I hope someday you'll take me away, and save the day, yeah",
            "Something in his deep brown eyes has me sayin'",
            "He's not all bad like his reputation",
            "And I can't hear one single word they say",
            "And you'll leave, got places to be, and I'll be okay",
            'I always forget to tell you, "I love you"',
            "I loved you from the very first day",
            "I watch Superman fly away",
            "You've got a busy day today",
            "Go save the world, I'll be around",
            "And I watch Superman fly away",
            "Come back, I'll be with you someday",
            "I'll be right here on the ground",
            "When you come back down",
            "And I watch you fly around the world",
            "And I hope you don't save some other girl",
            "Don't forget, don't forget about me",
            "I'm far away, but I never let you go",
            "I'm love-struck and looking out the window",
            "Don't forget, don't forget where I'll be",
            "Right here, wishing the flowers were from you",
            "Wishing the card was from you",
            "Wishing the call was from you",
            "'Cause I loved you from the very first day",
            "I watch Superman fly away",
            "You've got a busy day today",
            "Go save the world, I'll be around",
            "Forever and ever",
            "And I watch Superman fly away",
            "I swear, I'll be with you someday",
            "I'll be right here on the ground",
            "When you come back down",
            "La, la, la, la, la, la",
            "La, la, la, la, la, la",
            "When you come back down"
          ]
        },
        {
          title: "Electric Touch",
          lines: [
            "Just breathe, just relax, it'll be okay",
            "Just an hour 'til your car's in the driveway",
            "Just the first time ever hangin' out with you tonight",
            "I've got my money on things goin' badly",
            "Got a history of stories ending sadly",
            "Still hoping that the fire won't burn me",
            "Just one time, just one time",
            "All I know is this could either break my heart or bring it back to life",
            "Got a feelin' your electric touch could fill this ghost town up with life",
            "And I want you now, wanna need you forever",
            "In the heat of your electric touch, mmm",
            "I've been left in the rain lost and pining",
            "I'm tryin' hard not to look like I'm trying",
            "'Cause every time I tried hard for love, it fell apart (Woah)",
            "I've gotten used to no one callin' my phone",
            "I've grown accustomed to sleepin' alone",
            "Still, I know that all it takes is to get it right",
            "Just one time, just one time",
            "All I know is this could either break my heart or bring it back to life",
            "Got a feelin' your electric touch could fill this ghost town up with life",
            "And I want you now, wanna need you forever",
            "In the heat of your electric touch, mmm",
            "I was thinking just one time (Just one time)",
            "Maybe the stars align (Just one time)",
            "And maybe I call you mine",
            "And you won't need space",
            "Or string me along while you decide",
            "And just one time (Just one time)",
            "Maybe the moment's right (The moment's right)",
            "It's 8:05 and I see two headlights",
            "All I know is this could either break my heart or bring it back to life",
            "Got a feelin' your electric touch (Ooh)",
            "All I know is this could either break my heart or bring it back to life",
            "Got a feelin' your electric touch could fill this ghost town up with life (Life)",
            "And I want you now, wanna need you forever",
            "In the heat of your electric touch, mmm"
          ]
        },
        {
          title: "When Emma Falls In Love",
          lines: [
            "When Emma falls in love, she paces the floor",
            "Closes the blinds and locks the door",
            "When Emma falls in love, she calls up her mom",
            "Jokes about the ways that this one could go wrong",
            "She waits and takes her time",
            "'Cause Little-Miss-Sunshine always thinks it's gonna rain",
            "When Emma falls in love, I know",
            "That boy will never be the same",
            "'Cause she's the kind of book that you can't put down",
            "Like if Cleopatra grew up in a small town",
            "And all the bad boys would be good boys",
            "If they only had a chance to love her",
            "And to tell you the truth, sometimes I wish I was her",
            "When Emma falls in love, it's all on her face",
            "Hangs in the air like stars in outer space",
            "When Emma falls in love, she disappears",
            "And we all just laugh after seein' it all these years",
            "When Emma falls apart, it's when she's alone",
            "She takes on the pain and bears it on her own",
            "'Cause when Emma falls in love, she's in it for keeps",
            "She won't walk away unless she knows she absolutely has to leave",
            "And she's the kind of book that you can't put down",
            "Like if Cleopatra grew up in a small town",
            "And all the bad boys would be good boys",
            "If they only had a chance to love her",
            "And to tell you the truth, sometimes I wish I was her",
            "Well, she's so New-York when she's in L.A.",
            "She won't lose herself in love the way that I did",
            "'Cause she'll call you out, she'll put you in your place",
            "When Emma falls in love, I'm learning",
            "Emma met a boy with eyes like a man",
            "Turns out her heart fits right in the palm of his hand",
            "Now he'll be her shelter when it rains",
            "Little does he know, his whole world's about to change",
            "'Cause she's the kind of book that you can't put down",
            "Like if Cleopatra grew up in a small town",
            "And all the bad boys would be good boys",
            "If they only had a chance to love her",
            "And to tell you the truth, sometimes I wish I was her",
            "Yeah, between me and you, sometimes I wish I was her"
          ]
        },
        {
          title: "I Can See You",
          lines: [
            "I-I-I-I",
            "You brush past me in the hallway",
            "And you don't think I, I, I can see ya, do ya?",
            "I've been watchin' you for ages",
            "And I spend my time tryin' not to feel it",
            "But what would you do if I went to touch you now?",
            "What would you do if they never found us out?",
            "What would you do if we never made a sound?",
            "'Cause I can see you waitin' down the hall from me",
            "And I could see you up against the wall with me",
            "And what would you do? Baby, if you only knew",
            "That I can see you",
            "I-I-I-I",
            "And we kept everything professional",
            "But something's changed, it's somethin' I, I like",
            "They keep watchful eyes on us",
            "So it's best that we move fast and keep quiet",
            "You won't believe half the things I see inside my head",
            "Wait 'til you see half the things that haven't happened yet",
            "But what would you do if I went to touch you now?",
            "What would you do if they never found us out?",
            "What would you do if we never made a sound?",
            "'Cause I can see you waitin' down the hall from me",
            "And I could see you up against the wall with me",
            "And what would you do? Baby, if you only knew, oh, oh, oh",
            "That I could see you throw your jacket on the floor",
            "I could see you, make me want you even more",
            "What would you do? Baby, if you only knew",
            "That I can see you",
            "I-I-I-I",
            "I can see you in your suit and your necktie",
            `Passed me a note sayin', "Meet me tonight"`,
            "Then we kiss and you know I won't ever tell, yeah",
            "And I could see you being my addiction",
            "You can see me as a secret mission",
            "Hide away and I will start behaving myself",
            "I-I-I-I",
            "Oh-oh, oh, oh",
            "I can see you waitin' down the hall from me",
            "And I could see you up against the wall with me",
            "And what would you do? Baby, if you only knew, oh",
            "That I could see you throw your jacket on the floor",
            "I could see you, make me want you even more",
            "What would you do? Baby, if you only knew",
            "That I can see you, oh, I can see you",
            "Oh, I see you, I see you, baby",
            "I see you",
            "(I-I-I-I) I see you, I see you, baby",
            "Oh, baby"
          ]
        },
        {
          title: "Castles Crumbling",
          lines: [
            "(Once, I had an empire)",
            "(Once, I had an empire)",
            "(Once, I had an empire)",
            "Once, I had an empire in a golden age",
            "I was held up so high, I used to be great",
            "They used to cheer when they saw my face",
            "Now, I fear I have fallen from grace",
            "And I feel like my castle's crumbling down",
            "And I watch all my bridges burn to the ground",
            "And you don't want to know me, I will just let you down",
            "You don't wanna know me now",
            "Once, I was the great hope for a dynasty",
            "Crowds would hang on my words and they trusted me",
            "Their faith was strong, but I pushed it too far",
            "I held that grudge 'til it tore me apart",
            "Power went to my head and I couldn't stop",
            "Ones I loved tried to help, so I ran them off",
            "And here I sit alone behind walls of regret",
            "Falling down like promises that I never kept",
            "And I feel like my castle's crumbling down",
            "And I watch all my bridges burn to the ground",
            "And you don't want to know me, I will just let you down",
            "You don't wanna know me now",
            "My foes and friends watch my reign end",
            "I don't know how it could've ended this way",
            "Smoke billows from my ships in the harbor",
            "People look at me like I'm a monster",
            "Now they're screamin' at the palace front gates",
            "Used to chant my name",
            "Now they're screaming that they hate me",
            "Never wanted you to hate me",
            "My castle's crumbling down",
            "And I watch all my bridges burn to the ground",
            "And you don't want to know me, I will just let you down (Just let you down)",
            "My castle's crumbling down",
            "You don't wanna know me now, now",
            "(Once, I had an empire)",
            "(Once, I had an empire)",
            "(Once, I had an empire)"
          ]
        },
        {
          title: "Foolish One",
          lines: [
            "My cards are on the table, yours are in your hand",
            "Chances are, tonight, you've already got plans",
            "And chances are I will talk myself to sleep again",
            "You give me just enough attention to keep my hopes too high",
            "Wishful thoughts forget to mention when something's really not right",
            "And I will block out these voices of reason in my head",
            'And the voices say, "You are not the exception',
            'You will never learn your lesson"',
            "Foolish one",
            "Stop checkin' your mailbox for confessions of love",
            "That ain't never gonna come",
            "You will take the long way, you will take the long way down",
            "You know how to keep me waitin'",
            "I know how to act like I'm fine",
            "Don't know what to call this situation",
            "But I know I can't call you mine",
            "And it's delicate, but I will do my best to seem bulletproof",
            "'Cause when my head is on your shoulder",
            "It starts thinkin' you'll come around",
            "And maybe, someday, when we're older",
            "This is something we'll laugh about",
            "Over coffee every mornin' while you're watching the news",
            'But then the voices say, "You are not the exception',
            'You will never learn your lesson"',
            "Foolish one",
            "Stop checkin' your mailbox for confessions of love",
            "That ain't never gonna come",
            "You will take the long way, you will take the long way down",
            "Foolish one",
            "Stop checkin' your mailbox for confessions of love",
            "That ain't never gonna come",
            "You will learn the hard way instead of just walkin' out",
            "Now I'm slidin' down the wall with my head in my hands",
            `Sayin', "How could I not see the signs?"`,
            "Oh, you haven't written me or called",
            "But goodbye screamin' in the silence",
            "And the voices in my head are tellin' me why",
            "'Cause you got her on your arm and me in the wings",
            "I'll get your longing glances, but she'll get your ring",
            "And you will say you had the best of intentions",
            "And maybe I will finally learn my lesson",
            "Foolish one",
            "Stop checkin' your mailbox for confessions of love",
            "That ain't never gonna come",
            "You will take the long way, you will take the long way down",
            "Foolish one",
            "Stop checkin' your mailbox for confessions of love",
            "That ain't never gonna come",
            "You will learn the hard way instead of just walkin' out, oh-oh, oh, oh",
            "La-la-la-la-la, la-la-la-la, oh",
            "La-la-la-la-la",
            "Ain't never gonna come",
            "Ooh, you will learn the hard way now",
            "Foolish one",
            "Sittin' 'round waiting for confessions of love",
            "They ain't never gonna come",
            "And thinkin' he's the one, you should've been walkin' out",
            "Foolish one",
            "The day is gonna come for your confessions of love",
            "When all is said and done, he just wasn't the one",
            "No, he just wasn't the one"
          ]
        },
        {
          title: "Timeless",
          lines: [
            "Down the block, there's an antique shop",
            'And something in my head said, "Stop," so I walked in',
            "On the counter was a cardboard box",
            'And the sign said, "Photos: twenty-five cents each"',
            "Black and white, saw a 30s bride",
            "And school lovers laughin' on the porch of their first house",
            "The kinda love that you only find once in a lifetime",
            "The kind you don't put down",
            "And that's when I called you and it's so hard to explain",
            "But in those photos, I saw us instead",
            "And, somehow, I know that you and I would've found each other",
            "In another life, you still would've turned my head even if we'd met",
            "On a crowded street in 1944",
            "And you were headed off to fight in the war",
            "You still would've been mine",
            "We would have been timeless",
            "I would've read your love letters every single night",
            "And prayed to God you'd be comin' home all right",
            "And you would've been fine",
            "We would have been timeless",
            "'Cause I believe that we were supposed to find this",
            "So, even in a different life, you still would've been mine",
            "We would've been timeless",
            "I had to smile when it caught my eye",
            "There was one of a teenage couple in the driveway",
            "Holdin' hands on the way to a dance",
            "And the date on the back said 1958",
            "Which brought me back to the first time I saw you",
            "Time stood still like somethin' in this old shop",
            "I thought about it as I started lookin' 'round",
            "At these precious things that time forgot",
            "That's when I came upon a book covered in cobwebs",
            "Story of a romance torn apart by fate",
            "Hundreds of years ago, they fell in love, like we did",
            "And I'd die for you in the same way if I first saw your face",
            "In the 1500s, off in a foreign land",
            "And I was forced to marry another man",
            "You still would've been mine",
            "We would have been timeless",
            "I would've read your love letters every single night",
            "And run away and left it all behind",
            "You still would've been mine",
            "We would've been timeless",
            "'Cause I believe that we were supposed to find this",
            "So, even in a different life, you still would've been mine",
            "We would've been timeless",
            "Time breaks down your mind and body",
            "Don't you let it touch your soul",
            "It was like an age-old classic",
            "The first time that you saw me",
            'The story started when you said, "Hello"',
            "In a crowded room a few short years ago",
            "And sometimes there's no proof, you just know",
            "You're always gonna be mine",
            "We're gonna be",
            "I'm gonna love you when our hair is turnin' gray",
            "We'll have a cardboard box of photos of the life we've made",
            `And you'll say, "Oh my, we really were timeless"`,
            "We're gonna be timeless, timeless",
            "You still would've been mine",
            "We would've been",
            "Even if we'd met on a crowded street in 1944",
            "You still would've been mine",
            "We would've been",
            "Down the block, there's an antique shop",
            `And somethin' in my head said, "Stop," so I walked in`
          ]
        }
      ]
    },
    {
      title: "Red",
      songs: [
        {
          title: "State Of Grace",
          lines: [
            "I'm walkin' fast through the traffic lights",
            "Busy streets and busy lives",
            "And all we know is touch and go",
            "We are alone with our changing minds",
            "We fall in love 'til it hurts or bleeds or fades in time",
            "And I never (I never)",
            "Saw you comin'",
            "And I'll never (I'll never)",
            "Be the same",
            "You come around and the armor falls",
            "Pierce the room like a cannonball",
            "Now all we know is don't let go",
            "We are alone, just you and me",
            "Up in your room and our slates are clean",
            "Just twin fire signs, four blue eyes",
            "So you were never a saint and I loved in shades of wrong",
            "We learn to live with the pain, mosaic broken hearts",
            "But this love is brave and wild",
            "And I never (I never)",
            "Saw you comin'",
            "And I'll never (I'll never)",
            "Be the same",
            "This is a state of grace",
            "This is the worthwhile fight",
            "Love is a ruthless game",
            "Unless you play it good and right",
            "These are the hands of fate",
            "You're my Achilles-heel",
            "This is the golden age of somethin' good",
            "And right and real",
            "And I never (I never)",
            "Saw you comin'",
            "And I'll never",
            "Be the same, oh-oh-oh",
            "And I never (I never)",
            "Saw you comin'",
            "And I'll never (I'll never)",
            "(So you were never a saint and I loved in shades of wrong)",
            "Be the same (We learn to live with the pain, mosaic broken hearts)",
            "(But this love is brave and wild)",
            "This is a state of grace",
            "This is the worthwhile fight",
            "Love is a ruthless game",
            "Unless you play it good and right"
          ]
        },
        {
          title: "Red",
          lines: [
            "Loving him is like driving a new Maserati down a dead-end street",
            "Faster than the wind, passionate as sin, ending so suddenly",
            "Loving him is like trying to change your mind once you're already flying through the free fall",
            "Like the colors in autumn, so bright just before they lose it all",
            "Losing him was blue like I'd never known",
            "Missing him was dark gray, all alone (Woah)",
            "Forgetting him was like tryin' to know somebody you never met",
            "But loving him was red (Red, red)",
            "(Red, red)",
            "But loving him was red (Red, red)",
            "(Red, red)",
            "Touching him was like realizing all you ever wanted was right there in front of you",
            "Memorizing him was as easy as knowing all the words to your old favorite song",
            "Fighting with him was like trying to solve a crossword and realizing there's no right answer",
            "Regretting him was like wishing you never found out that love could be that strong",
            "Losing him was blue like I'd never known",
            "Missing him was dark gray, all alone (Woah)",
            "Forgetting him was like tryin' to know somebody you never met",
            "But loving him was red (Red, red)",
            "Oh, red (Red, red)",
            "Burning red (Red, red)",
            "(Red, red)",
            "Remembering him comes in flashbacks and echoes",
            "Tell myself it's time now, gotta let go",
            "But moving on from him is impossible when I still see it all in my head",
            "In burning red",
            "Burning, it was red",
            "Oh, losing him was blue like I'd never known",
            "Missing him was dark gray, all alone (Woah)",
            "Forgetting him was like tryin' to know somebody you never met",
            "'Cause loving him was red (Red, red)",
            "Yeah, yeah, red (Red, red)",
            "Oh, burning red (Red, red)",
            "(Red, red)",
            "And that's why he's spinning 'round in my head (Red, red)",
            "Comes back to me, burning red (Red, red)",
            "(Red, red)",
            "Yeah, yeah (Red, red)",
            "His love was like driving a new Maserati down a dead-end street"
          ]
        },
        {
          title: "Treacherous",
          lines: [
            "Put your lips close to mine",
            "As long as they don't touch",
            "Out of focus, eye to eye",
            "'Til the gravity's too much",
            "And I'll do anything you say",
            "If you say it with your hands",
            "And I'd be smart to walk away",
            "But you're quicksand",
            "This slope is treacherous",
            "This path is reckless",
            "This slope is treacherous",
            "And I-I-I like it",
            "I can't decide if it's a choice",
            "Getting swept away",
            "I hear the sound of my own voice",
            "Asking you to stay",
            "All we are is skin and bone",
            "Trained to get along",
            "Forever going with the flow",
            "But you're friction",
            "This slope is treacherous",
            "This path is reckless",
            "This slope is treacherous",
            "I-I-I like it",
            "Two headlights shine through the sleepless night",
            "And I will get you a\u2014 get you alone",
            "Your name has echoed through my mind",
            "And I just think you should\u2014 think you should know",
            "That nothing safe is worth the drive",
            "And I would follow you, follow you home",
            "I'll follow you, follow you home",
            "This hope is treacherous",
            "This daydream is dangerous",
            "This hope is treacherous",
            "I-I-I, I-I-I, I-I-I\u2014",
            "Two headlights shine through the sleepless night",
            "And I will get you a\u2014 get you alone",
            "Your name has echoed through my mind",
            "And I just think you should\u2014 think you should know",
            "That nothing safe is worth the drive",
            "And I will follow you, follow you home",
            "I'll follow you, follow you home",
            "I'll follow you, follow you home",
            "I'll follow you, follow you home",
            "This slope is treacherous",
            "I-I-I like it"
          ]
        },
        {
          title: "I Knew You Were Trouble",
          lines: [
            "Once upon a time, a few mistakes ago",
            "I was in your sights, you got me alone",
            "You found me, you found me, you found me-e-e-e-e",
            "I guess you didn't care and I guess I liked that",
            "And when I fell hard, you took a step back",
            "Without me, without me, without me-e-e-e-e-e",
            "And he's long gone when he's next to me",
            "And I realize the blame is on me",
            "'Cause I knew you were trouble when you walked in",
            "So shame on me now",
            "Flew me to places I'd never been",
            "'Til you put me down, oh",
            "I knew you were trouble when you walked in",
            "So shame on me now",
            "Flew me to places I'd never been",
            "Now I'm lyin' on the cold hard ground",
            "Oh, oh",
            "Trouble, trouble, trouble",
            "Oh, oh",
            "Trouble, trouble, trouble",
            "No apologies, he'll never see you cry",
            "Pretends he doesn't know that he's the reason why",
            "You're drowning, you're drowning, you're drowning-ing-ing-ing-ing",
            "And I heard you moved on from whispers on the street",
            "A new notch in your belt is all I'll ever be",
            "And now I see, now I see, now I see-e-e-e-e-e",
            "He was long gone when he met me",
            "And I realize the joke is on me, hey",
            "I knew you were trouble when you walked in (Oh)",
            "So shame on me now",
            "Flew me to places I'd never been",
            "'Til you put me down, oh",
            "I knew you were trouble when you walked in",
            "So shame on me now",
            "Flew me to places I'd never been (Yeah)",
            "Now I'm lyin' on the cold hard ground",
            "Oh, oh (Yeah)",
            "Trouble, trouble, trouble (Trouble)",
            "Oh, oh",
            "Trouble, trouble, trouble",
            "And the saddest fear",
            "Comes creepin' in",
            "That you never loved me",
            "Or her or anyone or anything, yeah",
            "I knew you were trouble when you walked in",
            "So shame on me now",
            "Flew me to places I'd never been (Never been)",
            "'Til you put me down, oh",
            "I knew you were trouble when you walked in (I knew it right there)",
            "So shame on me now (I knew it right there)",
            "Flew me to places I'd never been (Woah)",
            "Now I'm lyin' on the cold hard ground",
            "Oh, oh",
            "Trouble, trouble, trouble (Oh)",
            "Oh, oh",
            "Trouble, trouble, trouble (Trouble)",
            "'Cause I knew you were trouble when you walked in",
            "Trouble, trouble, trouble",
            "'Cause I knew you were trouble when you walked in",
            "Trouble, trouble, trouble"
          ]
        },
        {
          title: "22",
          lines: [
            "It feels like a perfect night",
            "To dress up like hipsters",
            "And make fun of our exes",
            "Uh-uh, uh-uh",
            "It feels like a perfect night",
            "For breakfast at midnight",
            "To fall in love with strangers",
            "Uh-uh, uh-uh",
            "Yeah",
            "We're happy, free, confused, and lonely at the same time",
            "It's miserable and magical, oh yeah",
            "Tonight's the night when we forget about the deadlines",
            "It's time, oh-oh",
            "I don't know about you",
            "But I'm feelin' twenty-two",
            "Everything will be alright if",
            "You keep me next to you",
            "You don't know about me",
            "But I'll bet you want to",
            "Everything will be alright if",
            "We just keep dancin' like we're",
            "Twenty-two",
            "Twenty-two",
            "It seems like one of those nights",
            "This place is too crowded",
            "Too many cool kids",
            "Uh-uh, uh-uh (Who's Taylor-Swift anyway? Ew)",
            "It seems like one of those nights",
            "We ditch the whole scene",
            "And end up dreamin'",
            "Instead of sleepin'",
            "Yeah",
            "We're happy, free, confused, and lonely in the best way",
            "It's miserable and magical, oh, yeah",
            "Tonight's the night when we forget about the heartbreaks",
            "It's time, oh-oh",
            "(Hey)",
            "I don't know about you",
            "But I'm feelin' twenty-two",
            "Everything will be alright if (Ooh)",
            "You keep me next to you",
            "You don't know about me",
            "But I'll bet you want to",
            "Everything will be alright if (Alright)",
            "We just keep dancin' like we're",
            "Twenty-two (Oh, oh, oh, oh, oh)",
            "Twenty-two (I don't know about you)",
            "Twenty-two",
            "Twenty-two (Ooh)",
            "It feels like one of those nights",
            "We ditch the whole scene",
            "It feels like one of those nights",
            "We won't be sleepin'",
            "It feels like one of those nights",
            "You look like bad news",
            "I gotta have you",
            "I gotta have you",
            "Ooh, oh",
            "Yeah, hey, yeah",
            "(Hey)",
            "I don't know about you (I don't know about you)",
            "But I'm feelin' twenty-two",
            "Everything will be alright if (Ooh, oh-oh)",
            "You keep me next to you",
            "You don't know about me (You don't know about me)",
            "But I'll bet you want to",
            "Everything will be alright if",
            "We just keep dancin' like we're (Dance like we're twenty-two)",
            "Twenty-two (Ooh, woah-oh-oh-oh)",
            "Twenty-two (Dancin' like)",
            "Twenty-two (Yeah, yeah)",
            "Twenty-two (Yeah, yeah, yeah)",
            "It feels like one of those nights (Twenty-two)",
            "We ditch the whole scene",
            "It feels like one of those nights (Twenty-two)",
            "We won't be sleepin'",
            "It feels like one of those nights (Twenty-two)",
            "You look like bad news",
            "I gotta have you",
            "I gotta have you"
          ]
        },
        {
          title: "I Almost Do",
          lines: [
            "I bet, this time of night, you're still up",
            "I bet you're tired from a long, hard week",
            "I bet you're sittin' in your chair by the window lookin' out at the city",
            "And I bet sometimes you wonder 'bout me",
            "And I just wanna tell you",
            "It takes everything in me not to call you",
            "And I wish I could run to you",
            "And I hope you know that",
            "Every time I don't, I almost do",
            "I almost do",
            "I bet you think I either moved on or hate you",
            "'Cause each time you reach out, there's no reply",
            "I bet it never, ever occurred to you",
            "That I can't say hello to you and risk another goodbye",
            "And I just wanna tell you",
            "It takes everything in me not to call you",
            "And I wish I could run to you",
            "And I hope you know that",
            "Every time I don't, I almost do",
            "I almost do",
            "(Ooh)",
            "Oh, we made quite a mess, babe",
            "It's probably better off this way",
            "And I confess, babe",
            "In my dreams, you're touchin' my face",
            "And asking me if I'd wanna try again with you",
            "And I almost do",
            "And I just wanna tell you",
            "It takes everything in me not to call you",
            "And I wish I could run to you",
            "And I hope you know that",
            "Every time I don't, I almost do",
            "I almost do",
            "(Ooh)",
            "I bet, this time of night, you're still up",
            "I bet you're tired from a long, hard week",
            "I bet you're sittin' in your chair by the window lookin' out at the city",
            "And I hope sometimes you wonder 'bout me"
          ]
        },
        {
          title: "We Are Never Ever Getting Back Together",
          lines: [
            "I remember when we broke up the first time",
            `Sayin', "This is it, I've had enough"`,
            "'Cause, like, we hadn't seen each other in a month",
            "When you said you needed space, what?",
            "Then you come around again and say",
            `"Baby, I miss you and I swear I'm gonna change, trust me"`,
            "Remember how that lasted for a day?",
            'I say, "I hate you," we break up, you call me, "I love you"',
            "Ooh, we called it off again last night, but",
            "Ooh, this time, I'm tellin' you, I'm tellin' you",
            "We are never, ever, ever gettin' back together",
            "We are never, ever, ever gettin' back together",
            "You go talk to your friends, talk to my friends, talk to me",
            "But we are never, ever, ever, ever gettin' back together",
            "Like, ever",
            "I'm really gonna miss you pickin' fights",
            "And me fallin' for it, screaming that I'm right",
            "And you would hide away and find your peace of mind",
            "With some indie record that's much cooler than mine (ha-ha)",
            "Ooh, you called me up again tonight, but",
            "Ooh, this time, I'm tellin' you, I'm tellin' you (Oh)",
            "We (We) are never, ever, ever gettin' back together",
            "We are never, ever, ever (Ever) gettin' back together",
            "You go talk to your friends, talk to my friends, talk to me (Talk to me)",
            "But we are never, ever, ever, ever gettin' back together",
            "Ooh (Yeah), ooh (Yeah)",
            "Ooh (Yeah), oh",
            "I used to think that we were forever, ever",
            'And I used to say, "Never say never"',
            `Ugh, so he calls me up and he's, like, "I still love you"`,
            "And I'm, like, I'm just, I mean, this is exhausting, you know?",
            "Like, we are never getting back together",
            "Like, ever (No)",
            "We are never, ever, ever gettin' back together",
            "We are never, ever, ever (Oh) gettin' back together",
            "You go talk to your friends, talk to my friends, talk to me (To me)",
            "But we are never, ever, ever, ever gettin' back together",
            "We (Ooh), no",
            "Gettin' back together (Ooh)",
            "We (Ooh), oh",
            "Gettin' back together (Ooh), yeah",
            "You go talk to your friends, talk to my friends, talk to me (Talk to me)",
            "But we are never, ever, ever, ever gettin' back together"
          ]
        },
        {
          title: "Stay Stay Stay",
          lines: [
            "I'm pretty sure we almost broke up last night",
            "I threw my phone across the room at you",
            "I was expecting some dramatic turn away",
            "But you stayed",
            "This morning, I said we should talk about it",
            "'Cause I read you should never leave a fight unresolved",
            "That's when you came in wearing a football helmet",
            `And said, "Okay, let's talk"`,
            'And I said, "Stay, stay, stay"',
            "I've been loving you for quite some time, time, time",
            "You think that it's funny when I'm mad, mad, mad",
            "But I think that it's best if we both stay",
            "Before you, I'd only dated self-indulgent takers",
            "Who took all of their problems out on me",
            "But you carry my groceries and now I'm always laughing",
            "And I love you because you have given me",
            "No choice but to stay, stay, stay",
            "I've been loving you for quite some time, time, time",
            "You think that it's funny when I'm mad, mad, mad",
            "But I think that it's best if we both stay, stay, stay, stay",
            "You took the time to memorize me",
            "My fears, my hopes and dreams",
            "I just like hanging out with you",
            "All the time",
            "All those times that you didn't leave",
            "It's been occurring to me",
            "I'd like to hang out with you",
            "For my whole life",
            "Stay",
            "And I'll be loving you for quite some time",
            "No one else is gonna love me when I get mad, mad, mad",
            "So I think that it's best if we both stay, stay, stay, stay, stay, stay",
            "Stay, stay, stay",
            "I've been loving you for quite some time, time, time",
            "You think that it's funny when I'm mad, mad, mad",
            "But I think that it's best if we both stay, stay, stay, stay, stay, stay",
            "Stay, stay, stay",
            "I've been loving you for quite some time, time, time",
            "You think that it's funny when I'm mad, mad, mad",
            "But I think that it's best if we both stay",
            "That's so fun"
          ]
        },
        {
          title: "The Last Time",
          lines: [
            "I find myself at your door",
            "Just like all those times before",
            "I'm not sure how I got there",
            "All roads, they lead me here",
            "I imagine you are home",
            "In your room, all alone",
            "And you open your eyes into mine",
            "And everything feels better",
            "And right before your eyes",
            "I'm breakin'",
            "No past, no reasons why",
            "Just you and me",
            "This is the last time I'm askin' you this",
            "Put my name at the top of your list",
            "This is the last time I'm askin' you why",
            "You break my heart in the blink of an eye, eye, eye",
            "You find yourself at my door",
            "And just like all those times before",
            "You wear your best apology",
            "But I was there to watch you leave",
            "And all the times I let you in",
            "Just for you to go again",
            "Disappear when you come back",
            "Everything is better",
            "And right before your eyes",
            "I'm achin'",
            "No past, nowhere to hide",
            "Just you and me",
            "This is the last time I'm askin' you this",
            "Put my name at the top of your list",
            "This is the last time I'm askin' you why",
            "You break my heart in the blink of an eye, eye, eye",
            "This is the last time you tell me I've got it wrong",
            `This is the last time I say, "It's been you all along"`,
            "This is the last time I let you in my door",
            "This is the last time, I won't hurt you anymore",
            "Oh, oh, oh, oh",
            "Oh, oh, oh, oh",
            "This is the last time I'm askin' you this",
            "Put my name at the top of your list",
            "This is the last time I'm askin' you why",
            "You break my heart in the blink of an eye",
            "This is the last time I'm askin' you this (This is the last time I'm askin' you this)",
            "Put my name at the top of your list (Put my name at the top of your list)",
            "This is the last time I'm askin' you why (This is the last time I'm askin' you why)",
            "You break my heart in the blink of an eye (You break my heart)",
            "This is the last time I'm askin' you, last time I'm askin' you",
            "Last time I'm askin' you this",
            "This is the last time I'm askin' you, last time I'm askin' you",
            "Last time I'm askin' you this",
            "This is the last time I'm askin' you, last time I'm askin' you",
            "Last time I'm askin' you this",
            "This is the last time I'm askin' you, last time I'm askin' you",
            "Last time I'm askin' you this"
          ]
        },
        {
          title: "Holy Ground",
          lines: [
            "I was reminiscing just the other day",
            "While havin' coffee all alone and, Lord, it took me away",
            "Back to a first-glance feelin' on New-York time",
            "Back when you fit my poems like a perfect rhyme",
            "Took off faster than a green light, go",
            "Yeah, you skip the conversation when you already know",
            "I left a note on the door with a joke we'd made",
            "And that was the first day",
            "And darlin', it was good",
            "Never lookin' down",
            "And right there where we stood",
            "Was holy ground",
            "Spinnin' like a girl in a brand new dress",
            "We had this big, wide city all to ourselves",
            'We block the noise with the sound of, "I need you"',
            "And for the first time, I had something to lose",
            "And I guess we fell apart in the usual way",
            "And the story's got dust on every page",
            "But, sometimes, I wonder how you think about it now",
            "And I see your face in every crowd",
            "'Cause, darlin', it was good (Ooh-ayy, ooh-ayy)",
            "Never lookin' down (Ooh-ayy, ooh-ayy)",
            "And right there where we stood (Ooh-ayy)",
            "Was holy ground",
            "Ooh-ayy, ooh-ayy, ooh-ayy, oh-woah",
            "Ooh-ayy, ooh-ayy, ooh-ayy, oh-woah",
            "Tonight, I'm gonna dance",
            "For all that we've been through",
            "But I don't wanna dance",
            "If I'm not dancin' with you",
            "Tonight, I'm gonna dance",
            "Like you were in this room",
            "But I don't wanna dance",
            "If I'm not dancin' with you",
            "It was good",
            "I'm never lookin' down",
            "And right there where we stood",
            "Was holy ground",
            "Ooh-ayy, ooh-ayy, ooh-ayy, oh-woah",
            "Ooh-ayy, ooh-ayy, ooh-ayy, oh-woah",
            "Tonight, I'm gonna dance (Ooh-ayy, ooh-ayy)",
            "For all that we've been through (Ooh-ayy, oh-woah)",
            "But I don't wanna dance (Ooh-ayy, ooh-ayy)",
            "If I'm not dancin' with you (Ooh-ayy, oh-woah)",
            "Tonight, I'm gonna dance (Ooh-ayy, ooh-ayy)",
            "Like you were in this room (Ooh-ayy, oh-woah)",
            "But I don't wanna dance (Ooh-ayy, ooh-ayy)",
            "If I'm not dancin' with you"
          ]
        },
        {
          title: "Sad Beautiful Tragic",
          lines: [
            "Long handwritten notes deep in your pocket",
            "Words, how little they mean when you're a little too late",
            "I stood right by the tracks, your face in a locket",
            "Good girls, hopeful they'll be and long they will wait",
            "We had a beautiful, magic love there",
            "What a sad, beautiful, tragic love affair",
            "In dreams, I meet you in warm conversation",
            "And we both wake in lonely beds and different cities",
            "And time is taking its sweet time erasing you",
            "And you've got your demons and, darlin', they all look like me",
            "'Cause we had a beautiful, magic love there",
            "What a sad, beautiful, tragic love affair",
            "Woah, woah, woah, oh",
            "Distance, timin', breakdown, fighting",
            "Silence, the train runs off its tracks",
            "Kiss me, try to fix it, could you just try to listen?",
            "Hang up, give up and, for the life of us, we can't get back",
            "A beautiful, magic love there",
            "What a sad, beautiful, tragic, beautiful, tragic, beautiful",
            "What we had, a beautiful, magic love there",
            "What a sad, beautiful, tragic love affair",
            "We had a beautiful, magic love there",
            "What a sad, beautiful, tragic love affair"
          ]
        },
        {
          title: "The Lucky One",
          lines: [
            "New to town with a made-up name",
            "In the angel's city, chasin' fortune and fame",
            "And the camera flashes make it look like a dream",
            "You had it figured out since you were in school",
            "Everybody loves pretty, everybody loves cool",
            "So overnight, you look like a '60s queen",
            "Another name goes up in lights",
            "Like diamonds in the sky",
            "And they'll tell you now, you're the lucky one",
            "Yeah, they'll tell you now, you're the lucky one",
            "But can you tell me now, you're the lucky one?",
            "Oh, oh, oh",
            "And now, it's big black cars and Riviera views",
            "And your lover in the foyer doesn't even know you",
            "And your secrets end up splashed on the news front page",
            "And they tell you that you're lucky, but you're so confused",
            "'Cause you don't feel pretty, you just feel used",
            "And all the young things line up to take your place",
            "Another name goes up in lights",
            "You wonder if you'll make it out alive",
            "And they'll tell you now, you're the lucky one",
            "Yeah, they'll tell you now, you're the lucky one",
            "Can you tell me now, you're the lucky one?",
            "Oh, oh, oh",
            "Oh, oh, oh",
            "It was a few years later, I showed up here",
            "And they still tell the legend of how you disappeared",
            "How you took the money and your dignity and got the hell out",
            "They say you bought a bunch of land somewhere",
            "Chose the rose garden over Madison-Square",
            "And it took some time, but I understand it now",
            "'Cause now my name is up in lights",
            "But I think you got it right",
            "Let me tell you now, you're the lucky one",
            "Let me tell you now, you're the lucky one",
            "Let me tell you now, you're the lucky one",
            "Oh, oh, oh",
            "Yeah, they'll tell you now, you're the lucky one",
            "Yeah, they'll tell you now, you're the lucky one",
            "Let me tell you now, you're the lucky one",
            "Oh, oh, oh",
            "Oh, oh-woah, oh"
          ]
        },
        {
          title: "Everything Has Changed",
          lines: [
            "You good to go?",
            "All I knew this mornin' when I woke",
            "Is I know something now",
            "Know something now I didn't before",
            "And all I've seen since eighteen hours ago",
            "Is green eyes and freckles and your smile",
            "In the back of my mind makin' me feel like",
            "I just wanna know you better",
            "Know you better, know you better now",
            "I just wanna know you better",
            "Know you better, know you better now",
            "I just wanna know you better",
            "Know you better, know you better now",
            "I just wanna know you",
            "Know you, know you",
            `'Cause all I know is we said, "Hello"`,
            "And your eyes look like comin' home",
            "All I know is a simple name",
            "Everything has changed",
            "All I know is you held the door",
            "You'll be mine and I'll be yours",
            "All I know since yesterday, yeah",
            "Is everything has changed",
            "And all my walls stood tall, painted blue",
            "But I'll take 'em down, take 'em down",
            "And open up the door for you",
            "And all I feel in my stomach is butterflies",
            "The beautiful kind, makin' up for lost time",
            "Takin' flight, makin' me feel like",
            "I just wanna know you better",
            "Know you better, know you better now",
            "I just wanna know you better",
            "Know you better, know you better now",
            "I just wanna know you better",
            "Know you better, know you better now",
            "I just wanna know you",
            "Know you, know you",
            `'Cause all I know is we said, "Hello"`,
            "And your eyes look like comin' home",
            "All I know is a simple name",
            "Everything has changed",
            "All I know is you held the door",
            "You'll be mine and I'll be yours",
            "All I know since yesterday, yeah",
            "Is everything has changed",
            "Come back and tell me why",
            "I'm feelin' like I've missed you all this time (Oh-oh-oh)",
            "And meet me there tonight",
            "And let me know that it's not all in my mind-ind-ind",
            "I just wanna know you better",
            "Know you better, know you better now",
            "I just wanna know you",
            "Know you, know you",
            'All I know is we said, "Hello"',
            "And your eyes look like comin' home",
            "All I know is a simple name",
            "Everything has changed",
            "All I know is you held the door",
            "And you'll be mine and I'll be yours",
            "All I know since yesterday, yeah",
            "Is everything has changed",
            'All I know is we said, "Hello"',
            "So dust off your highest hopes",
            "All I know is pourin' rain",
            "And everything has changed",
            "All I know is a new found grace",
            "All my days, I'll know your face",
            "All I know since yesterday, yeah",
            "Is everything has changed"
          ]
        },
        {
          title: "Starlight",
          lines: [
            'I said, "Oh my, what a marvelous tune"',
            "It was the best night, never would forget how he moved",
            "The whole place was dressed to the nines",
            "And we were dancin', dancin'",
            "Like we're made of starlight",
            "Like we're made of starlight",
            "I met Bobby on the boardwalk, summer of '45",
            "Picks me up late one night, out the window",
            "We were seventeen and crazy, runnin' wild, wild",
            "Can't remember what song it was playin' when we walked in",
            "The night we snuck into a yacht club party",
            "Pretendin' to be a duchess and a prince",
            'And I said, "Oh my, what a marvelous tune"',
            "It was the best night, never would forget how he moved",
            "The whole place was dressed to the nines",
            "And we were dancin', dancin'",
            "Like we're made of starlight, starlight",
            "Like we're made of starlight, starlight",
            `He said, "Look at you, worrying too much about things you can't change"`,
            `"You'll spend your whole life singing the blues if you keep thinkin' that way"`,
            "He was tryin' to skip rocks on the ocean, saying to me",
            `"Don't you see the starlight, starlight?"`,
            `"Don't you dream impossible things?"`,
            'Like, "Oh my, what a marvelous tune"',
            "It was the best night, never would forget how he moved",
            "The whole place was dressed to the nines",
            "And we were dancin', dancin'",
            "Like we're made of starlight, starlight",
            "Like we're made of starlight, starlight",
            "Ooh, ooh, he's talkin' crazy",
            "Ooh, ooh, dancin' with me",
            "Ooh, ooh, we could get married",
            "Have ten kids and teach 'em how to dream",
            "(Ooh-hoo-hoo)",
            "(Ooh-hoo-hoo)",
            "(Ooh-hoo-hoo)",
            "(Ooh-hoo-hoo)",
            "Oh my, what a marvelous tune",
            "It was the best night, never would forget how he moved",
            "The whole place was dressed to the nines",
            "And we were dancin', dancin'",
            "Like we're made of starlight, starlight",
            "Like we're made of starlight, starlight",
            "Like we're made of starlight, starlight",
            "Like we dream impossible dreams",
            "Like starlight, starlight",
            "Like we dream impossible dreams",
            "Don't you see the starlight, starlight?",
            "Don't you dream impossible things?"
          ]
        },
        {
          title: "Begin Again",
          lines: [
            "Took a deep breath in the mirror",
            "He didn't like it when I wore high heels, but I do",
            "Turn the lock and put my headphones on",
            "He always said he didn't get this song, but I do, I do",
            "I walked in, expectin' you'd be late",
            "But you got here early and you stand and wave, I walk to you",
            "You pull my chair out and help me in",
            "And you don't know how nice that is, but I do",
            "And you throw your head back laughin' like a little kid",
            "I think it's strange that you think I'm funny 'cause he never did",
            "I've been spendin' the last eight months",
            "Thinkin' all love ever does is break and burn and end",
            "But on a Wednesday in a caf\xE9, I watched it begin again",
            "You said you never met one girl who",
            "Had as many James-Taylor records as you, but I do",
            "We tell stories and you don't know why",
            "I'm comin' off a little shy, but I do",
            "But you throw your head back laughin' like a little kid",
            "I think it's strange that you think I'm funny 'cause he never did",
            "I've been spendin' the last eight months",
            "Thinkin' all love ever does is break and burn and end",
            "But on a Wednesday in a caf\xE9, I watched it begin again",
            "And we walked down the block to my car",
            "And I almost brought him up",
            "But you start to talk about the movies",
            "That your family watches every single Christmas",
            "And I wanna talk about that",
            "And for the first time, what's past is past",
            "'Cause you throw your head back laughin' like a little kid",
            "I think it's strange that you think I'm funny 'cause he never did",
            "I've been spendin' the last eight months",
            "Thinkin' all love ever does is break and burn and end",
            "But on a Wednesday in a caf\xE9, I watched it begin again",
            "On a Wednesday in a caf\xE9, I watched it begin again"
          ]
        },
        {
          title: "The Moment I Knew",
          lines: [
            "You should've been there",
            "Should've burst through the door",
            `With that "Baby, I'm right here" smile`,
            "And it would've felt like",
            "A million little shining stars that just align",
            "And I would've been so happy",
            "Christmas lights glisten",
            "I've got my eye on the door",
            "Just waitin' for you to walk in",
            "But the time is tickin'",
            "People ask me how I've been",
            "As I comb back through my memory",
            "How you said you'd be here",
            "You said you'd be here",
            "And it was like slow motion",
            "Standing there in my party dress",
            "In red lipstick",
            "With no one to impress",
            "And they're all laughin'",
            "As I'm lookin' around the room",
            "But there was one thing missin'",
            "And that was the moment I knew",
            "And the hours pass by",
            "Now I just wanna be alone",
            "But your close friends always seem to know",
            "When there's somethin' really wrong",
            "So they follow me down the hall",
            "And there in the bathroom",
            "I try not to fall apart",
            "And the sinking feelin' starts",
            "As I say hopelessly",
            `"He said he'd be here"`,
            "And it was like slow motion",
            "Standing there in my party dress",
            "In red lipstick",
            "With no one to impress",
            "And they're all laughin'",
            "And asking me about you",
            "But there was one thing missin'",
            "And that was the moment I knew",
            "What do you say",
            "When tears are streaming down your face",
            "In front of everyone you know?",
            "And what do you do",
            "When the one who means the most to you",
            "Is the one who didn't show?",
            "You should've been here",
            "And I would've been so happy",
            "And it was like slow motion",
            "Standing there in my party dress",
            "In red lipstick",
            "With no one to impress",
            "And they're all standin' around me, singin'",
            '"Happy birthday to you"',
            "But there was one thing missin'",
            "And that was the moment I knew",
            "(Oh) Oh, I knew",
            "(Oh)",
            "You called me later",
            `And said, "I'm sorry I didn't make it"`,
            `And I said, "I'm sorry too"`,
            "And that was the moment I knew"
          ]
        },
        {
          title: "Come Back...Be Here",
          lines: [
            "You said it in a simple way",
            "4AM, the second day",
            "How strange that I don't know you at all",
            "Stumbled through the long goodbye",
            "One last kiss, then catch your flight",
            "Right when I was just about to fall",
            `I told myself, "Don't get attached"`,
            "But in my mind, I play it back",
            "Spinning faster than the plane that took you",
            "And this is when the feelin' sinks in",
            "I don't wanna miss you like this",
            "Come back, be here",
            "Come back, be here",
            "I guess you're in New-York today",
            "I don't wanna need you this way",
            "Come back, be here",
            "Come back, be here",
            "The delicate beginnin' rush",
            "The feelin' you can know so much",
            "Without knowing anything at all",
            "And now that I can put this down",
            "If I had known what I know now",
            "I never would've played so nonchalant",
            "Taxi cabs and busy streets",
            "That never bring you back to me",
            "I can't help but wish you took me with you",
            "And this is when the feelin' sinks in",
            "I don't wanna miss you like this",
            "Come back, be here",
            "Come back, be here",
            "I guess you're in London today",
            "And I don't wanna need you this way",
            "Come back, be here",
            "Come back, be here",
            "Oh, oh",
            "Oh, oh",
            "Oh, oh",
            "This is falling in love in the cruelest way",
            "This is fallin' for you when you are worlds away",
            "In New-York, be here",
            "But you're in London and I break down",
            "'Cause it's not fair that you're not around",
            "This is when the feelin' sinks in",
            "I don't wanna miss you like this",
            "Come back, be here",
            "Come back, be here",
            "I guess you're in New-York today",
            "And I don't wanna need you this way",
            "Come back, be here",
            "Come back, be here",
            "Oh, oh",
            "I don't wanna miss you like this",
            "Oh, oh",
            "Come back, be here",
            "Come back, be here"
          ]
        },
        {
          title: "Girl At Home",
          lines: [
            "Don't look at me, you got a girl at home",
            "And everybody knows that, everybody knows that, ah-ah",
            "Don't look at me, you got a girl at home",
            "And everybody knows that",
            "I don't even know her",
            "But I feel a responsibility",
            "To do what's upstanding and right",
            "It's kinda like a code, yeah",
            "And you've been getting closer and closer",
            "And crossing so many lines",
            "And it would be a fine proposition",
            "If I was a stupid girl",
            "But, honey, I am no one's exception",
            "This, I have previously learned",
            "So don't look at me, you got a girl at home",
            "And everybody knows that, everybody knows that, ah-ah",
            "Don't look at me, you got a girl at home",
            "And everybody knows that, everybody knows that",
            "I see you turn off your phone",
            "And now you've got me alone, and I say",
            "Don't look at me, you got a girl at home",
            "And everybody knows that, everybody knows that",
            "I just wanna make sure",
            "You understand perfectly",
            "You're the kind of man who makes me sad",
            "While she waits up",
            "You chase down the newest thing",
            "And take for granted what you have",
            "And it would be a fine proposition",
            "If I was a stupid girl",
            "And, yeah, I might go with it",
            "If I hadn't once been just like her",
            "So don't look at me, you got a girl at home",
            "And everybody knows that, everybody knows that, ah-ah",
            "Don't look at me, you got a girl at home",
            "And everybody knows that, everybody knows that",
            "I see you turn off your phone",
            "And now you've got me alone, and I say",
            "Don't look at me, you got a girl at home",
            "And everybody knows that, everybody knows that",
            "Oh-oh",
            "Oh-oh",
            "Call a cab, lose my number",
            "You're about to lose your girl",
            "Call a cab, lose my number",
            "Let's consider this lesson learned",
            "Don't look at me, you got a girl at home",
            "And everybody knows that, everybody knows that, ah-ah",
            "Don't look at me, you got a girl at home",
            "And everybody knows that, everybody knows that",
            "Wanna see you pick up your phone",
            "And tell her you're coming home",
            "Don't look at me, you got a girl at home",
            "And everybody knows that, everybody knows that",
            "It would be a fine proposition",
            "If I hadn't once been just like her"
          ]
        },
        {
          title: "Ronan",
          lines: [
            "I remember your bare feet down the hallway",
            "I remember your little laugh",
            "Race cars on the kitchen floor, plastic dinosaurs",
            "I love you to the Moon and back",
            "I remember your blue eyes lookin' into mine",
            "Like we had our own secret club",
            "I remember you dancin' before bedtime",
            "Then jumpin' on me, waking me up",
            "I can still feel you hold my hand, little man",
            "And even the moment I knew",
            "You fought it hard like an army guy",
            "Remember I leaned in and whispered to you",
            '"Come on, baby, with me',
            "We're gonna fly away from here",
            'You were my best four years"',
            "I remember the drive home when the blind hope",
            `Turned to cryin' and screamin', "Why?"`,
            "Flowers pile up in the worst way, no one knows what to say",
            "About a beautiful boy who died",
            "And it's about to be Halloween, you could be anything",
            "You wanted if you were still here",
            "I remember the last day when I kissed your face",
            "And whispered in your ear",
            '"Come on, baby, with me',
            "We're gonna fly away from here",
            "Out of this curtained room and this hospital gray",
            "We'll just disappear",
            "Come on, baby, with me",
            "We're gonna fly away from here",
            'You were my best four years"',
            "What if I'm standin' in your closet trying to talk to you?",
            "And what if I kept the hand-me-downs you won't grow into?",
            "And what if I really thought some miracle would see us through?",
            "And what if the miracle was even gettin' one moment with you?",
            "Come on, baby, with me",
            "We're gonna fly away from here",
            "Come on, baby, with me",
            "We're gonna fly away from here",
            "You were my best four years",
            "I remember your bare feet down the hallway",
            "I love you to the Moon and back"
          ]
        },
        {
          title: "Better Man",
          lines: [
            "I know I'm probably better off on my own",
            "Than lovin' a man who didn't know what he had when he had it",
            "And I see the permanent damage you did to me",
            "Never again, I just wish I could forget when it was magic",
            "I wish it wasn't 4AM, standin' in the mirror",
            'Saying to myself, "You know you had to do it"',
            "I know the bravest thing I ever did was run",
            "Sometimes, in the middle of the night, I can feel you again",
            "But I just miss you and I just wish you were a better man",
            "I know why we had to say goodbye like the back of my hand",
            "But I just miss you and I just wish you were a better man",
            "A better man",
            "I know I'm probably better off all alone",
            "Than needing a man who could change his mind at any given minute",
            "And it was always on your terms, I waited on every careless word",
            "Hoping they might turn sweet again like it was in the beginning",
            "But your jealousy, oh, I can hear it now",
            "Talking down to me like I'd always be around",
            "Push my love away like it was some kind of loaded gun",
            "Oh, you never thought I'd run",
            "Sometimes, in the middle of the night, I can feel you again",
            "But I just miss you and I just wish you were a better man",
            "I know why we had to say goodbye like the back of my hand",
            "But I just miss you and I just wish you were a better man",
            "A better man",
            "I hold onto this pride because, these days, it's all I have",
            "And I gave to you my best",
            "And we both know you can't say that",
            "I wish you were a better man",
            "I wonder what we would've become if you were a better man",
            "We might still be in love if you were a better man",
            "You would've been the one if you were a better man",
            "Sometimes, in the middle of the night, I can feel you again",
            "But I just miss you and I just wish you were a better man",
            "I know why we had to say goodbye like the back of my hand",
            "But I just miss you and I just wish you were a better man",
            "A better man",
            "(Sometimes, in the middle of the night, I can feel you again)",
            "We might still be in love, if you were a better man",
            "(But I just miss you and I just wish you were a better man)",
            "I know why we had to say goodbye like the back of my hand",
            "But I just miss you and I just wish you were a better man",
            "A better man",
            "We might still be in love if you were a better man",
            "You would've been the one if you were a better man"
          ]
        },
        {
          title: "Nothing New",
          lines: [
            "They tell you while you're young",
            '"Girls, go out and have your fun"',
            "Then they hunt and slay the ones who actually do it",
            "Criticize the way you fly",
            "When you're soaring through the sky",
            "Shoot you down and then they sigh",
            `And say, "She looks like she's been through it"`,
            "Lord, what will become of me",
            "Once I've lost my novelty?",
            "I've had too much to drink tonight",
            "And I know it's sad, but this is what I think about",
            "And I wake up in the middle of the night",
            "It's like I can feel time moving",
            "How can a person know everythin' at eighteen",
            "But nothin' at twenty-two?",
            "And will you still want me",
            "When I'm nothing new?",
            "How long will it be cute, all this cryin' in my room?",
            "When you can't blame it on my youth",
            "And roll your eyes with affection",
            "And my cheeks are growing tired",
            "From turning red and faking smiles",
            "Are we only biding time 'til I lose your attention?",
            "And someone else lights up the room (Ah)",
            "People love an ing\xE9nue (Ah)",
            "I've had (I've had) too much to drink tonight",
            "How did I go from growin' up to breaking down?",
            "And I wake up (Wake up) in the middle of the night",
            "It's like I can feel time movin'",
            "How can a person know everything at eighteen",
            "But nothing at twenty-two?",
            "And will you still want me",
            "When I'm nothing new?",
            "I know someday I'm gonna meet her, it's a fever dream",
            "The kind of radiance you only have at seventeen",
            "She'll know the way and then she'll say she got the map from me",
            "I'll say I'm happy for her, then I'll cry myself to sleep",
            "Oh, woah, oh (Oh)",
            "Oh, woah, oh, woah, oh (Oh)",
            "I've had (I've had) too much to drink tonight",
            "But I wonder if they'll miss me once they drive me out",
            "I wake up (Wake up) in the middle of the night",
            "And I can feel time moving",
            "How can a person know everything at eighteen",
            "But nothing at twenty-two?",
            "And will you still want me",
            "Will you still want me",
            "Will you still want me",
            "When I'm nothing new?"
          ]
        },
        {
          title: "Babe",
          lines: [
            "What about your promises, promises?",
            "What about your promises, promises, promises? No",
            "What a shame",
            "Didn't wanna be the one that got away, yeah",
            "Big mistake, you broke the sweetest promise",
            "That you never should have made",
            "I'm here on the kitchen floor",
            "You call, but I won't hear it",
            'You said, "No one else"',
            "How could you do this, babe?",
            "(What about your promises, promises?)",
            "You really blew this, babe",
            "We ain't getting through this one, babe",
            "This is the last time I'll ever call you, babe",
            "(This is the last time, this is the last time)",
            "This is the last time I'll ever call you, babe",
            "(What about your promises, promises, promises? No)",
            "What a waste",
            "Takin' down the pictures and the plans we made, yeah",
            "And it's strange how your face doesn't look so innocent",
            "Your secret has its consequence and that's on you, babe",
            "I break down every time you call",
            "We're a wreck, you're the wrecking ball",
            'We said, "No one else"',
            "How could you do this, babe?",
            "(Oh, what about your promises, promises?)",
            "You really blew this, babe",
            "We ain't getting through this one, babe",
            "This is the last time I'll ever call you, babe",
            "(This is the last time, this is the last time)",
            "This is the last time I'll ever call you",
            "Since you admitted it (Oh-oh), I keep picturin' (Oh-oh)",
            "Her lips on your neck (Oh-oh), I can't unsee it",
            "I hate that because of you, I can't love you, babe",
            "What a shame, didn't want to be the one that got away",
            "How could you do this, babe? (Babe)",
            "You really blew this, babe (Babe)",
            "We ain't getting through this one, babe (Babe)",
            "This is the last time I'll ever call you, babe (Babe)",
            "(This is the last time, this is the last time)",
            "This is the last time I'll ever call you",
            "I'm here on the kitchen floor",
            "You call, but I won't hear it",
            'You said, "No one else"',
            "We ain't getting through this one, babe",
            "I break down every time you call",
            "We're a wreck, you're the wrecking ball",
            'We said, "No one else"',
            "This is the last time I'll ever call you, babe (Babe)",
            "(What about your promises, promises?)"
          ]
        },
        {
          title: "Message In A Bottle",
          lines: [
            "I know that you like me",
            "And it's kinda frightenin' standin' here waitin', waitin'",
            "And I became hypnotized",
            "By freckles and bright eyes, tongue-tied",
            "But now, you're so far away and I'm down",
            "Feelin' like a face in the crowd",
            "I'm reachin' for you, terrified",
            "'Cause you could be the one that I love",
            "I could be the one that you dream of",
            "A message in a bottle is all I can do",
            "Standin' here, hopin' it gets to you",
            "You could be the one that I keep, and I",
            "I could be the reason you can't sleep at night",
            "A message in a bottle is all I can do",
            "Standin' here, hopin' it gets to you",
            "These days I'm restless",
            "Workdays are endless, look how you made me, made me",
            "But time moves faster",
            "Replayin' your laughter, disaster",
            "'Cause now, you're so far away and I'm down",
            "Feelin' like a face in the crowd",
            "I'm reachin' for you, terrified, 'cause",
            "'Cause you could be the one that I love",
            "I could be the one that you dream of",
            "A message in a bottle is all I can do",
            "Standin' here, hopin' it gets to you (It gets to you)",
            "You could be the one that I keep, and I (Ah)",
            "I could be the reason you can't sleep at night (At)",
            "A message in a bottle is all I can do",
            "Standin' here, hopin' it gets to you",
            "How is it in London? (London)",
            "Where were you while I'm wonderin' (Wonderin')",
            "If I'll ever see you again?",
            "You could be the one that I love, mm-mm",
            "And now I'm standin' here, hopin' it gets to you",
            "'Cause you could be the one that I love (Yeah, yeah)",
            "I could be the one that you dream of (Of)",
            "A message in a bottle is all I can do",
            "Standin' here, hopin' it gets to you (It gets to you)",
            "You could be the one that I keep, and I",
            "I could be the reason you can't sleep at night (I can't sleep at night)",
            "A message in a bottle is all I can do (Yeah, yeah)",
            "Standin' here, hopin' it gets to you (Yeah, yeah)",
            "(Love) You could be the one that I love",
            "(Love) You could be the one that I love",
            "(Love) My love",
            "And now I'm standin' here, hopin' this gets to you"
          ]
        },
        {
          title: "I Bet You Think About Me",
          lines: [
            "3AM and I'm still awake, I'll bet you're just fine",
            "Fast asleep in your city that's better than mine",
            "And the girl in your bed has a fine pedigree",
            "And I'll bet your friends tell you she's better than me, huh",
            "Well, I tried to fit in with your upper-crust circles",
            "Yeah, they let me sit in back when we were in love",
            "Oh, they sit around talkin' about the meaning of life",
            "And the book that just saved 'em that I hadn't heard of",
            "But now that we're done and it's over",
            "I bet you couldn't believe",
            "When you realized I'm harder to forget than I was to leave",
            "And I bet you think about me",
            "You grew up in a silver-spoon gated community",
            "Glamorous, shiny, bright Beverly-Hills",
            "I was raised on a farm, no, it wasn't a mansion",
            "Just livin' room dancin' and kitchen table bills",
            "But you know what they say, you can't help who you fall for",
            "And you and I fell like an early spring snow",
            "But reality crept in, you said we're too different",
            "You laughed at my dreams, rolled your eyes at my jokes",
            "Mr. Superior Thinkin'",
            "Do you have all the space that you need?",
            "I don't have to be your shrink to know that you'll never be happy",
            "And I bet you think about me",
            "I bet you think about me, yes",
            "I bet you think about me",
            "Oh, block it all out",
            "The voices so loud, sayin'",
            '"Why did you let her go?"',
            "Does it make you feel sad",
            "That the love that you're lookin' for",
            "Is the love that you had?",
            "Now you're out in the world, searchin' for your soul",
            "Scared not to be hip, scared to get old",
            "Chasing make-believe status, last time you felt free",
            "Was when none of that shit mattered 'cause you were with me",
            "But now that we're done and it's over",
            "I bet it's hard to believe",
            "But it turned out I'm harder to forget than I was to leave",
            "And, yeah, I bet you think about me",
            "I bet you think about me, yes",
            "I bet you think about me",
            "I bet you think about me when you're out",
            "At your cool indie music concerts every week",
            "I bet you think about me in your house",
            "With your organic shoes and your million-dollar couch",
            "I bet you think about me when you say",
            `"Oh my god, she's insane, she wrote a song about me"`,
            "I bet you think about me"
          ]
        },
        {
          title: "Forever Winter",
          lines: [
            "He says he doesn't believe anything much he hears these days",
            'He says, "Why fall in love, just so you can watch it go away?"',
            "He spends most of his nights wishing it was how it used to be",
            "He spends most of his flights getting pulled down by gravity",
            "I call, just checkin' up on him",
            "He's up, 3AM, pacin'",
            `He says, "It's not just a phase I'm in"`,
            "My voice comes out beggin'",
            "All this time, I didn't know",
            "You were breakin' down",
            "I'd fall to pieces on the floor",
            "If you weren't around",
            "Too young to know it gets better",
            "I'll be summer sun for you forever",
            "Forever winter if you go",
            "He seems fine most of the time, forcing smiles and never minds",
            "His laugh is a symphony, when the lights go out, it's hard to breathe",
            "I pull at every thread trying to solve the puzzles in his head",
            "Live my life scared to death he'll decide to leave instead",
            "I call, just checkin' up on him",
            "He's up, 5AM, wasted",
            "Long gone, not even listening",
            "My voice comes out screamin'",
            "All this time, I didn't know",
            "You were breakin' down",
            "I'd fall to pieces on the floor",
            "If you weren't around",
            "Too young to know it gets better",
            "I'll be summer sun for you forever",
            "Forever winter if you go",
            "If I was standing there in your apartment",
            "I'd take that bomb in your head and disarm it",
            `I'd say, "I love you even at your darkest and`,
            `Please, don't go"`,
            "I didn't know",
            "You were breakin' down",
            "I'd fall to pieces on the floor",
            "If you weren't around",
            "Too young to know it gets better",
            "I'll be summer sun for you forever",
            "Forever winter if you go",
            "(Ooh, ooh, ooh)",
            "I'll be your summer sun forever",
            "(Ooh, ooh, ooh) At 3AM, pacin'",
            "All this time, I didn't know",
            "(Ooh, ooh, ooh) At 5AM, wasted",
            "I'd be in pieces on the floor",
            "Forever winter if you go",
            "He says he doesn't believe anything much he hears these days",
            `I say, "Believe in one thing, I won't go away"`
          ]
        },
        {
          title: "Run",
          lines: [
            "One, two, three, four",
            "Give me the keys, I'll bring the car back around",
            "We shouldn't be in this town",
            "And my so-called friends, they don't know",
            "I'd drive away before I let you go",
            "So give me a reason and don't say no, no",
            "There's a chain 'round your throat, piece of paper where I wrote",
            `"I'll wait for you"`,
            "There's a key on the chain, there's a picture in a frame",
            "Take it with you",
            "And run like you'd run from the law",
            "Darling, let's run",
            "Run from it all",
            "We can go where our eyes can take us",
            "Go where no one else is, run",
            "Ooh, we'll run",
            "Ooh, we'll run",
            "Ooh, we'll run",
            "So you laugh like a child",
            "And I'll sing like no one cares",
            "No one to be and no one to tell",
            "I could see this view a hundred times",
            "Pale blue sky reflected in your eyes",
            "So give me a reason and don't say no, no",
            "And the note from the locket, you keep it in your pocket",
            "Since I gave it to you",
            "There's a heart on your sleeve, I'll take it when I leave",
            "And hold it for you",
            "And run like you'd run from the law",
            "Darling, let's run",
            "Run from it all",
            "We can go like they're trying to chase us",
            "Go where no one else is, run",
            "Ooh, we'll run",
            "Ooh, we'll run",
            "Ooh, we'll run",
            "There's been this hole in my heart",
            "This thing was a shot in the dark",
            "Say you'll never let 'em tear us apart",
            "And I'll hold onto you while we run",
            "(And we run and we run and we run)",
            "Like you'd run from the law",
            "(And we run and we run and we run)",
            "Darling, let's run",
            "(And we run and we run and we run)",
            "Run from it all",
            "(And we run and we run and we run)",
            "We can go where our eyes can take us",
            "Go where no one else is, run",
            "Ooh, we'll run",
            "Ooh, we'll run",
            "Ooh, we'll run",
            "Ooh, and we'll run"
          ]
        },
        {
          title: "The Very First Night",
          lines: [
            "I wish I could fly",
            "I'd pick you up and we'd go back in time",
            "I'd write this in the sky",
            "I miss you like it was the very first night",
            "And so it goes",
            "Every weekend, this same party",
            "I never go alone",
            "And I don't seem broken-hearted",
            "My friends all say they know",
            "Everything I'm going through",
            "I drive down different roads",
            "But they all lead back to you",
            "'Cause they don't know about the night in the hotel",
            "They weren't ridin' in the car when we both fell",
            "Didn't read the note on the Polaroid picture",
            "They don't know how much I miss you",
            "I wish I could fly",
            "I'd pick you up and we'd go back in time",
            "I'd write this in the sky",
            "I miss you like it was the very first night",
            "And so it was",
            "We never saw it comin'",
            "Not trying to fall in love",
            "But we did like children runnin'",
            "Back then, we didn't know",
            "We were built to fall apart",
            "We broke the status-quo",
            "Then we broke each other's hearts",
            "But don't forget about the night out in L.A.",
            "Dance in the kitchen, chase me down through the hallway",
            "No one knows about the words that we whispered",
            "No one knows how much I miss you",
            "I wish I could fly",
            "I'd pick you up and we'd go back in time",
            "I'd write this in the sky",
            "I miss you like it was the very first night",
            "Take me away, take me away",
            "Take me away to you, to you",
            "Take me away, take me away",
            "Take me away to you, to you",
            "I remember the night at the hotel",
            "I was ridin' in the car when we both fell",
            "I'm the one on the phone as you whisper",
            '"Do you know how much I miss you?"',
            "I wish that we could go back in time",
            "And I'd say to you",
            '"I miss you like it was the very first night"',
            "I wish I could fly",
            "I'd pick you up and we'd go back in time",
            "I'd write this in the sky",
            "I miss you like it was the very first night",
            "Take me away (Take me), take me away (Take me)",
            "Take me away (Take me) to you, to you",
            "Take me away (Take me), take me away (Take me)",
            "Take me away (Take me) to you, to you"
          ]
        },
        {
          title: "All Too Well (10 Minute Version)",
          lines: [
            "I walked through the door with you, the air was cold",
            "But somethin' 'bout it felt like home somehow",
            "And I left my scarf there at your sister's house",
            "And you've still got it in your drawer, even now",
            "Oh, your sweet disposition and my wide-eyed gaze",
            "We're singin' in the car, getting lost upstate",
            "Autumn leaves fallin' down like pieces into place",
            "And I can picture it after all these days",
            "And I know it's long gone and",
            "That magic's not here no more",
            "And I might be okay, but I'm not fine at all",
            "Oh, oh, oh",
            "'Cause there we are again on that little town street",
            "You almost ran the red 'cause you were lookin' over at me",
            "Wind in my hair, I was there",
            "I remember it all too well",
            "Photo album on the counter, your cheeks were turnin' red",
            "You used to be a little kid with glasses in a twin-sized bed",
            "And your mother's tellin' stories 'bout you on the tee-ball team",
            "You taught me 'bout your past, thinkin' your future was me",
            'And you were tossing me the car keys, "Fuck the patriarchy"',
            "Keychain on the ground, we were always skippin' town",
            `And I was thinkin' on the drive down, "Any time now`,
            `He's gonna say it's love," you never called it what it was`,
            "'Til we were dead and gone and buried",
            "Check the pulse and come back swearin' it's the same",
            "After three months in the grave",
            "And then you wondered where it went to as I reached for you",
            "But all I felt was shame and you held my lifeless frame",
            "And I know it's long gone and",
            "There was nothing else I could do",
            "And I forget about you long enough",
            "To forget why I needed to",
            "'Cause there we are again in the middle of the night",
            "We're dancin' 'round the kitchen in the refrigerator light",
            "Down the stairs, I was there",
            "I remember it all too well",
            "And there we are again when nobody had to know",
            "You kept me like a secret, but I kept you like an oath",
            "Sacred prayer and we'd swear",
            "To remember it all too well, yeah",
            "Well, maybe we got lost in translation, maybe I asked for too much",
            "But maybe this thing was a masterpiece 'til you tore it all up",
            "Runnin' scared, I was there",
            "I remember it all too well",
            "And you call me up again just to break me like a promise",
            "So casually cruel in the name of bein' honest",
            "I'm a crumpled-up piece of paper lyin' here",
            "'Cause I remember it all, all, all",
            "They say all's well that ends well, but I'm in a new hell",
            "Every time you double-cross my mind",
            "You said if we had been closer in age, maybe it would've been fine",
            "And that made me want to die",
            "The idea you had of me, who was she?",
            "A never-needy, ever-lovely jewel whose shine reflects on you",
            "Not weepin' in a party bathroom",
            "Some actress askin' me what happened, you",
            "That's what happened, you",
            "You who charmed my dad with self-effacing jokes",
            "Sippin' coffee like you're on a late-night show",
            "But then he watched me watch the front door all night, willin' you to come",
            `And he said, "It's supposed to be fun turning twenty-one"`,
            "Time won't fly, it's like I'm paralyzed by it",
            "I'd like to be my old self again, but I'm still tryin' to find it",
            "After plaid shirt days and nights when you made me your own",
            "Now you mail back my things and I walk home alone",
            "But you keep my old scarf from that very first week",
            "'Cause it reminds you of innocence and it smells like me",
            "You can't get rid of it",
            "'Cause you remember it all too well, yeah",
            "'Cause there we are again when I loved you so",
            "Back before you lost the one real thing you've ever known",
            "It was rare, I was there",
            "I remember it all too well",
            "Wind in my hair, you were there",
            "You remember it all",
            "Down the stairs, you were there",
            "You remember it all",
            "It was rare, I was there",
            "I remember it all too well",
            "And I was never good at tellin' jokes, but the punch line goes",
            `"I'll get older, but your lovers stay my age"`,
            "From when your Brooklyn broke my skin and bones",
            "I'm a soldier who's returning half her weight",
            "And did the twin flame bruise paint you blue?",
            "Just between us, did the love affair maim you too?",
            "'Cause in this city's barren cold",
            "I still remember the first fall of snow",
            "And how it glistened as it fell",
            "I remember it all too well",
            "Just between us, did the love affair maim you all too well?",
            "Just between us, do you remember it all too well?",
            "Just between us, I remember it (Just between us) all too well",
            "Wind in my hair, I was there, I was there (I was there)",
            "Down the stairs, I was there, I was there",
            "Sacred prayer, I was there, I was there",
            "It was rare, you remember it all too well",
            "Wind in my hair, I was there, I was there (Oh)",
            "Down the stairs, I was there, I was there (I was there)",
            "Sacred prayer, I was there, I was there",
            "It was rare, you remember it (All too well)",
            "Wind in my hair, I was there, I was there",
            "Down the stairs, I was there, I was there",
            "Sacred prayer, I was there, I was there",
            "It was rare, you remember it",
            "Wind in my hair, I was there, I was there",
            "Down the stairs, I was there, I was there",
            "Sacred prayer, I was there, I was there",
            "It was rare, you remember it"
          ]
        }
      ]
    },
    {
      title: "1989",
      songs: [
        {
          title: "Welcome To New York",
          lines: [
            "Walkin' through a crowd, the village is aglow",
            "Kaleidoscope of loud heartbeats under coats",
            "Everybody here wanted somethin' more",
            "Searchin' for a sound we hadn't heard before",
            "And it said",
            `"Welcome to New-York, it's been waitin' for you"`,
            "Welcome to New-York, welcome to New-York",
            "Welcome to New-York, it's been waitin' for you",
            "Welcome to New-York, welcome to New-York",
            "It's a new soundtrack, I could dance to this beat, beat forevermore",
            "The lights are so bright, but they never blind me, me",
            "Welcome to New-York, it's been waitin' for you",
            "Welcome to New-York, welcome to New-York",
            "When we first dropped our bags on apartment floors",
            "Took our broken hearts, put them in a drawer",
            "Everybody here was someone else before",
            "And you can want who you want",
            "Boys and boys and girls and girls",
            "Welcome to New-York, it's been waitin' for you",
            "Welcome to New-York, welcome to New-York",
            "Welcome to New-York, it's been waitin' for you",
            "Welcome to New-York, welcome to New-York",
            "It's a new soundtrack, I could dance to this beat, beat forevermore",
            "The lights are so bright, but they never blind me, me",
            "Welcome to New-York (New-York), it's been waitin' for you",
            "Welcome to New-York, welcome to New-York",
            "Like any great love, it keeps you guessing",
            "Like any real love, it's ever-changing",
            "Like any true love, it drives you crazy",
            "But you know you wouldn't change anything, anything, anything",
            "Welcome to New-York, it's been waitin' for you",
            "Welcome to New-York, welcome to New-York",
            "Welcome to New-York, it's been waitin' for you",
            "Welcome to New-York, welcome to New-York",
            "It's a new soundtrack, I could dance to this beat",
            "The lights are so bright, but they never blind me",
            "Welcome to New-York, new soundtrack",
            "It's been waitin' for you, welcome to New-York",
            "The lights are so bright, but they never blind me",
            "Welcome to New-York, so bright, they never blind me",
            "Welcome to New-York, welcome to New-York"
          ]
        },
        {
          title: "Blank Space",
          lines: [
            "Nice to meet you, where you been?",
            "I could show you incredible things",
            "Magic, madness, heaven, sin",
            "Saw you there and I thought",
            '"Oh, my God, look at that face',
            "You look like my next mistake",
            `Love's a game, wanna play?" Ayy`,
            "New money, suit and tie",
            "I can read you like a magazine",
            "Ain't it funny? Rumors fly",
            "And I know you heard about me",
            "So, hey, let's be friends",
            "I'm dyin' to see how this one ends",
            "Grab your passport and my hand",
            "I can make the bad guys good for a weekend",
            "So it's gonna be forever",
            "Or it's gonna go down in flames?",
            "You can tell me when it's over, mm",
            "If the high was worth the pain",
            "Got a long list of ex-lovers",
            "They'll tell you I'm insane",
            "'Cause you know I love the players",
            "And you love the game",
            "'Cause we're young and we're reckless",
            "We'll take this way too far",
            "It'll leave you breathless, mm",
            "Or with a nasty scar",
            "Got a long list of ex-lovers",
            "They'll tell you I'm insane",
            "But I've got a blank space, baby",
            "And I'll write your name",
            "Cherry lips, crystal skies",
            "I could show you incredible things",
            "Stolen kisses, pretty lies",
            "You're the king, baby, I'm your queen",
            "Find out what you want",
            "Be that girl for a month",
            "Wait, the worst is yet to come, oh, no",
            "Screaming, crying, perfect storms",
            "I can make all the tables turn",
            "Rose garden filled with thorns",
            "Keep you second guessin', like",
            '"Oh, my God, who is she?"',
            "I get drunk on jealousy",
            "But you'll come back each time you leave",
            "'Cause, darling, I'm a nightmare dressed like a daydream",
            "So it's gonna be forever",
            "Or it's gonna go down in flames?",
            "You can tell me when it's over, mm",
            "If the high was worth the pain",
            "Got a long list of ex-lovers",
            "They'll tell you I'm insane",
            "'Cause you know I love the players",
            "And you love the game",
            "'Cause we're young and we're reckless (Oh)",
            "We'll take this way too far",
            "It'll leave you breathless (Oh-oh), mm",
            "Or with a nasty scar",
            "Got a long list of ex-lovers",
            "They'll tell you I'm insane (Insane)",
            "But I've got a blank space, baby",
            "And I'll write your name",
            "Boys only want love if it's torture",
            "Don't say I didn't, say I didn't warn ya",
            "Boys only want love if it's torture",
            "Don't say I didn't, say I didn't warn ya",
            "So it's gonna be forever",
            "Or it's gonna go down in flames?",
            "You can tell me when it's over (Over), mm",
            "If the high was worth the pain",
            "Got a long list of ex-lovers",
            "They'll tell you I'm insane (I'm insane)",
            "'Cause you know I love the players",
            "And you love the game (Love the game)",
            "'Cause we're young and we're reckless (Yeah)",
            "We'll take this way too far (Ooh)",
            "It'll leave you breathless, mm",
            "Or with a nasty scar (Or leave a nasty scar)",
            "Got a long list of ex-lovers",
            "They'll tell you I'm insane",
            "But I've got a blank space, baby",
            "And I'll write your name"
          ]
        },
        {
          title: "Style",
          lines: [
            "Midnight",
            "You come and pick me up, no headlights",
            "Long drive",
            "Could end in burnin' flames or paradise",
            "Fade into view, oh",
            "It's been a while since I have even heard from you",
            "(Heard from you)",
            "I should just tell you to leave 'cause I",
            "Know exactly where it leads, but I",
            "Watch us go 'round and 'round each time",
            "You got that James-Dean daydream look in your eye",
            "And I got that red lip classic thing that you like",
            "And when we go crashin' down, we come back every time",
            "'Cause we never go out of style, we never go out of style",
            "You got that long hair, slicked back, white T-shirt",
            "And I got that good girl faith and a tight little skirt",
            "And when we go crashin' down, we come back every time",
            "'Cause we never go out of style, we never go out of style",
            "So it goes",
            "He can't keep his wild eyes on the road, mm",
            "Takes me home",
            "Lights are off, he's taking off his coat, oh, yeah",
            'I say, "I heard, oh',
            `That you've been out and about with some other girl"`,
            "Some other girl",
            'He says, "What you heard is true, but I',
            `Can't stop thinkin' 'bout you," and I`,
            `I said, "I've been there too a few times"`,
            "'Cause you got that James-Dean daydream look in your eye",
            "And I got that red lip classic thing that you like",
            "And when we go crashin' down, we come back every time",
            "'Cause we never go out of style, we never go out of style",
            "You got that long hair, slicked back, white T-shirt",
            "And I got that good girl faith and a tight little skirt (A tight little skirt)",
            "And when we go crashin' down, we come back every time",
            "'Cause we never go out of style (We never go, we never go), we never go out of style",
            "Take me home (Ah)",
            "Just take me home (Ah)",
            "Yeah, just take me home (Ah)",
            "Woah, woah, oh (Out of style)",
            "Oh, 'cause you got that James-Dean daydream look in your eye",
            "And I got that red lip classic thing that you like",
            "And when we go crashin' down (And when we go), we come back every time",
            "'Cause we never go out of style, we never go out of style"
          ]
        },
        {
          title: "Out Of The Woods",
          lines: [
            "Looking at it now",
            "It all seems so simple",
            "We were lying on your couch",
            "I remember",
            "You took a Polaroid of us",
            "Then discovered (Then discovered)",
            "The rest of the world was black and white",
            "But we were in screaming color",
            "And I remember thinkin'",
            "Are we out of the woods yet? Are we out of the woods yet?",
            "Are we out of the woods yet? Are we out of the woods?",
            "Are we in the clear yet? Are we in the clear yet?",
            "Are we in the clear yet, in the clear yet? Good",
            "Are we out of the woods yet? Are we out of the woods yet?",
            "Are we out of the woods yet? Are we out of the woods?",
            "Are we in the clear yet? Are we in the clear yet?",
            "Are we in the clear yet, in the clear yet? Good",
            "(Are we out of the woods?)",
            "Looking at it now",
            "Last December (Last December)",
            "We were built to fall apart",
            "And fall back together (Back together)",
            "Ooh, your necklace hanging from my neck",
            "The night we couldn't quite forget",
            "When we decided, we decided",
            "To move the furniture so we could dance",
            "Baby, like we stood a chance",
            "Two paper airplanes flying, flying, flying",
            "And I remember thinkin'",
            "Are we out of the woods yet? Are we out of the woods yet?",
            "Are we out of the woods yet? Are we out of the woods?",
            "Are we in the clear yet? Are we in the clear yet?",
            "Are we in the clear yet, in the clear yet? Good",
            "Are we out of the woods yet? Are we out of the woods yet? (Oh)",
            "Are we out of the woods yet? Are we out of the woods?",
            "Are we in the clear yet? Are we in the clear yet?",
            "Are we in the clear yet, in the clear yet? Good",
            "(Are we out of the woods?)",
            "Remember when you hit the brakes too soon?",
            "Twenty stitches in the hospital room",
            "When you started crying, baby, I did too",
            "But when the sun came up, I was lookin' at you",
            "Remember when we couldn't take the heat?",
            `I walked out, I said, "I'm settin' you free"`,
            "But the monsters turned out to be just trees",
            "When the sun came up, you were lookin' at me",
            "You were lookin' at me, oh, you were looking at me",
            "(Are we out of the woods yet? Are we out of the woods yet?)",
            "(Are we out of the woods yet? Are we out of the woods?)",
            "I remember",
            "(Are we in the clear yet? Are we in the clear yet?)",
            "(Are we in the clear yet, in the clear yet? Good)",
            "Oh, I remember",
            "Are we out of the woods yet? Are we out of the woods yet? (Yeah)",
            "Are we out of the woods yet? Are we out of the woods?",
            "Are we in the clear yet? Are we in the clear yet? (Say, are we?)",
            "Are we in the clear yet, in the clear yet? Good",
            "Are we out of the woods yet? Are we out of the woods yet?",
            "Are we out of the woods yet? Are we out of the woods?",
            "Are we in the clear yet? (Yeah) Are we in the clear yet? (Yeah)",
            "Are we in the clear yet, in the clear yet? Good (Clear yet? Good)",
            "Are we out of the woods yet? Are we out of the woods yet?",
            "Are we out of the woods yet? Are we out of the woods?",
            "Are we in the clear yet? Are we in the clear yet?",
            "Are we in the clear yet, in the clear yet? Good (Do you remember?)",
            "Are we out of the woods yet? Are we out of the woods yet?",
            "Are we out of the woods yet? Are we out of the woods?",
            "Are we in the clear yet? Are we in the clear yet?",
            "Are we in the clear yet, in the clear yet? Good"
          ]
        },
        {
          title: "All You Had To Do Was Stay",
          lines: [
            "(Hey, hey, hey)",
            "(Hey, hey, hey)",
            "(Hey, hey, hey)",
            "(Hey, hey, hey)",
            "People like you always want back",
            "The love they gave away",
            "And people like me wanna believe you",
            "When you say you've changed",
            "The more I think about it now",
            "The less I know",
            "All I know is that you drove us",
            "Off the road",
            "(Stay) Hey, all you had to do was stay",
            "Had me in the palm of your hand, then",
            "Why'd you have to go and lock me out when I let you in?",
            "(Stay) Hey, now you say you want it back",
            "Now that it's just too late, well, could've been easy",
            "All you had to do was (Stay)",
            "All you had to do was (Stay)",
            "All you had to do was (Stay)",
            "All you had to do was (Stay)",
            "All you had to do was stay",
            "Here you are now, callin' me up",
            "But I don't know what to say",
            "I've been pickin' up the pieces",
            "Of the mess you made",
            "People like you always want back",
            "The love they pushed aside",
            "But people like me are gone forever",
            "When you say goodbye",
            "(Stay) Hey, all you had to do was stay",
            "Had me in the palm of your hand, then",
            "Why'd you have to go and lock me out when I let you in?",
            "(Stay) Hey, now you say you want it back",
            "Now that it's just too late, well, could've been easy",
            "All you had to do was (Stay)",
            "All you had to do was (Stay)",
            "All you had to do was (Stay)",
            "All you had to do was (Stay, stay, stay, stay)",
            "Let me remind you",
            "This was what you wanted (Oh, oh, oh-oh-oh)",
            "You ended it",
            "You were all I wanted (Oh, oh, oh-oh-oh)",
            "But not like this",
            "Not like this, not like this",
            "Oh, all you had to do was",
            "(Stay) Hey, all you had to do was stay",
            "Had me in the palm of your hand, then",
            "Why'd you have to go and lock me out when I let you in?",
            "(Stay) Hey, now you say you want it back",
            "Now that it's just too late, well, could've been easy",
            "All you had to do was",
            "(Stay; Ah) Hey, all you had to do was stay",
            "Had me in the palm of your hand, then",
            "Why'd you have to go and lock me out when I let you in?",
            "(Stay; Ah) Hey, now you say you want it back",
            "Now that it's just too late, well, it could've been easy (All you had to do was stay)",
            "All you had to do was (Stay)",
            "(Ah) All you had to do was (Stay; Oh)",
            "All you had to do was (Stay)",
            "All you had to do was (Stay; Ooh)",
            "All you had to do was (Stay)"
          ]
        },
        {
          title: "Shake It Off",
          lines: [
            "I stay out too late",
            "Got nothin' in my brain",
            "That's what people say, mm-mm",
            "That's what people say, mm-mm",
            "I go on too many dates (ha-ha)",
            "But I can't make them stay",
            "At least, that's what people say, mm-mm",
            "That's what people say, mm-mm",
            "But I keep cruisin'",
            "Can't stop, won't stop movin'",
            "It's like I got this music in my mind",
            `Sayin', "It's gonna be alright"`,
            "'Cause the players gonna play, play, play, play, play",
            "And the haters gonna hate, hate, hate, hate, hate",
            "Baby, I'm just gonna shake, shake, shake, shake, shake",
            "Shake it off, I shake it off (Ooh)",
            "Heartbreakers gonna break, break, break, break, break",
            "And the fakers gonna fake, fake, fake, fake, fake",
            "Baby, I'm just gonna shake, shake, shake, shake, shake",
            "I shake it off, I shake it off (Ooh)",
            "I never miss a beat",
            "I'm lightnin' on my feet",
            "And that's what they don't see, mm-mm",
            "That's what they don't see, mm-mm",
            "I'm dancin' on my own (Dancin' on my own)",
            "I make the moves up as I go (Moves up as I go)",
            "And that's what they don't know, mm-mm",
            "That's what they don't know, mm-mm",
            "But I keep cruisin'",
            "Can't stop, won't stop groovin'",
            "It's like I got this music in my mind",
            `Sayin', "It's gonna be alright"`,
            "'Cause the players gonna play, play, play, play, play",
            "And the haters gonna hate, hate, hate, hate, hate",
            "Baby, I'm just gonna shake, shake, shake, shake, shake",
            "Shake it off, I shake it off (Ooh)",
            "Heartbreakers gonna break, break, break, break, break",
            "And the fakers gonna fake, fake, fake, fake, fake",
            "Baby, I'm just gonna shake, shake, shake, shake, shake",
            "I shake it off, I shake it off (Ooh)",
            "I shake it off, I shake it off",
            "I, I, I shake it off, I shake it off",
            "I, I, I shake it off, I shake it off",
            "I, I, I shake it off, I shake it off (ha-ha)",
            "Hey, hey, hey",
            "Just think, while you've been gettin' down and out about the liars",
            "And the dirty, dirty cheats of the world",
            "You could've been gettin' down to this sick beat",
            "My ex-man brought his new girlfriend",
            `She's like, "Oh, my God" (ha-ha), but I'm just gonna shake`,
            "And to the fella over there with the hella good hair",
            "Won't you come on over, baby?",
            "We could shake, shake, shake",
            "Yeah, oh, woah",
            "'Cause the players gonna play, play, play, play, play",
            "And the haters gonna hate, hate, hate, hate, hate (Haters gonna hate)",
            "Baby, I'm just gonna shake, shake, shake, shake, shake",
            "I shake it off, I shake it off (Ooh; Hey)",
            "Heartbreakers gonna break, break, break, break, break (Mmm)",
            "And the fakers gonna fake, fake, fake, fake, fake (They fake and fake and fake)",
            "Baby, I'm just gonna shake, shake, shake, shake, shake",
            "I shake it off, I shake it off (Ooh; Off)",
            "I shake it off, I shake it off",
            "I, I, I shake it off, I shake it off",
            "I, I, I shake it off, I shake it off (Off)",
            "I, I, I shake it off (Yeah), I shake it off",
            "I shake it off, I shake it off",
            "I, I, I shake it off, I shake it off (You got to)",
            "I, I, I shake it off, I shake it off",
            "I, I, I shake it off, I shake it off"
          ]
        },
        {
          title: "I Wish You Would",
          lines: [
            "It's 2AM in your car",
            "Windows down, you pass my street, the memories start",
            `You say, "It's in the past," you drive straight ahead`,
            "You're thinkin' that I hate you now",
            "'Cause you still don't know what I never said",
            "I wish you would come back",
            "Wish I never hung up the phone like I did, I",
            "Wish you knew that",
            "I'll never forget you as long as I live and I",
            "Wish you were right here, right now, it's all good",
            "I wish you would",
            "It's 2AM in my room",
            "Headlights pass the window pane, I think of you",
            "We're a crooked love in a straight line down",
            "Makes you want to run and hide",
            "Then it makes you turn right back around",
            "I wish you would come back",
            "Wish I never hung up the phone like I did, I",
            "Wish you knew that",
            "I'll never forget you as long as I live and I",
            "Wish you were right here, right now, it's all good",
            "I wish you would",
            "I wish we could go back",
            "And remember what we were fightin' for and I",
            "Wish you knew that",
            "I miss you too much to be mad anymore and I",
            "Wish you were right here, right now, it's all good",
            "I wish you would",
            "I, I-I-I, I, I, I wish, I wish, I",
            "I, I-I-I, I, I, I wish, I wish, I",
            "I, I-I-I, I, I, I wish, I wish, I",
            "You always knew how to push my buttons (I, I-I-I, I, I, I wish, I wish, I)",
            "You give me everything and nothin' (I, I-I-I, I, I, I wish, I wish, I)",
            "This mad, mad love makes you come runnin' (I, I-I-I, I, I, I wish, I wish, I)",
            "To stand back where you stood (I, I-I-I, I, I, I wish, I wish, I)",
            "I wish you would, I wish you would",
            "(I wish you would, I wish you would)",
            "I wish you would, I wish you would (I, I-I-I, I, I, I wish, I wish, I)",
            "(I wish you would, I wish you would)",
            "(I, I-I-I, I, I, I wish, I wish, I)",
            "2AM, here we are",
            "See your face, hear my voice in the dark",
            "We're a crooked love in a straight line down",
            "Makes you wanna run and hide",
            "But it made us turn right back around",
            "I wish you would come back",
            "Wish I never hung up the phone like I did, I",
            "Wish you knew that",
            "I'll never forget you as long as I live and I",
            "Wish you were right here, right now, it's all good",
            "I wish you would",
            "I wish you would come back",
            "Wish I never hung up the phone like I did, I",
            "Wish you knew that",
            "I'll never forget you as long as I live and I",
            "Wish you were right here, right now, it's all good",
            "I wish you would",
            "I wish we could go back",
            "And remember what we were fightin' for and I",
            "Wish you knew that",
            "I miss you too much to be mad anymore and I",
            "Wish you were right here, right now, it's all good",
            "I wish you would",
            "You always knew how to push my buttons (I, I-I-I, I, I, I wish, I wish, I)",
            "You give me everything and nothin' (I, I-I-I, I, I, I wish, I wish, I)",
            "This mad, mad love makes you come runnin' (I, I-I-I, I, I, I wish, I wish, I)",
            "To stand back where you stood (I, I-I-I, I, I, I wish, I wish, I)",
            "I wish you would, I wish you would",
            "(I wish you would, I wish you would)",
            "(I, I-I-I, I, I, I wish, I wish, I)",
            "I wish you would, I wish you would",
            "(I wish you would, I wish you would, I wish you would, I wish you would)",
            "(I, I-I-I, I, I, I wish, I wish, I)",
            "I, I-I-I, I, I, I wish, I wish, I",
            "I, I-I-I, I, I, I wish, I wish, I",
            "I wish you would"
          ]
        },
        {
          title: "Bad Blood",
          lines: [
            "'Cause, baby, now we got bad blood",
            "You know it used to be mad love",
            "So take a look what you've done",
            "'Cause, baby, now we got bad blood, hey",
            "Now we got problems",
            "And I don't think we can solve them",
            "You made a really deep cut",
            "And, baby, now we got bad blood, hey",
            "Did you have to do this?",
            "I was thinking that you could be trusted",
            "Did you have to ruin",
            "What was shiny? Now it's all rusted",
            "Did you have to hit me",
            "Where I'm weak? Baby, I couldn't breathe",
            "And rub it in so deep",
            "Salt in the wound like you're laughin' right at me",
            "Oh, it's so sad to",
            "Think about the good times",
            "You and I",
            "'Cause, baby, now we got bad blood",
            "You know it used to be mad love",
            "So take a look what you've done",
            "'Cause, baby, now we got bad blood, hey",
            "Now we got problems",
            "And I don't think we can solve them",
            "You made a really deep cut",
            "And, baby, now we got bad blood, hey",
            "Did you think we'd be fine?",
            "Still got scars on my back from your knife",
            "So don't think it's in the past",
            "These kinda wounds, they last and they last",
            "Now, did you think it all through?",
            "All these things will catch up to you",
            "And time can heal, but this won't",
            "So if you're comin' my way, just don't",
            "Oh, it's so sad to",
            "Think about the good times",
            "You and I",
            "'Cause, baby, now we got bad blood",
            "You know it used to be mad love",
            "So take a look what you've done",
            "'Cause, baby, now we got bad blood, hey",
            "Now we got problems",
            "And I don't think we can solve them",
            "You made a really deep cut",
            "And, baby, now we got bad blood, hey",
            "Band-aids don't fix bullet holes",
            "You say sorry just for show",
            "If you live like that, you live with ghosts (Ghosts)",
            "Band-aids don't fix bullet holes (Hey)",
            "You say sorry just for show (Hey)",
            "If you live like that, you live with ghosts (Hey), mmm",
            "If you love like that, blood runs cold",
            "'Cause, baby, now we got bad blood",
            "You know it used to be mad love (Mad love)",
            "So take a look what you've done",
            "'Cause, baby, now we got bad blood, hey (Bad blood)",
            "Now we got problems",
            "And I don't think we can solve them (Think we can solve them)",
            "You made a really deep cut",
            "And, baby, now we got bad blood, hey ('Cause now we got bad blood)",
            "'Cause, baby, now we got bad blood",
            "You know it used to be mad love",
            "So take a look what you've done (Look what you've done)",
            "'Cause, baby, now we got bad blood, hey (Ooh, woah, no)",
            "Now we got problems",
            "And I don't think we can solve them",
            "You made a really deep cut",
            "And, baby, now we got bad blood, hey"
          ]
        },
        {
          title: "Wildest Dreams",
          lines: [
            `He said, "Let's get out of this town`,
            'Drive out of the city, away from the crowds"',
            `I thought, "Heaven can't help me now"`,
            "Nothing lasts forever",
            "But this is gonna take me down",
            "He's so tall and handsome as hell",
            "He's so bad, but he does it so well",
            "I can see the end as it begins",
            "My one condition is",
            "Say you'll remember me",
            "Standin' in a nice dress",
            "Starin' at the sunset, babe",
            "Red lips and rosy cheeks",
            "Say you'll see me again",
            "Even if it's just in your",
            "Wildest dreams, ah, ha",
            "Wildest dreams, ah, ha",
            'I said, "No one has to know what we do"',
            "His hands are in my hair, his clothes are in my room",
            "And his voice is a familiar sound",
            "Nothin' lasts forever",
            "But this is gettin' good now",
            "He's so tall and handsome as hell",
            "He's so bad, but he does it so well",
            "And when we've had our very last kiss",
            "My last request it is",
            "Say you'll remember me",
            "Standin' in a nice dress",
            "Starin' at the sunset, babe",
            "Red lips and rosy cheeks",
            "Say you'll see me again",
            "Even if it's just in your",
            "Wildest dreams, ah, ha (Ha, ha)",
            "Wildest dreams, ah, ha",
            "You'll see me in hindsight",
            "Tangled up with you all night",
            "Burnin' it down",
            "Someday, when you leave me",
            "I bet these memories",
            "Follow you around",
            "You'll see me in hindsight",
            "Tangled up with you all night",
            "Burnin' (Burnin') it (It) down (Down)",
            "Someday, when you leave me",
            "I bet these memories",
            "Follow (Follow) you (You) around (Around)",
            "(Follow you around)",
            "Say you'll remember me",
            "Standing in a nice dress",
            "Starin' at the sunset, babe",
            "Red lips and rosy cheeks",
            "Say you'll see me again",
            "Even if it's just pretend",
            "Say you'll remember me",
            "Standin' in a nice dress",
            "Starin' at the sunset, babe",
            "Red lips and rosy cheeks",
            "Say you'll see me again",
            "Even if it's just in your (Just pretend, just pretend)",
            "Wildest dreams, ah, ha (Ah-ah)",
            "Wildest dreams, ah, ha",
            "Even if it's just in your",
            "In your wildest dreams, ah, ha",
            "In your wildest dreams, ah, ha"
          ]
        },
        {
          title: "How You Get The Girl",
          lines: [
            "Oh, oh, oh",
            "Oh, oh, oh",
            "Oh, oh",
            "Oh, oh",
            "Stand there like a ghost, shakin' from the rain, rain",
            `She'll open up the door and say, "Are you insane-ane?"`,
            `Say, "It's been a long six months"`,
            "And you were too afraid to tell her what you want, want",
            "And that's how it works",
            "That's how you get the girl",
            "And then you say",
            '"I want you for worse or for better',
            "I would wait forever and ever",
            "Broke your heart, I'll put it back together",
            'I would wait forever and ever"',
            "And that's how it works",
            "That's how you get the girl, girl, oh",
            "And that's how it works",
            "That's how you get the girl, girl",
            "Remind her how it used to be, be, yeah, yeah",
            "Of pictures in frames, of kisses on cheeks, cheeks",
            "Tell her how you must have lost your mind, ooh",
            "When you left her all alone and never told her why, why",
            "And that's how it works",
            "That's how you lost the girl",
            "And now you say",
            '"I want you for worse or for better',
            "I would wait forever and ever (Ever and ever)",
            "Broke your heart, I'll put it back together (Put it back together)",
            'I would wait forever and ever (Ever and ever)"',
            "And that's how it works",
            "That's how you get the girl, girl, oh",
            "And that's how it works",
            "That's how you get the girl, girl, yeah, yeah",
            "And you know",
            "That I don't want you to go",
            "Remind me how it used to be",
            "Pictures in frames of kisses on cheeks",
            "And say you want me, yeah, yeah, 'cause",
            "And then you say",
            '"I want you for worse or for better (Worse or for better)',
            "I would wait forever and ever (Ever and ever)",
            "Broke your heart, I'll put it back together",
            'I want you forever and ever (I want you forever and ever)"',
            "And that's how it works",
            "That's how you get the girl, girl ('Cause it's how it works)",
            "And that's how it works",
            "That's how you get the girl, girl (Get the girl, that's how it works)",
            "And that's how it works (Oh)",
            "That's how you get the girl, girl (Oh)",
            "And that's how it works",
            "That's how you get the girl, girl",
            "And that's how it works",
            "That's how you got the girl"
          ]
        },
        {
          title: "This Love",
          lines: [
            "Clear blue water",
            "High tide came and brought you in",
            "And I could go on and on, on and on, and I will",
            "Skies grew darker",
            "Currents swept you out again",
            "And you were just gone and gone, gone and gone",
            "In silent screams, in wildest dreams",
            "I never dreamed of this",
            "This love is good, this love is bad",
            "This love is alive back from the dead (Oh-oh-oh)",
            "These hands had to let it go free and",
            "This love came back to me (Oh-oh-oh)",
            "Oh-oh-oh",
            "(Oh-oh-oh)",
            "Tossing, turning",
            "Struggled through the night with someone new",
            "Baby, I could go on and on, on and on",
            "Lantern, burning",
            "Flickered in my mind for only you",
            "But you were still gone, gone, gone",
            "In losin' grip, on sinking ships",
            "You showed up just in time",
            "This love is good, this love is bad",
            "This love is alive back from the dead (Oh-oh-oh)",
            "These hands had to let it go free and",
            "This love came back to me (Oh-oh-oh)",
            "This love left a permanent mark",
            "This love is glowing in the dark (Oh-oh-oh)",
            "These hands had to let it go free and",
            "This love came back to me, oh-oh-oh",
            "(This love, this love, this love, this love) Oh-oh-oh",
            "(This love, this love, this love, this love) Oh-oh-oh",
            "(This love, this love, this love, this love) Oh-oh-oh",
            "(This love, this love, this love, this love)",
            "Your kiss, my cheek, I watched you leave",
            "Your smile, my ghost, I fell to my knees",
            "When you're young, you just run",
            "But you come back to what you need",
            "This love is good, this love is bad",
            "This love is alive back from the dead (Oh-oh-oh)",
            "These hands had to let it go free and",
            "This love came back to me (Oh-oh-oh)",
            "(This love) This love left a permanent mark",
            "(This love) This love is glowing in the dark (Oh-oh-oh)",
            "(This love) These hands had to let it go free and",
            "(This love) This love came back to me, oh-oh-oh",
            "(This love, this love, oh, this love, this love) Oh-oh-oh",
            "(This love, this love, this love, this love) Oh-oh-oh",
            "(This love, this love, this love, this love)",
            "(This love, this love, this love, this love)",
            "This love came back to me, oh-oh-oh"
          ]
        },
        {
          title: "I Know Places",
          lines: [
            "I-I-I-I, I-I-I-I",
            "I-I-I-I, I-I-I-I",
            "I-I-I-I, I-I-I-I, I-I (I, I)",
            "You stand with your hand on my waistline",
            "It's a scene and we're out here in plain sight",
            "I can hear them whisper as we pass by",
            "It's a bad sign, bad sign",
            "Somethin' happens when everybody finds out",
            "See the vultures circlin', dark clouds",
            "Love's a fragile little flame, it could burn out",
            "It could burn out",
            "'Cause they got the cages, they got the boxes and guns",
            "They are the hunters, we are the foxes and we run",
            "Baby, I know places we won't be found",
            "And they'll be chasing their tails tryin' to track us down",
            "'Cause I, I know places we can hide",
            "I know places, I know places",
            "Lights flash and we'll run for the fences",
            "Let them say what they want, we won't hear it",
            "Loose lips sink ships all the damn time",
            "Not this time",
            "Just grab my hand and don't ever drop it, my love",
            "They are the hunters, we are the foxes and we run",
            "Baby (Baby), I know places we won't be found",
            "And they'll (They'll) be (Be) chasing their tails tryin' to track us down",
            "'Cause I, I know places we can hide",
            "I know places",
            "They are the hunters, we are the foxes and we run",
            "Just grab my hand and don't ever drop it, my love",
            "Baby (Baby), I know places we won't be found",
            "And they'll (They'll) be (Be) chasing their tails tryin' to track us down",
            "'Cause I, I know places we can hide",
            "I know places",
            "(I) They take their shots, but we're bulletproof (I know places)",
            "(Hide) And you know, for me, it's always you (I know places)",
            "(I) In the dead of night, your eyes so green (I know places)",
            "(Hide) And I know, for you, it's always me (I know places)",
            "I-I-I-I, I-I-I-I",
            "I-I-I-I, I-I-I-I (I, I)"
          ]
        },
        {
          title: "Clean",
          lines: [
            "The drought was the very worst, ah-ah, ah-ah",
            "When the flowers that we'd grown together died of thirst",
            "It was months and months of back and forth, ah-ah, ah-ah",
            "You're still all over me like a wine-stained dress I can't wear anymore",
            "Hung my head as I lost the war",
            "And the sky turned black like a perfect storm",
            "The rain came pouring down",
            "When I was drownin', that's when I could finally breathe",
            "And by mornin', gone was any trace of you",
            "I think I am finally clean",
            "There was nothin' left to do, ah-ah, ah-ah",
            "When the butterflies turned to dust that covered my whole room",
            "So I punched a hole in the roof, ah-ah, ah-ah",
            "Let the flood carry away all my pictures of you",
            "The water filled my lungs",
            "I screamed so loud, but no one heard a thing",
            "The rain came pourin' down",
            "When I was drownin', that's when I could finally breathe",
            "And by mornin', gone was any trace of you",
            "I think I am finally clean",
            "I think I am finally clean",
            "Ah-ah-ah-ah-ah",
            "Said I think I am finally clean",
            "Ah-ah-ah",
            "Ten months sober, I must admit",
            "Just because you're clean, don't mean you don't miss it",
            "Ten months older, I won't give in",
            "Now that I'm clean, I'm never gonna risk it",
            "The drought was the very worst, ah-ah, ah-ah",
            "When the flowers that we'd grown together died of thirst",
            "The rain came pourin' down",
            "When I was drownin', that's when I could finally breathe",
            "And by mornin', gone was any trace of you",
            "I think I am finally clean",
            "The rain came pourin' down",
            "When I was drownin', that's when I could finally breathe",
            "And by mornin', gone was any trace of you",
            "I think I am finally clean",
            "Finally clean",
            "Think I'm finally clean",
            "Ah-ah-ah-ah",
            "Think I'm finally clean"
          ]
        },
        {
          title: "Wonderland",
          lines: [
            "Flashin' lights",
            "And we took a wrong turn",
            "And we fell down a rabbit hole",
            "You held on tight to me",
            "'Cause nothing's as it seems",
            "And spinning out of control",
            `Didn't they tell us, "Don't rush into things"?`,
            "Didn't you flash your green eyes at me?",
            "Haven't you heard what becomes of curious minds?",
            "Ooh, didn't it all seem new and excitin'?",
            "I felt your arms twistin' around me",
            "I should have slept with one eye open at night",
            "We found Wonderland, you and I got lost in it",
            "And we pretended it could last forever, eh",
            "We found Wonderland, you and I got lost in it",
            "And life was never worse, but never better, eh, eh",
            "In Wonderland",
            "In Wonderland",
            "In Wonderland",
            "In Wonderland",
            "So, we went on our way",
            "Too in love to think straight",
            "All alone or so it seemed",
            "But there were strangers watchin'",
            "And whispers turned to talkin'",
            "And talking turned to screams, oh",
            `Didn't they tell us, "Don't rush into things"?`,
            "Didn't you flash your green eyes at me?",
            "Didn't you calm my fears with a Cheshire-Cat smile?",
            "Ooh, didn't it all seem new and excitin'?",
            "I felt your arms twistin' around me",
            "It's all fun and games 'til somebody loses their mind",
            "But darlin'",
            "We found Wonderland, you and I got lost in it",
            "And we pretended it could last forever, eh",
            "We found Wonderland, you and I got lost in it",
            "And life was never worse, but never better, eh, eh",
            "In Wonderland, eh, eh",
            "In Wonderland",
            "In Wonderland, woah",
            "In Wonderland",
            "I reached for you, but you were gone",
            "I knew I had to go back home",
            "You searched the world for somethin' else",
            "To make you feel like what we had",
            "And in the end, in Wonderland, we both went mad",
            "Oh",
            "We found Wonderland, you and I got lost in it",
            "And we pretended it could last forever (Could last forever)",
            "We found Wonderland, you and I got lost in it (Got lost in it)",
            "And life was never worse, but never better (Never better)",
            "We found Wonderland, you and I got lost in it (In Wonderland)",
            "And we pretended it could last forever (In Wonderland)",
            "We found Wonderland, you and I got lost in it (In Wonderland)",
            "And life was never worse, but never better",
            "In Wonderland"
          ]
        },
        {
          title: "You Are In Love",
          lines: [
            "One look, dark room, meant just for you",
            "Time moved too fast, you play it back",
            "Buttons on a coat, lighthearted joke",
            "No proof, not much, but you saw enough",
            "Small talk, he drives, coffee at midnight",
            "The light reflects the chain on your neck",
            'He says, "Look up" and your shoulders brush',
            "No proof, one touch, but you felt enough",
            "You can hear it in the silence (Silence), silence (Silence), you",
            "You can feel it on the way home (Way home), way home (Way home), you",
            "You can see it with the lights out (See it with the lights out), lights out (Lights out)",
            "You are in love, true love, you are in love",
            "Morning, his place, burnt toast, Sunday",
            "You keep his shirt, he keeps his word",
            "And for once, you let go of your fears and your ghosts",
            "One step, not much, but it said enough",
            "You kiss on sidewalks, you fight, then you talk",
            "One night, he wakes, strange look on his face",
            `Pauses, then says, "You're my best friend"`,
            "And you knew what it was, he is in love",
            "You can hear it in the silence (Silence), silence (Silence), you",
            "You can feel it on the way home (Way home), way home (Way home), you",
            "You can see it with the lights out (See it with the lights out), lights out (Lights out)",
            "You are in love, true love, you are in love",
            "And so it goes",
            "You two are dancing in a snow globe 'round and 'round",
            "And he keeps a picture of you in his office downtown",
            "And you understand now",
            "Why they lost their minds and fought the wars",
            "And why I've spent my whole life trying to put it into words",
            "'Cause you can hear it in the silence",
            "You can feel it on the way home",
            "You can see it with the lights out",
            "You are in love, true love, you are in love",
            "You can hear it in the silence (Silence), silence (Silence), you",
            "You can feel it on the way home (Way home), way home (Way home), you",
            "You can see it with the lights out (See it with the lights out), lights out (Lights out)",
            "You are in love, true love, you are in love (Ah)",
            "You can hear it in the silence (Silence), silence (Silence), you (Ah)",
            "You can feel it on the way home (Way home), way home (Way home), you (Ah)",
            "You can see it with the lights out (See it with the lights out), lights out (Lights out)",
            "You are in love, true love, you are in love"
          ]
        },
        {
          title: "New Romantics",
          lines: [
            "We're all bored, we're all so tired of everything",
            "We wait for trains that just aren't comin'",
            "We show off our different scarlet letters",
            "Trust me, mine is better",
            "We're so young, but we're on the road to ruin",
            "We play dumb, but we know exactly what we're doin'",
            "We cry tears of mascara in the bathroom",
            "Honey, life is just a classroom",
            "Ah-ah-ah-ah-ah-ah",
            "'Cause, baby, I could build a castle",
            "Out of all the bricks they threw at me",
            "And every day is like a battle",
            "But every night with us is like a dream",
            "Baby, we're the new romantics, come on, come along with me",
            "Heartbreak is the national anthem, we sing it proudly",
            "We are too busy dancin' to get knocked off our feet",
            "Baby, we're the new romantics",
            "The best people in life are free",
            "We're all here, the lights and noise are blinding",
            "We hang back, it's all in the timing",
            "It's poker, he can't see it in my face",
            "But I'm about to play my Ace, ah",
            "We need love, but all we want is danger",
            "We team up, then switch sides like a record changer",
            "The rumors are terrible and cruel",
            "But, honey, most of them are true",
            "Ah-ah-ah-ah-ah-ah",
            "'Cause, baby, I could build a castle",
            "Out of all the bricks they threw at me",
            "And every day is like a battle",
            "But every night with us is like a dream",
            "Baby, we're the new romantics, come on, come along with me",
            "Heartbreak is the national anthem, we sing it proudly",
            "We are too busy dancin' (Yeah) to get knocked off our feet (Hey)",
            "Baby, we're the new romantics",
            "The best people in life are free",
            "(Oh, oh, oh-oh, oh) Oh",
            "(Oh, oh, oh-oh, oh) So, come on, come along with me",
            "(Oh, oh, oh-oh, oh) The best people in life are free",
            "(Oh, oh, oh-oh, oh)",
            "Please, take my hand and",
            "Please, take me dancin' and",
            "Please, leave me stranded",
            "It's so romantic (It's so romantic)",
            "Ah-ah-ah-ah-ah-ah",
            "'Cause, baby, I could build a castle (Oh, baby, I could build a castle)",
            "Out of all the bricks they threw at me (At me)",
            "And every day is like a battle (Oh)",
            "But every night with us is like a dream (Is like a dream)",
            "'Cause baby, I could build a castle (Castle)",
            "Out of all the bricks they threw at me",
            "And every day is like a battle (And every day is like a battle, oh)",
            "But every night with us is like a dream",
            "Baby, we're the new romantics, come on, come along with me",
            "Heartbreak is the national anthem, we sing it proudly",
            "We are too busy dancin' (Hey) to get knocked off our feet",
            "Baby, we're the new romantics",
            "The best people in life are free"
          ]
        },
        {
          title: "\u201CSlut!\u201D",
          lines: [
            "Flamingo pink, Sunrise-Boulevard",
            "Clink, clink, being this young is art",
            "Aquamarine, moonlit swimmin' pool",
            "What if all I need is you?",
            "Got love-struck, went straight to my head",
            "Got lovesick all over my bed",
            "Love to think you'll never forget",
            "Handprints in wet cement",
            "Adorned with smoke on my clothes",
            "Lovelorn and nobody knows",
            "Love thorns all over this rose",
            "I'll pay the price, you won't",
            "But if I'm all dressed up",
            "They might as well be lookin' at us",
            "And if they call me a slut",
            "You know it might be worth it for once",
            "And if I'm gonna be drunk",
            "I might as well be drunk in love",
            "Send the code, he's waitin' there",
            "The sticks and stones they throw froze mid-air",
            "Everyone wants him, that was my crime",
            "The wrong place at the right time",
            "And I break down, then he's pullin' me in",
            "In a world of boys, he's a gentleman",
            "Got love-struck, went straight to my head (Straight to my head)",
            "Got lovesick all over my bed (Over my bed)",
            "Love to think you'll never forget",
            "We'll pay the price, I guess",
            "But if I'm all dressed up (If I'm all dressed up)",
            "They might as well be lookin' at us (Lookin' at us)",
            "And if they call me a slut (If they call me a slut)",
            "You know it might be worth it for once (Worth it for once)",
            "And if I'm gonna be drunk",
            "I might as well be drunk in love",
            "Half asleep",
            "Takin' your time in the tangerine",
            "Neon light, this is luxury",
            "You're not sayin' you're in love with me",
            "But you're goin' to",
            "Half awake",
            "Takin' your chance, it's a big mistake",
            'I said, "It might blow up in your pretty face"',
            `I'm not sayin', "Do it anyway" (Do it anyway)`,
            "But you're going to",
            "(Up)",
            "And if they call me a (Slut)",
            "You know it might be worth it for once",
            "And if I'm gonna be (Drunk)",
            "I might as well be drunk in love"
          ]
        },
        {
          title: "Say Don't Go",
          lines: [
            "I've known it from the very start",
            "We're a shot in the darkest dark",
            "Oh no, oh no, I'm unarmed",
            "The waiting is a sadness",
            "Fading into madness",
            "Oh no, oh no, it won't stop",
            "I'm standin' on a tightrope alone",
            "I hold my breath a little bit longer",
            "Halfway out the door, but it won't close",
            "I'm holdin' out hope for you to",
            `Say, "Don't go"`,
            `I would stay forever if you say, "Don't go"`,
            "Why'd you have to lead me on?",
            "Why'd you have to twist the knife?",
            "Walk away and leave me bleedin', bleedin'?",
            "Why'd you whisper in the dark",
            "Just to leave me in the night?",
            "Now your silence has me screamin', screamin'",
            `(Say) Say, "(Don't) don't (Go) go"`,
            `I would stay forever if you (Say) say, "(Don't) don't (Go) go"`,
            "(Say, say, say, say)",
            "Now I'm pacin' on shaky ground",
            "Strike a match, then you blow it out",
            "Oh no, oh no, it's not fair",
            "'Cause you kiss me and it stops time",
            "And I'm yours, but you're not mine",
            "Oh no, oh no, you're not there",
            "I'm standin' on the sidewalk alone",
            "I wait for you to drive by",
            "I'm tryna see the cards that you won't show",
            "I'm about to fold unless you",
            `(Say) Say, "(Don't) don't (Go) go"`,
            `I would stay forever if you (Say) say, "(Don't) don't (Go) go"`,
            "Why'd you have to lead me on?",
            "Why'd you have to twist the knife?",
            "Walk away and leave me bleedin', bleedin'?",
            "Why'd you whisper in the dark",
            "Just to leave me in the night?",
            "Now your silence has me screamin', screamin'",
            `(Say) Say, "(Don't) don't (Go) go"`,
            `I would stay forever if you (Say) say, "(Don't) don't (Go) go"`,
            "(Say, say, say, say)",
            "Why'd you have to (Why'd you have to)",
            "Make me want you? (Make me want you)",
            "Why'd you have to (Why'd you have to)",
            "Give me nothin' back?",
            "Why'd you have to (Why'd you have to)",
            "Make me love you? (Make me love you)",
            'I said, "I love you" (I said, "I love you")',
            "You say nothin' back",
            "Why'd you have to lead me on? (Oh)",
            "Why'd you have to twist the knife?",
            "Walk away and leave me bleedin', bleedin'?",
            "Why'd you whisper in the dark",
            "Just to leave me in the night?",
            "Now your silence has me screamin', screamin'",
            `(Say) Say, "(Don't) don't (Go) go"`,
            `I would stay forever if you (Say) say, "(Don't) don't (Go) go," woah`,
            "(Say, say, say, say)",
            "But you won't, but you won't, but you won't",
            `I would stay forever if you say, "Don't go"`,
            "But you won't, but you won't, but you won't"
          ]
        },
        {
          title: "Now That We Don't Talk",
          lines: [
            "You went to a party",
            "I heard from everybody",
            "You part the crowd like the Red-Sea",
            "Don't even get me started",
            "Did you get anxious though",
            "On the way home?",
            "I guess I'll never, ever know",
            "Now that we don't talk",
            "You grew your hair long",
            "You got new icons",
            "And from the outside",
            "It looks like you're tryin' lives on",
            "I miss the old ways",
            "You didn't have to change",
            "But I guess I don't have a say",
            "Now that we don't talk",
            "I call my mom, she said that it was for the best",
            "Remind myself, the more I gave, you'd want me less",
            "I cannot be your friend, so I pay the price of what I lost",
            "And what it cost, now that we don't talk",
            "What do you tell your friends we",
            "Shared dinners, long weekends with?",
            "Truth is, I can't pretend it's",
            "Platonic, it's just ended, so",
            "I call my mom, she said to get it off my chest (Off my chest)",
            "Remind myself the way you faded 'til I left (Until I left)",
            "I cannot be your friend, so I pay the price of what I lost (Of what I lost)",
            "And what it cost, now that we don't talk",
            "I don't have to pretend I like acid rock",
            "Or that I'd like to be on a mega yacht",
            "With important men who think important thoughts",
            "Guess maybe I am better off now that we don't talk",
            "And the only way back to my dignity",
            "Was to turn into a shrouded mystery",
            "Just like I had been when you were chasing me",
            "Guess this is how it has to be now that we don't talk"
          ]
        },
        {
          title: "Suburban Legends",
          lines: [
            "You had people who called you on unmarked numbers",
            "In my peripheral vision",
            "I let it slide like a hose on a slippery plastic summer",
            "All was quickly forgiven",
            "You were so magnetic, it was almost obnoxious",
            "Flush with the currency of cool",
            "I was always turnin' out my empty pockets",
            "And when it came to you",
            "I didn't come here to make friends",
            "We were born to be suburban legends",
            "When you hold me, it holds me together",
            "And you kiss me in a way that's gonna screw me up forever",
            "I had the fantasy that maybe our mismatched star signs",
            "Would surprise the whole school",
            "When I ended up back at our class reunion",
            "Walkin' in with you",
            "You'd be more than a chapter in my old diaries",
            "With the pages ripped out",
            "I am standin' in a 1950s gymnasium",
            "And I can still see you now",
            "I didn't come here to make friends",
            "We were born to be suburban legends",
            "When you hold me, it holds me together",
            "And you kiss me in a way that's gonna screw me up forever",
            "I know that you still remember",
            "We were born to be national treasures",
            "When you told me we'd get back together",
            "And you kissed me in a way that's gonna screw me up forever",
            "Tick-tock on the clock, I pace down your block",
            "I broke my own heart 'cause you were too polite to do it",
            "Waves crash on the shore, I dash to the door",
            "You don't knock anymore and my whole life's ruined",
            "Tick-tock on the clock, I pace down your block",
            "I broke my own heart 'cause you were too polite to do it",
            "Waves crash to the shore, I dash to the door",
            "You don't knock anymore and I always knew it",
            "That my life would be ruined"
          ]
        },
        {
          title: "Is It Over Now?",
          lines: [
            "(Is it? Is it? Is it? Is it? Is it?)",
            "Once the flight had flown (Uh-huh)",
            "With the wilt of the rose (Uh-huh)",
            "I slept all alone (Uh-huh)",
            "You still wouldn't go",
            "Let's fast forward to three hundred takeout coffees later",
            "I see your profile and your smile on unsuspecting waiters",
            "You dream of my mouth before it called you a lying traitor",
            "You search in every maiden's bed for somethin' greater, baby",
            "Was it over when she laid down on your couch?",
            "Was it over when he unbuttoned my blouse?",
            '"Come here," I whispered in your ear',
            "In your dream as you passed out, baby",
            "Was it over then? And is it over now?",
            "(Is it? Is it? Is it?)",
            "When you lost control (Uh-huh)",
            "Red blood, white snow (Uh-huh)",
            "Blue dress on a boat (Uh-huh)",
            "Your new girl is my clone",
            "And did you think I didn't see you?",
            "There were flashin' lights",
            "At least I had the decency",
            "To keep my nights out of sight",
            "Only rumors 'bout my hips and thighs",
            "And my whispered sighs",
            "Oh, Lord, I think about jumpin'",
            "Off of very tall somethings",
            "Just to see you come runnin'",
            "And say the one thing I've been wanting, but no",
            "Let's fast forward to three hundred awkward blind dates later (Oh)",
            "If she's got blue eyes, I will surmise that you'll probably date her (Oh, no)",
            "You dream of my mouth before it called you a lying traitor (Oh)",
            "You search in every model's bed for somethin' greater, baby",
            "Was it over when she laid down on your couch?",
            "Was it over when he unbuttoned my blouse?",
            '"Come here," I whispered in your ear',
            "In your dream as you passed out, baby",
            "Was it over then? And is it over now?",
            "Uh-huh",
            "(Is it? Is it? Is it?)",
            "Uh-huh",
            "(Is it? Is it?)",
            "Think I didn't see you?",
            "There were flashin' lights",
            "At least I had the decency",
            "To keep my nights out of sight",
            "Only rumors 'bout my hips and thighs",
            "And my whispered sighs",
            "Oh, Lord, I think about jumpin'",
            "Off of very tall somethings",
            "Just to see you come runnin' (Runnin')",
            "And say the one thing I've been wanting, but no",
            "(Flashin' lights; Oh, Lord; Oh)",
            "Let's fast forward to three hundred takeout coffees later (Oh)",
            "(Flashin' lights) I was hoping you'd be there",
            "And say the one thing (Oh, Lord)",
            "I've been wanting (Oh, Lord)",
            "But no",
            "(Was it? Was it? Was it? Was it? Was it? Was it?)"
          ]
        },
        {
          title: "Sweeter Than Fiction",
          lines: [
            "Hit the ground, hit the ground, hit the ground, oh, oh",
            'Only sound, only sound that you hear is, "No"',
            "You never saw it comin', slipped when you started runnin'",
            "And now you've come undone and I, I, I, I",
            "Seen you fall, seen you crawl on your knees, eh, ayy",
            "Seen you lost in a crowd, seen your colors fade",
            "Wish I could make it better, someday, you won't remember",
            "This pain you thought would last forever and ever and",
            "There you'll stand, ten feet tall",
            'I will say, "I knew it all along"',
            "Your eyes, wider than distance",
            "This life is sweeter than fiction",
            "Just a shot, just a shot in the dark, oh, oh",
            "All you got, all you got are your shattered hopes",
            "They never saw it comin', you hit the ground runnin'",
            "And now you're on to somethin', I, I, I say",
            '"What a sight, what a sight" when the light came on',
            "Proved me right, proved me right when you proved them wrong",
            "And, in this perfect weather, it's like we don't remember",
            "The rain we thought would last forever and ever",
            "There you'll stand, ten feet tall",
            'I will say, "I knew it all along"',
            "Your eyes, wider than distance",
            "This life is sweeter than fiction (Woah)",
            "There you'll stand, next to me (Next to me)",
            "All at once, the rest is history",
            "Your eyes, wider than distance",
            "This life is sweeter than fiction (Woah; Sweeter than fiction)",
            "I'll be one of the many sayin'",
            '"Look at you now, look at you now and now"',
            "I'll be one of the many saying",
            `"You've made us proud, you've made us proud, proud"`,
            "I'll be one of the many sayin'",
            '"Look at you now, look at you now and now"',
            "I'll be one of the many sayin'",
            `"You've made us proud, you've made us proud, proud"`,
            "And when they call your name",
            "And they put your picture in a frame",
            "You know that I'll be there time and again",
            "'Cause I loved you when, when you",
            "Hit the ground, hit the ground, hit the ground, oh, oh",
            'Only sound, only sound that you heard was, "No"',
            "Now, in this perfect weather, it's like we don't remember",
            "The rain we thought would last forever and ever (Forever)",
            "There you'll stand, ten feet tall (Ten feet tall)",
            'I will say, "I knew it all along" (Along)',
            "Your eyes, wider than distance (I knew it all along)",
            "This life is sweeter than fiction (Sweeter than fiction)",
            "There you'll stand, next to me (Next to me)",
            "All at once, the rest is history (Ooh)",
            "Your eyes, wider than distance (I knew it all along)",
            "This life is sweeter than fiction (It's sweeter than fiction)",
            "It's sweeter than fiction",
            "It's sweeter, yeah",
            "It's sweeter, it's sweeter",
            "It's sweeter than fiction"
          ]
        }
      ]
    },
    {
      title: "Reputation",
      songs: [
        {
          title: "...Ready For It?",
          lines: [
            "Knew he was a killer first time that I saw him",
            "Wondered how many girls he had loved and left haunted",
            "But if he's a ghost, then I can be a phantom",
            "Holdin' him for ransom, some",
            "Some boys are tryin' too hard, he don't try at all, though",
            "Younger than my exes, but he act like such a man, so",
            "I see nothin' better, I keep him forever",
            "Like a vendetta-ta",
            "I, I, I see how this is gon' go",
            "Touch me and you'll never be alone",
            "I-Island breeze and lights down low",
            "No one has to know",
            "In the middle of the night, in my dreams",
            "You should see the things we do, baby, mmm",
            "In the middle of the night, in my dreams",
            "I know I'm gonna be with you, so I take my time",
            "Are you ready for it?",
            "Knew I was a robber first time that he saw me",
            "Stealin' hearts and runnin' off and never sayin' sorry",
            "But if I'm a thief, then he can join the heist and",
            "We'll move to an island and",
            "And he can be my jailer, Burton to this Taylor",
            "Every love I've known in comparison is a failure",
            "I forget their names now, I'm so very tame now",
            "Never be the same now, now",
            "I, I, I see how this is gon' go (Go)",
            "Touch me and you'll never be alone",
            "I-Island breeze and lights down low (Low)",
            "No one has to know (No one has to know)",
            "In the middle of the night, in my dreams (Yeah)",
            "You should see the things we do (We do), baby, mmm (Mmm)",
            "In the middle of the night (The night) in my dreams (My dreams)",
            "I know I'm gonna be with you, so I take my time",
            "Are you ready for it? Oh",
            "Are you ready for it?",
            "Baby, let the games begin",
            "Let the games begin",
            "Let the games begin, ah-ah",
            "Baby, let the games begin",
            "Let the games begin",
            "Let the games begin",
            "I, I, I see how this is gon' go",
            "Touch me and you'll never be alone",
            "I-Island breeze and lights down low",
            "No one has to know",
            "In the middle of the night (Night), in my dreams (My dreams)",
            "You should see the things we do (We do), baby (Baby), mmm (Yeah)",
            "In the middle of the night, in my dreams (My dreams)",
            "I know I'm gonna be with you, so I take my time (Yeah)",
            "In the middle of the night",
            "Baby, let the games begin",
            "Let the games begin",
            "Let the games begin",
            "Are you ready for it?",
            "Baby, let the games begin",
            "Let the games begin",
            "Let the games begin",
            "Are you ready for it?"
          ]
        },
        {
          title: "End Game",
          lines: [
            "I wanna be your end game",
            "I wanna be your first string",
            "I wanna be your A-Team (Woah, woah)",
            "I wanna be your end game, end game",
            "Big reputation, big reputation",
            "Ooh, you and me, we got big reputations, ah",
            "And you heard about me, ooh",
            "I got some big enemies (Yeah)",
            "Big reputation, big reputation",
            "Ooh, you and me would be a big conversation, ah (Git, git)",
            "And I heard about you, ooh (Yeah)",
            "You like the bad ones too",
            "You so dope, don't overdose, I'm so stoked, I need a toast",
            "We do the most, I'm in the Ghost like I'm whippin' a boat",
            "I got a reputation, girl, that don't precede me (Yeah)",
            "I'm one call away whenever you need me (Yeah)",
            "I'm in a G5 (Yeah), come to the A-Side (Yeah)",
            "I got a bad boy persona, that's what they like",
            "You love it, I love it too 'cause you my type",
            "You hold me down and I protect you with my life",
            "I don't wanna touch you (I don't wanna be)",
            "Just another ex-love (You don't wanna see)",
            "I don't wanna miss you (I don't wanna miss you)",
            "Like the other girls do",
            "I don't wanna hurt you (I just wanna be)",
            "Drinkin' on the beach with (You all over me)",
            "I know what they all say (I know what they all say)",
            "But I ain't tryna play",
            "I wanna be your end game (End game)",
            "I wanna be your first string (First string)",
            "I wanna be your A-Team (A-Team)",
            "I wanna be your end game, end game",
            "Knew her when I was young, reconnected when we were little bit older",
            "Both sprung, I got issues and chips on both of my shoulders",
            "Reputation precedes me, in rumours, I'm knee-deep",
            "The truth is, it's easier to ignore it, believe me",
            "Even when we'd argue, we'd not do it for long",
            "And you understand the good and bad end up in the song",
            "For all your beautiful traits and the way you do it with ease",
            "For all my flaws, paranoia and insecurities",
            "I've made mistakes and made some choices, that's hard to deny",
            "After the storm, somethin' was born on the 4th of July",
            "Our past days were the fun, this end game is the one",
            "With four words on the tip of my tongue, I'll never say it",
            "I don't wanna touch you (I don't wanna be)",
            "Just another ex-love (You don't wanna see)",
            "I don't wanna miss you (I don't wanna miss you)",
            "Like the other girls do",
            "I don't wanna hurt you (I just wanna be)",
            "Drinkin' on the beach with (You all over me)",
            "I know what they all say (Yeah)",
            "But I ain't tryna play (Ooh)",
            "I wanna be your end game (End game)",
            "I wanna be your first string (Wanna be your first string)",
            "I wanna be your A-Team (A-Team)",
            "I wanna be your end game, end game",
            "Big reputation, big reputation",
            "Ooh, you and me, we got big reputations, ah",
            "And you heard about me, ooh",
            "I got some big enemies (Hey)",
            "Big reputation, big reputation (Big reputation, yeah)",
            "Ooh, you and me would be a big conversation, ah",
            "And I heard about you, ooh",
            "You like the bad ones too",
            "I hit you like bang, we tried to forget it, but we just couldn't",
            "And I bury hatchets, but I keep maps of where I put 'em",
            "Reputation precedes me, they told you I'm crazy",
            "I swear I don't love the drama, it loves me",
            "And I can't let you go, your handprints on my soul",
            "It's like your eyes are liquor, it's like your body is gold",
            "You've been callin' my bluff on all my usual tricks",
            "So here's the truth from my red lips (Ooh, ah)",
            "I wanna be your end game (End game)",
            "I wanna be your first string (Me and you; First string)",
            "I wanna be your A-Team (Hey; Be your A-Team now; A-Team)",
            "I wanna be your end game, end game",
            "I wanna be your end game (Oh, I do; End game)",
            "I wanna be your first string (First string)",
            "I wanna be your A-Team (A-Team)",
            "I wanna be your end game, end game"
          ]
        },
        {
          title: "I Did Something Bad",
          lines: [
            "I never trust a narcissist, but they love me",
            "So I play 'em like a violin",
            "And I make it look, oh, so easy",
            "'Cause for every lie I tell them, they tell me three",
            "This is how the world works",
            "Now all he thinks about is me",
            "I can feel the flames on my skin",
            "Crimson red paint on my lips",
            "If a man talks shit, then I owe him nothin'",
            "I don't regret it one bit 'cause he had it comin'",
            "They say I did somethin' bad",
            "Then why's it feel so good?",
            "They say I did somethin' bad",
            "But why's it feel so good?",
            "Most fun I ever had",
            "And I'd do it over and over and over again if I could",
            "It just felt so good, good",
            "Ra-di-di-di-di-di-di-di-di-di-da-da",
            "Ra-di-di-di-di-di-di-di-di-di-da-da",
            "Ra-di-di-di-di-di-di-di-di-di-da-da",
            "Da-da, da, da",
            "I never trust a playboy, but they love me",
            "So I fly 'em all around the world",
            "And I let them think they saved me",
            "They never see it comin', what I do next",
            "This is how the world works",
            "You gotta leave before you get left",
            "I can feel the flames on my skin",
            `He says, "Don't throw away a good thing"`,
            "But if he drops my name, then I owe him nothin'",
            "And if he spends my change, then he had it comin'",
            "They say I did somethin' bad (Da-da)",
            "Then why's it feel so good?",
            "They say I did somethin' bad",
            "But why's it feel so good?",
            "Most fun I ever had",
            "And I'd do it over and over and over again if I could",
            "It just felt so good, good",
            "Ra-di-di-di-di-di-di-di-di-di-da-da",
            "Ra-di-di-di-di-di-di-di-di-di-da-da",
            "(It just felt so good)",
            "Ra-di-di-di-di-di-di-di-di-di-da-da",
            "Da-da, da, da",
            "They're burning all the witches, even if you aren't one",
            "They got their pitchforks and proof, their receipts and reasons",
            "They're burning all the witches, even if you aren't one",
            "So light me up (Light me up), light me up (Light me up)",
            "Light me up, go ahead and light me up (Light me up)",
            "Light me up (Light me up), light me up (Light me up)",
            "Light me up (Light me up), light me up",
            "They say I did somethin' bad (Oh)",
            "Then why's it feel so good? (So good)",
            "They say I did somethin' bad",
            "But why's it feel so (Good) good?",
            "Most fun I ever had (Most fun I ever had)",
            "And I'd do it over and over and over again if I could",
            "It just felt so good (Good), good",
            "Ra-di-di-di-di-di-di-di-di-di-da-da (Bad)",
            "Ra-di-di-di-di-di-di-di-di-di-da-da",
            "Oh, they say I did somethin' bad (They say I did somethin' bad)",
            "Ra-di-di-di-di-di-di-di-di-di-da-da",
            "Then why's it feel so good, good?",
            "So good (Bad), why's it feel so good?",
            "Why's it feel, why's it feel so good? (Bad)",
            "It just felt so good, good"
          ]
        },
        {
          title: "Don't Blame Me",
          lines: [
            "Don't blame me, love made me crazy",
            "If it doesn't, you ain't doin' it right",
            "Lord, save me, my drug is my baby",
            "I'll be usin' for the rest of my life",
            "I've been breakin' hearts a long time",
            "And toyin' with them older guys",
            "Just playthings for me to use",
            "Somethin' happened for the first time",
            "In the darkest little paradise",
            "Shaking, pacin', I just need you",
            "For you, I would cross the line",
            "I would waste my time, I would lose my mind",
            `They say, "She's gone too far this time"`,
            "Don't blame me, love made me crazy",
            "If it doesn't, you ain't doin' it right",
            "Lord, save me, my drug is my baby",
            "I'll be usin' for the rest of my life",
            "Don't blame me, love made me crazy",
            "If it doesn't, you ain't doin' it right",
            "Oh Lord, save me, my drug is my baby",
            "I'll be usin' for the rest of my life",
            "My name is whatever you decide and",
            "I'm just gonna call you mine",
            "I'm insane, but I'm your baby (Your baby)",
            "Echoes (Echoes) of your name inside my mind",
            "Halo hidin' my obsession",
            "I once was poison ivy, but now, I'm your daisy",
            "And, baby, for you, I (I) would (Would) fall from grace",
            "Just (Just) to (To) touch your face, if (If) you (You) walk away",
            "I'd beg ya on my knees to stay",
            "Don't blame me, love made me crazy",
            "If it doesn't, you ain't doin' it right",
            "Lord, save me, my drug is my baby",
            "I'll be usin' for the rest of my life (Yeah, ooh)",
            "Don't blame me, love made me crazy",
            "If it doesn't, you ain't doin' it right",
            "Oh Lord, save me, my drug is my baby",
            "I'll be usin' for the rest of my life",
            "I get so high, oh",
            "Every time you're, every time you're lovin' me",
            "You're lovin' me",
            "Trip of my life, oh",
            "Every time you're, every time you're touchin' me",
            "You're touchin' me",
            "Every time you're, every time you're lovin' me",
            "Oh Lord, save me, my drug is my baby",
            "I'll be usin' for the rest of my life",
            "(Usin' for the rest of my life, oh, woah)",
            "Don't blame me, love made me crazy",
            "If it doesn't, you ain't doin' it right (Doin' it right, no)",
            "Lord, save me, my drug is my baby",
            "I'll be usin' for the rest of my life (Oh)",
            "Don't blame me, love made me crazy (Ooh)",
            "If it doesn't, you ain't doin' it right (You ain't doin', babe)",
            "Oh Lord, save me, my drug is my baby",
            "I'll be usin' for the rest of my life (I'll be usin', I'll be usin')",
            "I get so high, oh",
            "Every time you're, every time you're lovin' me",
            "You're lovin' me",
            "Oh Lord, save me, my drug is my baby",
            "I'll be usin' for the rest of my life"
          ]
        },
        {
          title: "Delicate",
          lines: [
            "This ain't for the best",
            "My reputation's never been worse, so",
            "You must like me for me",
            "We can't make",
            "Any promises now, can we, babe?",
            "But you can make me a drink",
            "Dive bar on the East-Side, where you at?",
            "Phone lights up my nightstand in the black",
            "Come here, you can meet me in the back",
            "Dark jeans and your Nikes, look at you",
            "Oh, damn, never seen that color blue",
            "Just think of the fun things we could do",
            "('Cause I like you) This ain't for the best",
            "My reputation's never been worse, so",
            "You must like me for me",
            "(Yeah, I want you) We can't make",
            "Any promises now, can we, babe?",
            "But you can make me a drink",
            "Is it cool that I said all that?",
            "Is it chill that you're in my head?",
            "'Cause I know that it's delicate (Delicate)",
            "Is it cool that I said all that?",
            "Is it too soon to do this yet?",
            "'Cause I know that it's delicate",
            "Isn't it? Isn't it? Isn't it? Isn't it?",
            "Isn't it? Isn't it? Isn't it? Isn't it delicate?",
            "Third floor on the West-Side, me and you",
            "Handsome, you're a mansion with a view",
            "Do the girls back home touch you like I do?",
            "Long night with your hands up in my hair",
            "Echoes of your footsteps on the stairs",
            "Stay here, honey, I don't wanna share",
            "('Cause I like you) This ain't for the best",
            "My reputation's never been worse, so",
            "You must like me for me",
            "(Yeah, I want you) We can't make",
            "Any promises now, can we, babe?",
            "But you can make me a drink",
            "Is it cool that I said all that?",
            "Is it chill that you're in my head?",
            "'Cause I know that it's delicate (Delicate)",
            "Is it cool that I said all that?",
            "Is it too soon to do this yet?",
            "'Cause I know that it's delicate",
            "Isn't it? Isn't it? Isn't it? Isn't it?",
            "Isn't it? Isn't it? Isn't it? Isn't it delicate?",
            "Sometimes, I wonder, when you sleep",
            "Are you ever dreaming of me?",
            "Sometimes, when I look into your eyes",
            "I pretend you're mine all the damn time",
            "('Cause I like you)",
            "Is it cool that I said all that?",
            "Is it chill that you're in my head?",
            "'Cause I know that it's delicate (Delicate)",
            "(Yeah, I want you)",
            "Is it cool that I said all that?",
            "Is it too soon to do this yet?",
            "'Cause I know that it's delicate (Delicate)",
            "('Cause I like you)",
            "Is it cool that I said all that? (Isn't it?)",
            "Is it chill that you're in my head? (Isn't it? Isn't it?)",
            "'Cause I know that it's delicate (Isn't it delicate?)",
            "(Yeah, I want you)",
            "Is it cool that I said all that? (Isn't it?)",
            "Is it too soon to do this yet? (Isn't it? Isn't it?)",
            "'Cause I know that it's delicate",
            "Isn't it delicate?"
          ]
        },
        {
          title: "Look What You Made Me Do",
          lines: [
            "I don't like your little games",
            "Don't like your tilted stage",
            "The role you made me play",
            "Of the fool, no, I don't like you",
            "I don't like your perfect crime",
            "How you laugh when you lie",
            "You said the gun was mine",
            "Isn't cool, no, I don't like you (Oh)",
            "But I got smarter, I got harder in the nick of time",
            "Honey, I rose up from the dead, I do it all the time",
            "I've got a list of names and yours is in red, underlined",
            "I check it once, then I check it twice, oh",
            "Ooh, look what you made me do",
            "Look what you made me do",
            "Look what you just made me do",
            "Look what you just made me",
            "Ooh, look what you made me do",
            "Look what you made me do",
            "Look what you just made me do",
            "Look what you just made me do",
            "I (I) don't (Don't) like your kingdom keys (Keys)",
            "They (They) once belonged to me (Me)",
            "You (You) asked me for a place to sleep",
            "Locked me out and threw a feast (What?)",
            "The world moves on, another day, another drama, drama",
            "But not for me, not for me, all I think about is karma",
            "And then the world moves on, but one thing's for sure",
            "Maybe I got mine, but you'll all get yours",
            "But I got smarter, I got harder in the nick of time (Nick of time)",
            "Honey, I rose up from the dead, I do it all the time (I do it all the time)",
            "I've got a list of names and yours is in red, underlined",
            "I check it once, then I check it twice, oh",
            "Ooh, look what you made me do",
            "Look what you made me do",
            "Look what you just made me do",
            "Look what you just made me",
            "Ooh, look what you made me do",
            "Look what you made me do",
            "Look what you just made me do",
            "Look what you just made me do",
            "I don't trust nobody and nobody trusts me",
            "I'll be the actress starrin' in your bad dreams",
            "I don't trust nobody and nobody trusts me",
            "I'll be the actress starrin' in your bad dreams",
            "I don't trust nobody and nobody trusts me",
            "I'll be the actress starrin' in your bad dreams",
            "I don't trust nobody and nobody trusts me",
            "I'll be the actress starrin' in your bad dreams",
            "(Ooh, look what you made me do)",
            "(Look what you made me do)",
            "(Look what you just made me do)",
            "(Look what you just made me)",
            `"I'm sorry, the old Taylor can't come to the phone right now"`,
            "(Ooh, look what you made me do)",
            "(Look what you made me do)",
            "(Look what you just made me)",
            `"Why? Oh, 'cause she's dead" (Oh)`,
            "Ooh, look what you made me do",
            "Look what you made me do",
            "Look what you just made me do",
            "Look what you just made me",
            "Ooh, look what you made me do",
            "Look what you made me do",
            "Look what you just made me do",
            "Look what you just made me do",
            "Ooh, look what you made me do",
            "Look what you made me do",
            "Look what you just made me do",
            "Look what you just made me",
            "Ooh, look what you made me do",
            "Look what you made me do",
            "Look what you just made me do",
            "Look what you just made me do"
          ]
        },
        {
          title: "So It Goes...",
          lines: [
            "See you in the dark",
            "All eyes on you, my magician",
            "All eyes on us",
            "You make everyone disappear and",
            "Cut me into pieces",
            "Gold cage, hostage to my feelings",
            "Back against the wall",
            "Trippin', trip-trippin' when you're gone",
            "'Cause we break down a little",
            "But when you get me alone, it's so simple",
            "'Cause, baby, I know what you know",
            "We can feel it",
            "And all the pieces fall right into place",
            "Gettin' caught up in a moment, lipstick on your face",
            "So it goes",
            "I'm yours to keep and I'm yours to lose",
            "You know I'm not a bad girl, but I do bad things with you",
            "So it goes",
            "Met you in a bar",
            "All eyes on me, your illusionist",
            "All eyes on us",
            "I make all your gray days clear and",
            "Wear you like a necklace",
            "I'm so chill, but you make me jealous",
            "But I got your heart",
            "Skippin', skip-skippin' when I'm gone",
            "'Cause we break down a little",
            "But when I get you alone, it's so simple",
            "'Cause, baby, I know what you know",
            "We can feel it",
            "And all the pieces fall right into place",
            "Gettin' caught up in a moment, lipstick on your face",
            "So it goes",
            "I'm yours to keep and I'm yours to lose",
            "You know I'm not a bad girl, but I do bad things with you",
            "So it goes",
            "Come here, dressed in black now",
            "So, so, so it goes",
            "Scratches down your back now",
            "So, so, so it goes",
            "You did a number on me",
            "But, honestly, baby, who's countin'?",
            "I did a number on you",
            "But, honestly, baby, who's countin'?",
            "You did a number on me",
            "But, honestly, baby, who's countin'?",
            "Who's countin'? (One, two, three)",
            "And all the pieces fall (Pieces fall) right into place",
            "Gettin' caught up in a moment (Caught up, caught up), lipstick on your face",
            "So it goes",
            "I'm yours to keep (Oh) and I'm yours to lose (Baby)",
            "You know I'm not a bad girl, but I (I do) do bad things with you",
            "So it goes",
            "Come here, dressed in black now",
            "So, so, so it goes",
            "Scratches down your back now",
            "So, so, so it goes",
            "Come here, dressed in black now",
            "So, so, so it goes",
            "Scratches down your back now",
            "So, so, so it goes"
          ]
        },
        {
          title: "Gorgeous",
          lines: [
            "Gorgeous",
            "You should take it as a compliment",
            "That I got drunk and made fun of the way you talk",
            "You should think about the consequence",
            "Of your magnetic field bein' a little too strong",
            "And I got a boyfriend, he's older than us",
            "He's in the club doin' I don't know what",
            "You're so cool, it makes me hate you so much (I hate you so much)",
            "Whisky on ice, Sunset-and-Vine",
            "You've ruined my life by not bein' mine",
            "You're so gorgeous",
            "I can't say anything to your face",
            "'Cause look at your face (Gorgeous)",
            "And I'm so furious",
            "At you for makin' me feel this way",
            "But what can I say? You're gorgeous",
            "You should take it as a compliment",
            "That I'm talkin' to everyone here but you (But you, but you)",
            "And you should think about the consequence",
            "Of you touchin' my hand in a darkened room (Dark room, dark room)",
            "If you've got a girlfriend, I'm jealous of her",
            "But if you're single, that's honestly worse",
            "'Cause you're so gorgeous it actually hurts (Honey, it hurts)",
            "Ocean blue eyes lookin' in mine",
            "I feel like I might sink and drown and die",
            "You're so gorgeous",
            "I can't say anything to your face (To your face)",
            "'Cause look at your face (Look at your face; Gorgeous)",
            "And I'm so furious",
            "At you for makin' me feel this way (Feel this way)",
            "But what can I say? You're gorgeous",
            "You make me so happy it turns back to sad (Yeah)",
            "There's nothin' I hate more than what I can't have (And)",
            "You are so gorgeous, it makes me so mad (Mm)",
            "You make me so happy it turns back to sad (Yeah)",
            "There's nothin' I hate more than what I can't have (And)",
            "Guess I'll just stumble on home to my cats (Ugh) alone",
            "Unless you wanna come along (Oh)",
            "You're so gorgeous (Gorgeous)",
            "I can't say anything to your face (To your face)",
            "'Cause look at your face (Look at your face; Gorgeous)",
            "And I'm so furious (I'm so furious)",
            "At you for making me feel this way (Feel this way)",
            "But what can I say? (I say) You're gorgeous",
            "You make me so happy it turns back to sad (Yeah)",
            "There's nothin' I hate more than what I can't have (And)",
            "You are so gorgeous, it makes me so mad (Mm)",
            "You're gorgeous",
            "You make me so happy it turns back to sad (Turns back to sad)",
            "There's nothin' I hate more than what I can't have (What I can't have)",
            "You are so gorgeous, it makes me so mad (Mm)",
            "You're gorgeous"
          ]
        },
        {
          title: "Getaway Car",
          lines: [
            "No, nothin' good starts in a getaway car",
            "It was the best of times, the worst of crimes",
            "I struck a match and blew your mind",
            "But I didn't mean it and you didn't see it",
            "The ties were black, the lies were white",
            "In shades of gray in candlelight",
            "I wanted to leave him, I needed a reason",
            '"X" marks the spot where we fell apart',
            "He poisoned the well, I was lyin' to myself",
            "I knew it from the first Old-Fashioned, we were cursed",
            "We never had a shotgun shot in the dark (Oh)",
            "You were drivin' the getaway car",
            "We were flyin', but we'd never get far",
            "Don't pretend it's such a mystery",
            "Think about the place where you first met me",
            "Ridin' in a getaway car",
            "There were sirens in the beat of your heart",
            "Shoulda known I'd be the first to leave",
            "Think about the place where you first met me",
            "In a getaway car (Oh-oh-oh)",
            "No, they never get far (Oh-oh-ah)",
            "No, nothin' good starts in a getaway car",
            "It was the great escape, the prison break",
            "The light of freedom on my face",
            "But you weren't thinkin' and I was just drinkin'",
            `While he was runnin' after us, I was screamin', "Go, go, go"`,
            "But with three of us, honey, it's a sideshow",
            "And a circus ain't a love story and now we're both sorry (We're both sorry)",
            '"X" marks the spot where we fell apart',
            "He poisoned the well, every man for himself",
            "I knew it from the first Old-Fashioned, we were cursed",
            "It hit you like a shotgun shot to the heart (Oh)",
            "You were drivin' the getaway car",
            "We were flyin', but we'd never get far",
            "Don't pretend it's such a mystery",
            "Think about the place where you first met me",
            "Ridin' in a getaway car",
            "There were sirens in the beat of your heart",
            "Shoulda known I'd be the first to leave",
            "Think about the place where you first met me",
            "In a getaway car (Oh-oh-oh)",
            "No, they never get far (Oh-oh-ah)",
            "No, nothin' good starts in a getaway car",
            "We were jet-set, Bonnie-and-Clyde (Oh-oh)",
            "Until I switched to the other side, to the other side",
            "It's no surprise I turned you in (Oh-oh)",
            "'Cause us traitors never win",
            "I'm in a getaway car",
            "I left you in a motel bar",
            "Put the money in a bag and I stole the keys",
            "That was the last time you ever saw me (Oh)",
            "Drivin' the getaway car",
            "We were flyin', but we'd never get far (Don't pretend)",
            "Don't pretend it's such a mystery",
            "Think about the place where you first met me",
            "Ridin' in a getaway car",
            "There were sirens in the beat of your heart (Shoulda known)",
            "Shoulda known I'd be the first to leave",
            "Think about the place where you first met me",
            "In a getaway car (Oh-oh-oh)",
            "No, they never get far, oh-oh-ah",
            "No, nothin' good starts in a getaway car",
            "I was ridin' in a getaway car",
            "I was cryin' in a getaway car",
            "I was dyin' in a getaway car",
            "Said goodbye in a getaway car",
            "Ridin' in a getaway car",
            "I was cryin' in a getaway car",
            "I was dyin' in a getaway car",
            "Said goodbye in a getaway car"
          ]
        },
        {
          title: "King Of My Heart",
          lines: [
            "I'm perfectly fine, I live on my own",
            "I made up my mind, I'm better off bein' alone",
            "We met a few weeks ago",
            `Now you try on callin' me "baby" like tryin' on clothes`,
            "Salute to me, I'm your American queen",
            "And you move to me like I'm a Motown beat",
            "And we rule the kingdom inside my room",
            "'Cause all the boys and their expensive cars",
            "With their Range-Rovers and their Jaguars",
            "Never took me quite where you do",
            "And all at once, you are the one I have been waitin' for",
            "King of my heart, body and soul, woah",
            "And all at once, you're all I want, I'll never let you go",
            "King of my heart, body and soul, woah",
            "And all at once",
            "I've been waitin', waitin'",
            "Woah, woah",
            "And all at once",
            "You are the one, I have been waitin', waitin'",
            "Body and soul, woah",
            "And all at once",
            "Late in the night, the city's asleep",
            "Your love is a secret I'm hoping, dreaming, dying to keep",
            "Change my priorities",
            "The taste of your lips is my idea of luxury",
            "Salute to me, I'm your American queen",
            "And you move to me like I'm a Motown beat",
            "And we rule the kingdom inside my room (Inside my room, oh)",
            "'Cause all the boys and their expensive cars",
            "With their Range-Rovers and their Jaguars",
            "Never took me quite where you do (Where you do)",
            "And all at once, you are the one I have been waitin' for",
            "King of my heart, body and soul, woah",
            "And all at once, you're all I want, I'll never let you go",
            "King of my heart (My heart), body and soul, woah",
            "And all at once (Hey)",
            "I've been waitin', waitin' (Waiting)",
            "Woah, woah",
            "And all at once",
            "You are the one I have been waitin' (Waitin'), waitin' (Waitin')",
            "Body and soul, woah",
            "And all at once",
            "Is this the end of all the endings?",
            "My broken bones are mending",
            "With all these nights we're spending",
            "Up on the roof with a school girl crush",
            "Drinkin' beer out of plastic cups",
            "Say you fancy me, not fancy stuff",
            "Baby, all at once, this is enough",
            "And all at once, you are the one I have been waitin' for",
            "King of my heart, body and soul, woah (And all at once)",
            "And all at once, you are the one I have been waitin' for",
            "King of my heart, body and soul, woah",
            "And all at once, you're all I want, I'll never let you go",
            "King of my heart (My heart), body and soul (My soul), woah",
            "And all at once",
            "I've been waitin', waitin'",
            "Woah, woah (Woah)",
            "And all at once",
            "You are the one I have been waitin', waitin'",
            "Body and soul, woah",
            "And all at once"
          ]
        },
        {
          title: "Dancing With Our Hands Tied",
          lines: [
            "I, I loved you in secret",
            "First sight, yeah, we love without reason",
            "Oh, twenty-five years old",
            "Oh, how were you to know? And",
            "My, my love had been frozen",
            "Deep blue, but you painted me golden",
            "Oh, and you held me close",
            "Oh, how was I to know? I",
            "I could've spent forever with your hands in my pockets",
            "Picture of your face in an invisible locket",
            "You said there was nothin' in the world that could stop it",
            "I had a bad feelin'",
            "And darlin', you had turned my bed into a sacred oasis",
            "People started talkin', puttin' us through our paces",
            "I knew there was no one in the world who could take it",
            "I had a bad feelin'",
            "But we were dancin'",
            "Dancin' with our hands tied, hands tied",
            "Yeah, we were dancin'",
            "Like it was the first time, first time",
            "Yeah, we were dancin'",
            "Dancin' with our hands tied, hands tied",
            "Yeah, we were dancin'",
            "And I had a bad feelin'",
            "But we were dancin'",
            "I, I loved you in spite of",
            "Deep fears that the world would divide us",
            "So, baby, can we dance",
            "Oh, through an avalanche? And",
            "Say, say that we got it",
            "I'm a mess, but I'm the mess that you wanted",
            "Oh, 'cause it's gravity",
            "Oh, keeping you with me, I",
            "I could've spent forever with your hands in my pockets",
            "Picture of your face in an invisible locket",
            "You said there was nothin' in the world that could stop it",
            "I had a bad feelin'",
            "But we were dancin'",
            "Dancin' with our hands tied, hands tied",
            "Yeah, we were dancin'",
            "Like it was the first time, first time",
            "Yeah, we were dancin'",
            "Dancin' with our hands tied, hands tied",
            "Yeah, we were dancin' (Knew we had our hands tied)",
            "And I had a bad feelin'",
            "But we were dancin'",
            "I'd kiss you as the lights went out",
            "Swayin' as the room burned down",
            "I'd hold you as the water rushes in",
            "If I could dance with you again",
            "I'd kiss you as the lights went out",
            "Swayin' as the room burned down",
            "I'd hold you as the water rushes in",
            "If I could dance with you again (Again, yeah)",
            "Dancin' with our hands tied, hands tied",
            "Yeah, we were dancin' (Oh, yeah, we were dancin')",
            "Like it was the first time, first time (First time, first time)",
            "Yeah, we were dancin' (Oh)",
            "Dancin' with our hands tied, hands tied (Dancin' with our hands tied)",
            "Yeah, we were dancin'",
            "And I had a bad feelin' (Had a bad feelin')",
            "But we were dancin'",
            "Hands tied, hands tied",
            "(Dancin')"
          ]
        },
        {
          title: "Dress",
          lines: [
            "Our secret moments in a crowded room",
            "They got no idea about me and you",
            "There is an indentation in the shape of you",
            "Made your mark on me, a golden tattoo",
            "All of this silence and patience, pining and anticipation",
            "My hands are shakin' from holdin' back from you, ha, ah, ah",
            "All of this silence and patience, pining and desperately waitin'",
            "My hands are shakin' from all this, ah, ha, ha, ha-ah",
            "Say my name and everything just stops",
            "I don't want you like a best friend",
            "Only bought this dress so you could take it off",
            "Take it off, ha, ha, ha-ah",
            "Carve your name into my bedpost",
            "'Cause I don't want you like a best friend",
            "Only bought this dress so you could take it off",
            "Take it off, ha, ha, ha-ah",
            "Inescapable, I'm not even gonna try",
            "And if I get burned, at least we were electrified",
            "I'm spillin' wine in the bathtub",
            "You kiss my face and we're both drunk",
            "Everyone thinks that they know us",
            "But they know nothin' about",
            "All of this silence and patience, pining and anticipation",
            "My hands are shakin' from holdin' back from you, ha, ah, ah",
            "All of this silence and patience, pining and desperately waitin'",
            "My hands are shakin' from all this, ah, ha, ha, ha-ah",
            "Say my name and everything just stops",
            "I don't want you like a best friend",
            "Only bought this dress so you could take it off",
            "Take it off, ha, ha, ha-ah",
            "Carve your name into my bedpost",
            "'Cause I don't want you like a best friend",
            "Only bought this dress so you could take it off",
            "Take it off, ha, ha",
            "Ha-ah-ah, ha-ah-ah, ha-ah-ah-ah",
            "Only bought this dress so you could take it off",
            "Ha-ah-ah, ha-ah-ah, ha-ah-ah-ah",
            "Only bought this dress so you could take it off",
            "Flashback when you met me",
            "Your buzzcut and my hair bleached",
            "Even in my worst times",
            "You could see the best in me",
            "Flashback to my mistakes",
            "My rebounds, my earthquakes",
            "Even in my worst lies",
            "You saw the truth in me",
            "And I woke up just in time",
            "Now I wake up by your side",
            "My one and only, my lifeline",
            "I woke up just in time",
            "Now I wake up by your side",
            "My hands shake, I can't explain this, ah, ha, ha, ha-ah",
            "Say my name and everything just stops",
            "I don't want you like a best friend",
            "Only bought this dress so you could take it off",
            "Take it off, ha, ha, ha-ah",
            "Carve your name into my bedpost",
            "'Cause I don't want you like a best friend",
            "Only bought this dress so you could take it off",
            "Take it off, ha, ha, ha-ah",
            "There is an indentation in the shape of you",
            "(Only bought this dress so you could take it off)",
            "You made your mark on me, golden tattoo",
            "(Only bought this dress so you could take it off)"
          ]
        },
        {
          title: "This Is Why We Can't Have Nice Things",
          lines: [
            "It was so nice throwin' big parties",
            "Jump into the pool from the balcony",
            "Everyone swimmin' in a champagne sea",
            "And there are no rules when you show up here",
            "Bass beat rattling the chandelier",
            "Feelin' so Gatsby for that whole year",
            "So why'd you have to rain on my parade?",
            "I'm shaking my head and locking the gates",
            "This is why we can't have nice things, darlin'",
            "Because you break them, I had to take them away",
            "This is why we can't have nice things, honey (Oh)",
            "Did you think I wouldn't hear all the things you said about me?",
            "This is why we can't have nice things",
            "It was so nice being friends again",
            "There I was, giving you a second chance",
            "But you stabbed me in the back while shakin' my hand",
            "And therein lies the issue, friends don't try to trick you",
            "Get you on the phone and mind-twist you",
            "And so I took an axe to a mended fence",
            "But I'm not the only friend you've lost lately (Mm-mm)",
            "If only you weren't so shady",
            "This is why we can't have nice things, darlin' (Yeah)",
            "Because you break them, I had to take them away",
            "This is why we can't have nice (Nice things) things (Baby), honey",
            "Did you think I wouldn't hear all the things you said about me?",
            "This is why we can't have",
            "Here's a toast to my real friends",
            "They don't care about the he-said, she-said",
            "And here's to my baby",
            "He ain't readin' what they call me lately",
            "And here's to my mama",
            "Had to listen to all this drama",
            "And here's to you",
            "'Cause forgiveness is a nice thing to do",
            "ha-ha, I can't even say it with a straight face (This is why we can't have)",
            "This is why we can't have nice things, darlin' (Darlin')",
            "Because you break them, I had to take them away (Away)",
            "This is why we can't have nice (Uh, uh) things (Oh, no), honey (Baby, oh)",
            "Did you think I wouldn't hear all the things you said about me?",
            "This is why we can't have (Oh) nice (Oh, no) things, darlin'",
            "(And here's to my real friends; Oh)",
            "Because you break them, I had to take them (Away)",
            "(And here's to my baby; Oh)",
            "Nice things (Oh, no), honey",
            "(They didn't care about that he-said, she-said)",
            "Did you think I wouldn't hear all the things you said about me?",
            "This is why we can't have nice things"
          ]
        },
        {
          title: "Call It What You Want",
          lines: [
            "My castle crumbled overnight",
            "I brought a knife to a gunfight",
            "They took the crown, but it's alright",
            "All the liars are calling me one",
            "Nobody's heard from me for months",
            "I'm doin' better than I ever was",
            "'Cause",
            "My baby's fit like a daydream",
            "Walkin' with his head down",
            "I'm the one he's walking to",
            "So call it what you want, yeah",
            "Call it what you want to",
            "My baby's fly like a jet stream",
            "High above the whole scene",
            "Loves me like I'm brand new",
            "So call it what you want, yeah",
            "Call it what you want to",
            "All my flowers grew back as thorns",
            "Windows boarded up after the storm",
            "He built a fire just to keep me warm",
            "All the drama queens taking swings",
            "All the jokers dressing up as kings",
            "They fade to nothing when I look at him",
            "And I know I make the same mistakes every time",
            "Bridges burn, I never learn",
            "At least I did one thing right",
            "I did one thing right",
            "I'm laughing with my lover, makin' forts under covers",
            "Trust him like a brother",
            "Yeah, you know I did one thing right",
            "Starry eyes sparkin' up my darkest night",
            "My baby's fit like a daydream",
            "Walkin' with his head down",
            "I'm the one he's walking to",
            "So call it what you want, yeah",
            "Call it what you want to",
            "My baby's fly like a jet stream",
            "High above the whole scene",
            "Loves me like I'm brand new",
            "(Call it what you want, call it what you want, call it)",
            "So call it what you want, yeah",
            "Call it what you want to",
            "I want to wear his initial on a chain 'round my neck",
            "Chain 'round my neck",
            "Not because he owns me",
            "But 'cause he really knows me",
            "Which is more than they can say, I",
            "I recall late November",
            "Holding my breath, slowly, I said",
            `"You don't need to save me`,
            'But would you run away with me?"',
            "Yes (Would you run away?)",
            "My baby's fit like a daydream",
            "Walkin' with his head down",
            "I'm the one he's walking to",
            "(Call it what you want, call it what you want, call it)",
            "So call it what you want, yeah (Call it what you want it to)",
            "Call it what you want to",
            "My baby's fly like a jet stream (Oh)",
            "High above the whole scene",
            "Loves me like I'm brand new",
            "(Call it what you want, call it what you want, call it)",
            "So call it what you want, yeah",
            "Call it what you want to",
            "(Call it what you want, call it)",
            "(Call it what you want, call it what you want, call it)",
            "(Call it what you want, call it what you want, call it)",
            "(Call it what you want, call it what you want, call it)",
            "(Call it what you want, call it what you want, call it)",
            "(Call it what you want, call it what you want, call it)",
            "(Call it what you want, call it what you want, call it)",
            "Call it what you want, yeah",
            "Call it what you want to"
          ]
        },
        {
          title: "New Year's Day",
          lines: [
            "There's glitter on the floor after the party",
            "Girls carryin' their shoes down in the lobby",
            "Candle wax and Polaroids on the hardwood floor",
            "You and me from the night before, but",
            "Don't read the last page",
            "But I stay when you're lost and I'm scared and you're turnin' away",
            "I want your midnights",
            "But I'll be cleanin' up bottles with you on New-Year's-Day",
            "You squeeze my hand three times in the back of the taxi",
            "I can tell that it's gonna be a long road",
            "I'll be there if you're the toast of the town, babe",
            "Or if you strike out and you're crawlin' home",
            "Don't read the last page",
            "But I stay when it's hard or it's wrong or we're makin' mistakes",
            "I want your midnights",
            "But I'll be cleanin' up bottles with you on New-Year's-Day",
            "Hold on to the memories, they will hold on to you",
            "Hold on to the memories, they will hold on to you",
            "Hold on to the memories, they will hold on to you",
            "And I will hold on to you",
            "Please, don't ever become a stranger",
            "Whose laugh I could recognize anywhere",
            "Please, don't ever become a stranger",
            "Whose laugh I could recognize anywhere",
            "There's glitter on the floor after the party",
            "Girls carryin' their shoes down in the lobby",
            "Candle wax and Polaroids on the hardwood floor",
            "You and me forevermore",
            "Don't read the last page",
            "But I stay when it's hard or it's wrong or we're makin' mistakes",
            "I want your midnights",
            "But I'll be cleanin' up bottles with you on New-Year's-Day",
            "Hold on to the memories, they will hold on to you",
            "Hold on to the memories, they will hold on to you",
            "Hold on to the memories, they will hold on to you",
            "And I will hold on to you (Hold on)",
            "Please, don't ever become a stranger",
            "(To the memories, they will hold on to you)",
            "Whose laugh I could recognize anywhere",
            "(Hold on to the memories, they will hold on to you)",
            "Please, don't ever become a stranger",
            "(Hold on to the memories, they will hold on to you)",
            "Whose laugh I could recognize anywhere",
            "(And I will hold on to you)"
          ]
        }
      ]
    },
    {
      title: "Lover",
      songs: [
        {
          title: "I Forgot That You Existed",
          lines: [
            "How many days did I spend thinking",
            "'Bout how you did me wrong, wrong, wrong?",
            "Lived in the shade you were throwing",
            "'Til all of my sunshine was gone, gone, gone",
            "And I couldn't get away from ya",
            "In my feelings more than Drake, so yeah",
            "Your name on my lips, tongue-tied",
            "Free rent, living in my mind",
            "But then something happened one magical night",
            "I forgot that you existed",
            "And I thought that it would kill me, but it didn't",
            "And it was so nice",
            "So peaceful and quiet",
            "I forgot that you existed",
            "It isn't love, it isn't hate, it's just indifference",
            "I forgot that you",
            "Got out some popcorn",
            "As soon as my rep started going down, down, down",
            "Laughed on the school yard",
            "As soon as I tripped up and hit the ground, ground, ground",
            "And I would've stuck around for ya",
            "Would've fought the whole town, so yeah",
            "Would've been right there, front row",
            "Even if nobody came to your show",
            "But you showed who you are, then one magical night",
            "I forgot that you existed",
            "And I thought that it would kill me, but it didn't",
            "And it was so nice",
            "So peaceful and quiet",
            "I forgot that you existed",
            "It isn't love, it isn't hate, it's just indifference",
            "I forgot that you",
            "Sent me a clear message",
            "Taught me some hard lessons",
            "I just forget what they were",
            "It's all just a blur",
            "I forgot that you existed",
            "And I thought that it would kill me, but it didn't",
            "And it was so nice",
            "So peaceful and quiet",
            "I forgot that you existed",
            "I did, I did, I did",
            "It isn't hate, it's just indifference",
            "It isn't love, it isn't hate, it's just indifference",
            "So, yeah"
          ]
        },
        {
          title: "Cruel Summer",
          lines: [
            "(Yeah, yeah, yeah, yeah)",
            "Fever dream high in the quiet of the night",
            "You know that I caught it (Oh yeah, you're right, I want it)",
            "Bad, bad boy, shiny toy with a price",
            "You know that I bought it (Oh yeah, you're right, I want it)",
            "Killing me slow, out the window",
            "I'm always waiting for you to be waiting below",
            "Devils roll the dice, angels roll their eyes",
            "What doesn't kill me makes me want you more",
            "And it's new, the shape of your body",
            "It's blue, the feeling I've got",
            "And it's ooh, woah-oh",
            "It's a cruel summer",
            "It's cool, that's what I tell 'em",
            "No rules in breakable heaven",
            "But ooh, woah-oh",
            "It's a cruel summer with you",
            "Hang your head low in the glow of the vending machine",
            "I'm not dying (Oh yeah, you're right, I want it)",
            "We say that we'll just screw it up in these trying times",
            "We're not trying (Oh yeah, you're right, I want it)",
            "So cut the headlights, summer's a knife",
            "I'm always waiting for you just to cut to the bone",
            "Devils roll the dice, angels roll their eyes",
            "And if I bleed, you'll be the last to know, oh",
            "It's new, the shape of your body",
            "It's blue, the feeling I've got",
            "And it's ooh, woah-oh",
            "It's a cruel summer",
            "It's cool, that's what I tell 'em",
            "No rules in breakable heaven",
            "But ooh, woah-oh",
            "It's a cruel summer with you",
            "I'm drunk in the back of the car",
            "And I cried like a baby comin' home from the bar (Oh)",
            `Said, "I'm fine," but it wasn't true`,
            "I don't wanna keep secrets just to keep you",
            "And I snuck in through the garden gate",
            "Every night that summer just to seal my fate (Oh)",
            `And I scream, "For whatever it's worth`,
            `I love you, ain't that the worst thing you ever heard?"`,
            "He looks up, grinnin' like a devil",
            "It's new, the shape of your body",
            "It's blue, the feeling I've got",
            "And it's ooh, woah-oh",
            "It's a cruel summer",
            "It's cool, that's what I tell 'em",
            "No rules in breakable heaven",
            "But ooh, woah-oh",
            "It's a cruel summer with you",
            "I'm drunk in the back of the car",
            "And I cried like a baby comin' home from the bar (Oh)",
            `Said, "I'm fine," but it wasn't true`,
            "I don't wanna keep secrets just to keep you",
            "And I snuck in through the garden gate",
            "Every night that summer just to seal my fate (Oh)",
            `And I scream, "For whatever it's worth`,
            `I love you, ain't that the worst thing you ever heard?"`,
            "(Yeah, yeah, yeah, yeah)"
          ]
        },
        {
          title: "Lover",
          lines: [
            "We could leave the Christmas lights up 'til January",
            "And this is our place, we make the rules",
            "And there's a dazzling haze, a mysterious way about you, dear",
            "Have I known you twenty seconds or twenty years?",
            "Can I go where you go?",
            "Can we always be this close?",
            "Forever and ever, ah",
            "Take me out and take me home",
            "You're my, my, my, my lover",
            "We could let our friends crash in the living room",
            "This is our place, we make the call",
            "And I'm highly suspicious that everyone who sees you wants you",
            "I've loved you three summers now, honey, but I want 'em all",
            "Can I go where you go?",
            "Can we always be this close?",
            "Forever and ever, ah",
            "Take me out and take me home (Forever and ever)",
            "You're my, my, my, my lover",
            "Ladies and gentlemen, will you please stand?",
            "With every guitar string scar on my hand",
            "I take this magnetic force of a man to be my lover",
            "My heart's been borrowed and yours has been blue",
            "All's well that ends well to end up with you",
            "Swear to be overdramatic and true to my lover",
            "And you'll save all your dirtiest jokes for me",
            "And at every table, I'll save you a seat, lover",
            "Can I go where you go?",
            "Can we always be this close?",
            "Forever and ever, ah",
            "Take me out and take me home (Forever and ever)",
            "You're my, my, my, my",
            "Oh, you're my, my, my, my",
            "Darling, you're my, my, my, my lover"
          ]
        },
        {
          title: "The Man",
          lines: [
            "I would be complex, I would be cool",
            "They'd say I played the field before I found someone to commit to",
            "And that would be okay for me to do",
            "Every conquest I had made would make me more of a boss to you",
            "I'd be a fearless leader, I'd be an alpha type",
            "When everyone believes ya, what's that like?",
            "I'm so sick of running as fast as I can",
            "Wonderin' if I'd get there quicker if I was a man",
            "And I'm so sick of them comin' at me again",
            "'Cause if I was a man, then I'd be the man",
            "I'd be the man (Man)",
            "I'd be the man (Man)",
            "They'd say I hustled, put in the work",
            "They wouldn't shake their heads and question how much of this I deserve",
            "What I was wearing, if I was rude",
            "Could all be separated from my good ideas and power moves",
            "And they would toast to me, oh (Ayy), let the players play",
            "I'd be just like Leo in Saint-Tropez",
            "I'm so sick of running as fast as I can",
            "Wonderin' if I'd get there quicker if I was a man",
            "And I'm so sick of them comin' at me again",
            "'Cause if I was a man, then I'd be the man",
            "I'd be the man (Man)",
            "I'd be the man (Man)",
            "What's it like to brag about raking in dollars",
            "And getting bitches and models?",
            "And it's all good if you're bad",
            "And it's okay if you're mad",
            "If I was out flashin' my dollars",
            "I'd be a bitch, not a baller",
            "They'd paint me out to be bad",
            "So it's okay that I'm mad",
            "I'm so sick of running as fast as I can",
            "Wonderin' if I'd get there quicker if I was a man (You know that)",
            "And I'm so sick of them comin' at me again (Comin' at me again)",
            "'Cause if I was a man (If I was a man), then I'd be the man (Then I'd be the man)",
            "I'm so sick of running as fast as I can (As fast as I can)",
            "Wonderin' if I'd get there quicker if I was a man (Hey)",
            "And I'm so sick of them comin' at me again (Comin' at me again)",
            "'Cause if I was a man (If I was a man), then I'd be the man",
            "I'd be the man (Man)",
            "I'd be the man (Man, oh)",
            "I'd be the man (Man, yeah)",
            "I'd be the man (Man, I'd be the man)",
            "If I was a man",
            "Then I'd be the man"
          ]
        },
        {
          title: "The Archer",
          lines: [
            "Combat, I'm ready for combat",
            "I say I don't want that, but what if I do?",
            "'Cause cruelty wins in the movies",
            "I've got a hundred thrown-out speeches I almost said to you",
            "Easy they come, easy they go",
            "I jump from the train, I ride off alone",
            "I never grew up, it's getting so old",
            "Help me hold on to you",
            "I've been the archer, I've been the prey",
            "Who could ever leave me, darling",
            "But who could stay?",
            "Dark side, I search for your dark side",
            "But what if I'm alright, right, right, right here?",
            "And I cut off my nose just to spite my face",
            "Then I hate my reflection for years and years",
            "I wake in the night, I pace like a ghost",
            "The room is on fire, invisible smoke",
            "And all of my heroes die all alone",
            "Help me hold on to you",
            "I've been the archer, I've been the prey",
            "Screaming, who could ever leave me, darling",
            "But who could stay?",
            "(I see right through me, I see right through me)",
            "'Cause they see right through me",
            "They see right through me",
            "They see right through",
            "Can you see right through me?",
            "They see right through",
            "They see right through me",
            "I see right through me",
            "I see right through me",
            "All the king's horses, all the king's men",
            "Couldn't put me together again",
            "'Cause all of my enemies started out friends",
            "Help me hold on to you",
            "I've been the archer, I've been the prey",
            "Who could ever leave me, darling",
            "But who could stay?",
            "(I see right through me, I see right through me)",
            "Who could stay?",
            "Who could stay?",
            "Who could stay?",
            "You could stay",
            "You could stay",
            "Combat, I'm ready for combat"
          ]
        },
        {
          title: "I Think He Knows",
          lines: [
            "I think he knows",
            "His footprints on the sidewalk",
            "Lead to where I can't stop",
            "Go there every night",
            "I think he knows",
            "His hands around a cold glass",
            "Make me wanna know that",
            "Body like it's mine",
            "He got that boyish look that I like in a man",
            "I am an architect, I'm drawing up the plans",
            "It's like I'm 17, nobody understands",
            "No one understands",
            "He got my heartbeat",
            "Skipping down 16th-Avenue",
            "Got that, ah, I mean",
            "Wanna see what's under that attitude like",
            "I want you, bless my soul",
            "And I ain't gotta tell him, I think he knows",
            "I think he knows",
            "I think he knows",
            "When we get all alone",
            "I'll make myself at home",
            "And he'll want me to stay",
            "I think he knows",
            "He'd better lock it down",
            "Or I won't stick around",
            "'Cause good ones never wait (Ha)",
            "He got that boyish look that I like in a man",
            "I am an architect, I'm drawing up the plans",
            "He's so obsessed with me and, boy, I understand",
            "Boy, I understand",
            "He got my heartbeat (Heartbeat)",
            "Skipping down 16th-Avenue",
            "Got that, ah, I mean (I mean)",
            "Wanna see what's under that attitude like",
            "I want you, bless my soul",
            "And I ain't gotta tell him, I think he knows",
            "I think he knows",
            "I want you, bless my",
            "I want you, bless my",
            "I want you, bless my",
            "I want you, bless my soul",
            "Lyrical smile, indigo eyes, hand on my thigh",
            "We could follow the sparks, I'll drive",
            "Lyrical smile, indigo eyes, hand on my thigh",
            "We could follow the sparks, I'll drive",
            '"So where we gonna go?"',
            "I whisper in the dark",
            '"Where we gonna go?"',
            "I think he knows",
            "He got my heartbeat (Heartbeat)",
            "Skipping down 16th-Avenue (Baby)",
            "Got that, ah, I mean (I mean)",
            "Wanna see what's under that attitude like (Yeah)",
            "I want you, bless my soul",
            "And I ain't gotta tell him, I think he knows",
            "I think he knows",
            "I want you, bless my",
            "I want you, bless my",
            "I want you, bless my (Oh, baby)",
            "I want you, bless my soul (He got my heartbeat)",
            "I want you, bless my (Skipping down 16th-Avenue, baby)",
            "I want you, bless my",
            "I want you, bless my soul",
            "And I ain't gotta tell him, I think he knows"
          ]
        },
        {
          title: "Miss Americana & The Heartbreak Prince",
          lines: [
            "You know I adore you, I'm crazier for you",
            "Than I was at sixteen, lost in a film scene",
            "Waving homecoming queens, marching band playing",
            "I'm lost in the lights",
            "American glory faded before me",
            "Now I'm feeling hopeless, ripped up my prom dress",
            "Running through rose thorns, I saw the scoreboard",
            "And ran for my life (Ah)",
            "No cameras catch my pageant smile",
            "I counted days, I counted miles",
            "To see you there, to see you there",
            "It's been a long time coming, but",
            "It's you and me, that's my whole world",
            `They whisper in the hallway, "She's a bad, bad girl" (Okay)`,
            "The whole school is rolling fake dice",
            "You play stupid games, you win stupid prizes",
            "It's you and me, there's nothing like this",
            "Miss-Americana and The-Heartbreak-Prince (Okay)",
            "We're so sad, we paint the town blue",
            "Voted most likely to run away with you",
            "My team is losing, battered and bruising",
            "I see the high fives between the bad guys",
            "Leave with my head hung, you are the only one",
            "Who seems to care",
            "American stories burning before me",
            "I'm feeling helpless, the damsels are depressed",
            "Boys will be boys then, where are the wise men?",
            "Darling, I'm scared (Ah)",
            "No cameras catch my muffled cries",
            "I counted days, I counted miles",
            "To see you there, to see you there",
            "And now the storm is coming, but",
            "It's you and me, that's my whole world",
            `They whisper in the hallway, "She's a bad, bad girl" (Okay)`,
            "The whole school is rolling fake dice",
            "You play stupid games, you win stupid prizes",
            "It's you and me, there's nothing like this",
            "Miss-Americana and The-Heartbreak-Prince (Okay)",
            "We're so sad, we paint the town blue",
            "Voted most likely to run away with you",
            "And I don't want you to (Go), I don't really wanna (Fight)",
            "'Cause nobody's gonna (Win), I think you should come home",
            "And I don't want you to (Go), I don't really wanna (Fight)",
            "'Cause nobody's gonna (Win), I think you should come home",
            "And I don't want you to (Go), I don't really wanna (Fight)",
            "'Cause nobody's gonna (Win), just thought you should know",
            "And I'll never let you (Go) 'cause I know this is a (Fight)",
            "That someday we're gonna (Win)",
            "It's you and me, that's my whole world",
            `They whisper in the hallway, "She's a bad, bad girl"`,
            "Oh, I just thought you should know (You should know)",
            "It's you and me, there's nothing like this (Like this)",
            "Miss-Americana and The-Heartbreak-Prince (Okay)",
            "We're so sad, we paint the town blue (Paint it blue)",
            "Voted most likely to run away with you",
            "And I don't want you to (Go), I don't really wanna (Fight)",
            "'Cause nobody's gonna (Win), I think you should come home",
            "And I'll never let you (Go) 'cause I know this is a (Fight)",
            "That someday we're gonna (Win), just thought you should know",
            "It's you and me, that's my whole world",
            `They whisper in the hallway, "She's a bad, bad girl"`,
            `"She's a bad, bad girl"`
          ]
        },
        {
          title: "Paper Rings",
          lines: [
            "The moon is high",
            "Like your friends were the night that we first met",
            "Went home and tried to stalk you on the internet",
            "Now I've read all of the books beside your bed",
            "The wine is cold",
            "Like the shoulder that I gave you in the street",
            "Cat and mouse for a month or two or three",
            "Now I wake up in the night and watch you breathe",
            "(Ayy)",
            "Kiss me once 'cause you know I had a long night (Oh)",
            "Kiss me twice 'cause it's gonna be alright (Uh)",
            "Three times 'cause I waited my whole life (One, two, one, two, three, four)",
            "I like shiny things, but I'd marry you with paper rings",
            "Uh-huh, that's right",
            "Darling, you're the one I want, and",
            "I hate accidents, except when we went from friends to this",
            "Uh-huh, that's right",
            "Darling, you're the one I want",
            "In paper rings, in picture frames, in dirty dreams",
            "Oh, you're the one I want",
            "In the winter, in the icy outdoor pool",
            "When you jumped in first, I went in too",
            "I'm with you even if it makes me blue",
            "Which takes me back",
            "To the color that we painted your brother's wall",
            "Honey, without all the exes, fights and flaws",
            "We wouldn't be standing here so tall, so",
            "(Ayy)",
            "Kiss you once 'cause I know you had a long night (Oh)",
            "Kiss you twice 'cause it's gonna be alright (Uh)",
            "Three times 'cause you waited your whole life (One, two, one, two, three, four)",
            "Ah",
            "I like shiny things, but I'd marry you with paper rings",
            "Uh-huh, that's right",
            "Darling, you're the one I want, and",
            "I hate accidents, except when we went from friends to this",
            "Uh-huh, that's right",
            "Darling, you're the one I want",
            "In paper rings, in picture frames, in dirty dreams",
            "Oh, you're the one I want",
            "I want to drive away with you",
            "I want your complications too",
            "I want your dreary Mondays",
            "Wrap your arms around me, baby boy",
            "I want to drive away with you",
            "I want your complications too",
            "I want your dreary Mondays",
            "Wrap your arms around me, baby boy",
            "Uh-huh",
            "I like shiny things, but I'd marry you with paper rings",
            "Ah-ah, that's right, you're the one I want",
            "I hate accidents, except when we went from friends to this",
            "Ah-ah, darling, you're the one I want",
            "I like shiny things, but I'd marry you with paper rings",
            "Uh-huh, that's right",
            "Darling, you're the one I want, and",
            "I hate accidents, except when we went from friends to this",
            "Uh-huh, that's right",
            "Darling, you're the one I want",
            "In paper rings, in picture frames, in all my dreams",
            "You're the one I want",
            "In paper rings, in picture frames, in all my dreams",
            "Oh, you're the one I want",
            "You're the one I want, one I want",
            "You're the one I want, one I want"
          ]
        },
        {
          title: "Cornelia Street",
          lines: [
            "We were in the backseat",
            "Drunk on something stronger than the drinks in the bar",
            '"I rent a place on Cornelia-Street"',
            "I say casually in the car",
            "We were a fresh page on the desk",
            "Filling in the blanks as we go",
            "As if the street lights pointed in an arrow head",
            "Leading us home",
            "And I hope I never lose you, hope it never ends",
            "I'd never walk Cornelia-Street again",
            "That's the kinda heartbreak time could never mend",
            "I'd never walk Cornelia-Street again",
            "And baby, I get mystified by how this city screams your name",
            "And baby, I'm so terrified of if you ever walk away",
            "I'd never walk Cornelia-Street again",
            "I'd never walk Cornelia-Street again",
            "Windows flung right open, autumn air",
            "Jacket 'round my shoulders is yours",
            "We bless the rains on Cornelia-Street",
            "Memorize the creaks in the floor",
            "Back when we were card sharks, playing games",
            "I thought you were leading me on",
            "I packed my bags, left Cornelia-Street",
            "Before you even knew I was gone",
            "But then you called, showed your hand",
            "I turned around before I hit the tunnel",
            "Sat on the roof, you and I",
            "I hope I never lose you, hope it never ends",
            "I'd never walk Cornelia-Street again",
            "That's the kinda heartbreak time could never mend",
            "I'd never walk Cornelia-Street again",
            "And baby, I get mystified by how this city screams your name (City screams your name)",
            "And baby, I'm so terrified of if you ever walk away",
            "I'd never walk Cornelia-Street again",
            "I'd never walk Cornelia-Street again",
            "You hold my hand on the street",
            "Walk me back to that apartment",
            "Years ago, we were just inside",
            "Barefoot in the kitchen",
            "Sacred new beginnings",
            "That became my religion, listen",
            "I hope I never lose you",
            "I'd never walk Cornelia-Street again",
            "Oh, never again",
            "And baby, I get mystified by how this city screams your name (City screams your name)",
            "And baby, I'm so terrified of if you ever walk away",
            "I'd never walk Cornelia-Street again",
            "I'd never walk Cornelia-Street again",
            "I don't wanna lose you (Hope it never ends)",
            "I'd never walk Cornelia-Street again",
            "I don't wanna lose you (Yeah)",
            '"I rent a place on Cornelia-Street"',
            "I say casually in the car"
          ]
        },
        {
          title: "Death By A Thousand Cuts",
          lines: [
            "My, my, my, my",
            "My, my, my, my",
            "My, my, my, my",
            "My, my, my, my",
            "My, my, my, my",
            "My, my, my, my",
            "My, my, my, my",
            "My, my, my, my",
            "Saying goodbye is death by a thousand cuts",
            "Flashbacks waking me up",
            "I get drunk, but it's not enough",
            "'Cause the morning comes and you're not my baby",
            "I look through the windows of this love",
            "Even though we boarded them up",
            "Chandelier's still flickering here",
            "'Cause I can't pretend it's okay when it's not",
            "It's death by a thousand cuts",
            "I dress to kill my time, I take the long way home",
            "I ask the traffic lights if it'll be alright",
            `They say, "I don't know"`,
            "And what once was ours is no one's now",
            "I see you everywhere, the only thing we share",
            "Is this small town",
            "You said it was a great love, one for the ages",
            "But if the story's over, why am I still writing pages?",
            "'Cause saying goodbye is death by a thousand cuts",
            "Flashbacks waking me up",
            "I get drunk, but it's not enough",
            "'Cause the morning comes and you're not my baby",
            "I look through the windows of this love",
            "Even though we boarded them up",
            "Chandelier's still flickering here",
            "'Cause I can't pretend it's okay when it's not",
            "It's death by a thousand cuts",
            "My heart, my hips, my body, my love",
            "Tryna find a part of me that you didn't touch",
            "Gave up on me like I was a bad drug",
            "Now I'm searching for signs in a haunted club",
            "Our songs, our films, united we stand",
            "Our country, guess it was a lawless land",
            "Quiet my fears with the touch of your hand",
            "Paper cut stings from our paper-thin plans",
            "My time, my wine, my spirit, my trust",
            "Tryna find a part of me you didn't take up",
            "Gave you too much, but it wasn't enough",
            "But I'll be alright, it's just a thousand cuts",
            "I get drunk, but it's not enough",
            "'Cause you're not my baby",
            "I look through the windows of this love",
            "Even though we boarded them up",
            "Chandelier's still flickering here",
            "'Cause I can't pretend it's okay when it's not",
            "No, it's not",
            "It's death by a thousand cuts (You didn't touch)",
            "Tryna find a part of me that you didn't touch",
            "My body, my love, my trust (It's death by a thousand cuts)",
            "But it wasn't enough, it wasn't enough, no, no",
            "I take the long way home",
            "I ask the traffic lights if it'll be alright",
            `They say, "I don't know"`
          ]
        },
        {
          title: "London Boy",
          lines: [
            "We can go drivin' in, on my scooter",
            "Uh, you know, just 'round London (Oh, I'd\u2014)",
            "I love my hometown as much as Motown, I love SoCal",
            "And you know I love Springsteen, faded blue jeans, Tennessee whiskey",
            "But somethin' happened, I heard him laughin'",
            "I saw the dimples first and then I heard the accent",
            'They say, "Home is where the heart is"',
            "But that's not where mine lives",
            "You know I love a London boy",
            "I enjoy walkin' Camden-Market in the afternoon",
            "He likes my American smile, like a child when our eyes meet",
            "Darling, I fancy you",
            "Took me back to Highgate, met all of his best mates",
            "So I guess all the rumors are true",
            "You know I love a London boy",
            "Boy, I fancy you (Ooh)",
            "And now I love high tea, stories from Uni and the West-End",
            "You can find me in the pub, we are watchin' rugby with his school friends",
            "Show me a gray sky, a rainy cab ride",
            "Babes, don't threaten me with a good time",
            'They say, "Home is where the heart is"',
            "But, God, I love the English",
            "You know I love a London boy",
            "I enjoy nights in Brixton, Shoreditch in the afternoon",
            "He likes my American smile, like a child when our eyes meet",
            "Darling, I fancy you",
            "Took me back to Highgate, met all of his best mates",
            "So I guess all the rumors are true",
            "You know I love a London boy",
            "Boy, I fancy you",
            "So please show me Hackney",
            "Doesn't have to be Louis-V up on Bond-Street",
            "Just wanna be with you",
            "Wanna be with you",
            "Stick with me, I'm your queen",
            "Like a Tennessee Stella-McCartney on the Heath",
            "Just wanna be with you (Wanna be with you)",
            "Wanna be with you, oh, woah",
            "You know I love a London boy",
            "I enjoy walkin' Soho, drinkin' in the afternoon (Yeah)",
            "He likes my American smile, like a child when our eyes meet",
            "Darling, I fancy you (You)",
            "Took me back to Highgate, met all of his best mates",
            "So I guess all the rumors are true (Yeah)",
            "You know I love a London boy (Oh)",
            "Boy (Oh), I fancy you (I fancy you; ooh)",
            "So please show me Hackney",
            "Doesn't have to be Louis-V up on Bond-Street",
            "Just wanna be with you (Ooh)",
            "I, oh, I, I fancy you, oh, woah-ah-ah (Ooh)",
            "Stick with me, I'm your queen",
            "Like a Tennessee Stella-McCartney on the Heath",
            "Just wanna be with you (Ooh), wanna be with you",
            "I fancy you (Yeah), I fancy you, ah-ah (Ooh)"
          ]
        },
        {
          title: "Soon You'll Get Better",
          lines: [
            "The buttons of my coat were tangled in my hair",
            "In doctor's office lighting, I didn't tell you I was scared",
            "That was the first time we were there",
            "Holy orange bottles, each night, I pray to you",
            "Desperate people find faith, so now I pray to Jesus too",
            "And I say to you",
            "Ooh-ah",
            "Soon, you'll get better",
            "Ooh-ah",
            "Soon, you'll get better",
            "Ooh-ah",
            "You'll get better soon",
            "'Cause you have to",
            "I know delusion when I see it in the mirror",
            "You like the nicer nurses, you make the best of a bad deal",
            "I just pretend it isn't real",
            "I'll paint the kitchen neon, I'll brighten up the sky",
            "I know I'll never get it, there's not a day that I won't try",
            "And I say to you",
            "Ooh-ah",
            "Soon, you'll get better",
            "Ooh-ah",
            "Soon, you'll get better",
            "Ooh-ah",
            "You'll get better soon",
            "'Cause you have to",
            "And I hate to make this all about me",
            "But who am I supposed to talk to?",
            "What am I supposed to do",
            "If there's no you?",
            "This won't go back to normal, if it ever was",
            "It's been years of hoping and I keep saying it because",
            "'Cause I have to",
            "Ooh-ah",
            "You'll get better",
            "Ooh-ah",
            "Soon, you'll get better",
            "Ooh-ah",
            "You'll get better soon",
            "Ooh-ah",
            "Soon, you'll get better",
            "Ooh-ah",
            "Soon, you'll get better",
            "Ooh-ah",
            "You'll get better soon",
            "'Cause you have to"
          ]
        },
        {
          title: "False God",
          lines: [
            "We were crazy to think",
            "Crazy to think that this could work",
            "Remember how I said I'd die for you?",
            "We were stupid to jump",
            "In the ocean separating us",
            "Remember how I'd fly to you?",
            "And I can't talk to you when you're like this",
            "Staring out the window like I'm not your favorite town",
            "I'm New-York City",
            "I still do it for you, babe",
            "They all warned us about times like this",
            "They say the road gets hard and you get lost",
            "When you're led by blind faith, blind faith",
            "But we might just get away with it",
            "Religion's in your lips",
            "Even if it's a false god",
            "We'd still worship",
            "We might just get away with it",
            "The altar is my hips",
            "Even if it's a false god",
            "We'd still worship this love",
            "We'd still worship this love",
            "We'd still worship this love",
            "I know heaven's a thing",
            "I go there when you touch me, honey",
            "Hell is when I fight with you",
            "But we can patch it up good",
            "Make confessions and we're begging for forgiveness",
            "Got the wine for you",
            "And you can't talk to me when I'm like this",
            "Daring you to leave me just so I can try and scare you",
            "You're the West-Village",
            "You still do it for me, babe",
            "They all warned us about times like this",
            "They say the road gets hard and you get lost",
            "When you're led by blind faith, blind faith",
            "But we might just get away with it",
            "Religion's in your lips",
            "Even if it's a false god",
            "We'd still worship",
            "We might just get away with it",
            "The altar is my hips",
            "Even if it's a false god",
            "We'd still worship this love",
            "We'd still worship this love",
            "We'd still worship this love, ah",
            "Still worship this love",
            "Even if it's a false god",
            "Even if it's a false god",
            "Still worship this love"
          ]
        },
        {
          title: "You Need To Calm Down",
          lines: [
            "You are somebody that I don't know",
            "But you're takin' shots at me like it's Patr\xF3n",
            "And I'm just like, damn, it's 7AM",
            "Say it in the street, that's a knock-out",
            "But you say it in a Tweet, that's a cop-out",
            `And I'm just like, "Hey, are you okay?"`,
            "And I ain't tryna mess with your self-expression",
            "But I've learned a lesson that stressin' and obsessin' 'bout somebody else is no fun",
            "And snakes and stones never broke my bones",
            "So oh-oh, oh-oh, oh-oh, oh-oh, oh-oh",
            "You need to calm down, you're being too loud",
            "And I'm just like oh-oh, oh-oh, oh-oh, oh-oh, oh-oh (Oh)",
            "You need to just stop, like can you just not step on my gown?",
            "You need to calm down",
            "You are somebody that we don't know",
            "But you're comin' at my friends like a missile",
            "Why are you mad when you could be GLAAD? (You could be GLAAD)",
            "Sunshine on the street at the parade",
            "But you would rather be in the dark ages",
            "Makin' that sign must've taken all night",
            "You just need to take several seats and then try to restore the peace",
            "And control your urges to scream about all the people you hate",
            "'Cause shade never made anybody less gay",
            "So oh-oh, oh-oh, oh-oh, oh-oh, oh-oh",
            "You need to calm down, you're being too loud",
            "And I'm just like oh-oh, oh-oh, oh-oh, oh-oh, oh-oh (Oh)",
            "You need to just stop, like can you just not step on his gown?",
            "You need to calm down",
            "And we see you over there on the internet",
            "Comparing all the girls who are killing it",
            "But we figured you out",
            "We all know now we all got crowns",
            "You need to calm down",
            "Oh-oh, oh-oh, oh-oh, oh-oh, oh-oh",
            "You need to calm down (You need to calm down)",
            "You're being too loud (You're being too loud)",
            "And I'm just like oh-oh, oh-oh, oh-oh, oh-oh, oh-oh (Oh)",
            "You need to just stop (Can you stop?)",
            "Like can you just not step on our gowns?",
            "You need to calm down"
          ]
        },
        {
          title: "Afterglow",
          lines: [
            "I blew things out of proportion, now you're blue",
            "Put you in jail for something you didn't do",
            "I pinned your hands behind your back, oh",
            "Thought I had reason to attack, but no",
            "Fighting with a true love is boxing with no gloves",
            "Chemistry 'til it blows up, 'til there's no us",
            "Why'd I have to break what I love so much?",
            "It's on your face, and I'm to blame, I need to say",
            "Hey, it's all me, in my head",
            "I'm the one who burned us down",
            "But it's not what I meant",
            "Sorry that I hurt you",
            "I don't wanna do, I don't wanna do this to you (Ooh)",
            "I don't wanna lose, I don't wanna lose this with you (Ooh)",
            "I need to say, hey, it's all me, just don't go",
            "Meet me in the afterglow",
            "It's so excruciating to see you low",
            "Just wanna lift you up and not let you go",
            "This ultraviolet morning light below",
            "Tells me this love is worth the fight, oh",
            "I lived like an island, punished you with silence",
            "Went off like sirens, just crying",
            "Why'd I have to break what I love so much?",
            "It's on your face, don't walk away, I need to say",
            "Hey, it's all me, in my head",
            "I'm the one who burned us down",
            "But it's not what I meant",
            "I'm sorry that I hurt you",
            "I don't wanna do, I don't wanna do this to you (Ooh)",
            "I don't wanna lose, I don't wanna lose this with you (Ooh)",
            "I need to say, hey, it's all me, just don't go",
            "Meet me in the afterglow",
            "Tell me that you're still mine",
            "Tell me that we'll be just fine",
            "Even when I lose my mind",
            "I need to say",
            "Tell me that it's not my fault",
            "Tell me that I'm all you want",
            "Even when I break your heart",
            "I need to say",
            "Hey, it's all me, in my head",
            "I'm the one who burned us down",
            "But it's not what I meant",
            "Sorry that I hurt you",
            "I don't wanna do, I don't wanna do this to you (Ooh)",
            "I don't wanna lose, I don't wanna lose this with you (Ooh)",
            "I need to say, hey, it's all me, just don't go",
            "Meet me in the afterglow"
          ]
        },
        {
          title: "Me!",
          lines: [
            "I promise that you'll never find another like me",
            "I know that I'm a handful, baby, uh",
            "I know I never think before I jump",
            "And you're the kinda guy the ladies want",
            "(And there's a lotta cool chicks out there)",
            "I know that I went psycho on the phone",
            "I never leave well enough alone",
            "And trouble's gonna follow where I go",
            "(And there's a lotta cool chicks out there)",
            "But one of these things is not like the others",
            "Like a rainbow with all of the colors",
            "Baby doll, when it comes to a lover",
            "I promise that you'll never find another like",
            "Me-e-e, ooh-ooh-ooh-ooh",
            "I'm the only one of me",
            "Baby, that's the fun of me",
            "Eeh-eeh-eeh, ooh-ooh-ooh-ooh",
            "You're the only one of you",
            "Baby, that's the fun of you",
            "And I promise that nobody's gonna love you like me-e-e",
            "I know I tend to make it about me",
            "I know you never get just what you see",
            "But I will never bore you, baby",
            "(And there's a lotta lame guys out there)",
            "And when we had that fight out in the rain",
            "You ran after me and called my name",
            "I never wanna see you walk away",
            "(And there's a lotta lame guys out there)",
            "'Cause one of these things is not like the others",
            "Livin' in winter, I am your summer",
            "Baby doll, when it comes to a lover",
            "I promise that you'll never find another like",
            "Me-e-e, ooh-ooh-ooh-ooh",
            "I'm the only one of me",
            "Let me keep you company",
            "Eeh-eeh-eeh, ooh-ooh-ooh-ooh",
            "You're the only one of you",
            "Baby, that's the fun of you",
            "And I promise that nobody's gonna love you like me-e-e",
            `Girl, there ain't no "I" in "team"`,
            'But you know there is a "me"',
            "Strike the band up, one, two, three",
            "I promise that you'll never find another like me",
            `Girl, there ain't no "I" in "team"`,
            'But you know there is a "me"',
            `And you can't spell "awesome" without "me"`,
            "I promise that you'll never find another like",
            "Me-e-e (Yeah), ooh-ooh-ooh-ooh (And I want ya, baby)",
            "I'm the only one of me (I'm the only one of me)",
            "Baby, that's the fun of me (Baby, that's the fun of me)",
            "Eeh-eeh-eeh, ooh-ooh-ooh-ooh (Oh)",
            "You're the only one of you (Oh)",
            "Baby, that's the fun of you",
            "And I promise that nobody's gonna love you like me-e-e",
            `Girl, there ain't no "I" in "team" (Ooh-ooh-ooh-ooh)`,
            'But you know there is a "me"',
            "I'm the only one of me (Oh-oh)",
            "Baby, that's the fun of me",
            "(Eeh-eeh-eeh, ooh-ooh-ooh-ooh)",
            "Strike the band up, one, two, three",
            `You can't spell "awesome" without "me"`,
            "You're the only one of you (Yeah, yeah)",
            "Baby, that's the fun of you",
            "And I promise that nobody's gonna love you like me-e-e"
          ]
        },
        {
          title: "It's Nice To Have A Friend",
          lines: [
            "Ooh",
            "Ooh",
            "School bell rings, walk me home",
            "Sidewalk chalk covered in snow",
            "Lost my gloves, you give me one",
            '"Wanna hang out?" Yeah, sounds like fun',
            "Video games, you pass me a note",
            "Sleeping in tents",
            "It's nice to have a friend (Ooh)",
            "It's nice to have a friend (Ooh)",
            "Light pink sky, up on the roof",
            "Sun sinks down, no curfew",
            "Twenty questions, we tell the truth",
            "You've been stressed out lately, yeah, me too",
            "Something gave you the nerve",
            "To touch my hand",
            "It's nice to have a friend (Ooh)",
            "It's nice to have a friend (Ooh)",
            "Church bells ring, carry me home",
            "Rice on the ground looks like snow",
            'Call my bluff, call you "Babe"',
            "Have my back, yeah, every day",
            "Feels like home, stay in bed",
            "The whole weekend",
            "It's nice to have a friend (Ooh)",
            "It's nice to have a friend (Ooh)",
            "It's nice to have a friend (Ooh)",
            "(Ooh)"
          ]
        },
        {
          title: "Daylight",
          lines: [
            "My love was as cruel as the cities I lived in",
            "Everyone looked worse in the light",
            "There are so many lines that I've crossed unforgiven",
            "I'll tell you the truth but never goodbye",
            "I don't wanna look at anything else now that I saw you",
            "I don't wanna think of anything else now that I thought of you",
            "I've been sleepin' so long in a twenty-year dark night",
            "And now I see daylight, I only see daylight",
            "Luck of the draw only draws the unlucky",
            "And so I became the butt of the joke",
            "I wounded the good and I trusted the wicked",
            "Clearin' the air, I breathed in the smoke",
            "Maybe you ran with the wolves and refused to settle down",
            "Maybe I've stormed out of every single room in this town",
            "Threw out our cloaks and our daggers because it's morning now",
            "It's brighter now, now",
            "I don't wanna look at anything else now that I saw you",
            "(I can never look away)",
            "I don't wanna think of anything else now that I thought of you",
            "(Things will never be the same)",
            "I've been sleepin' so long in a twenty-year dark night",
            "(Now I'm wide awake)",
            "And now I see daylight (Daylight), I only see daylight (Daylight)",
            "I only see daylight, daylight, daylight, daylight",
            "I only see daylight, daylight, daylight, daylight",
            "And I can still see it all (In my mind)",
            "All of you, all of me (Intertwined)",
            "I once believed love would be (Black and white)",
            "But it's golden (Golden)",
            "And I can still see it all (In my head)",
            "Back and forth from New-York (Sneakin' in your bed)",
            "I once believed love would be (Burnin' red)",
            "But it's golden",
            "Like daylight, like daylight",
            "Like daylight, daylight",
            "I don't wanna look at anything else now that I saw you",
            "(I can never look away)",
            "And I don't wanna think of anything else now that I thought of you",
            "(Things will never be the same)",
            "I've been sleepin' so long in a twenty-year dark night",
            "(Now I'm wide awake)",
            "And now I see daylight (I see daylight), I only see daylight (Ah)",
            "I only see daylight, daylight, daylight, daylight",
            "I only see daylight, daylight, daylight, daylight (Ah)",
            "(And I can still see it all)",
            "I only see daylight, daylight, daylight, daylight",
            "(And I can still see it all, back and forth from New-York)",
            "I only see daylight, daylight, daylight, daylight",
            "(I once believed love would be burning red)",
            "Like daylight",
            "It's golden like daylight",
            "You gotta step into the daylight and let it go",
            "Just let it go, let it go",
            "I wanna be defined by the things that I love",
            "Not the things I hate",
            "Not the things I'm afraid of, I'm afraid of",
            "Or the things that haunt me in the middle of the night",
            "I, I just think that",
            "You are what you love"
          ]
        }
      ]
    },
    {
      title: "Folklore",
      songs: [
        {
          title: "The 1",
          lines: [
            "I'm doing good, I'm on some new shit",
            'Been saying "yes" instead of "no"',
            "I thought I saw you at the bus stop, I didn't though",
            "I hit the ground running each night",
            "I hit the Sunday matin\xE9e",
            "You know the greatest films of all time were never made",
            "I guess you never know, never know",
            "And if you wanted me, you really should've showed",
            "And if you never bleed, you're never gonna grow",
            "And it's alright now",
            "But we were something, don't you think so?",
            "Roaring twenties, tossing pennies in the pool",
            "And if my wishes came true",
            "It would've been you",
            "In my defense, I have none",
            "For never leaving well enough alone",
            "But it would've been fun",
            "If you would've been the one",
            "(Ooh)",
            "I have this dream you're doing cool shit",
            "Having adventures on your own",
            "You meet some woman on the internet and take her home",
            "We never painted by the numbers, baby",
            "But we were making it count",
            "You know the greatest loves of all time are over now",
            "I guess you never know, never know",
            "And it's another day waking up alone",
            "But we were something, don't you think so?",
            "Roaring twenties, tossing pennies in the pool",
            "And if my wishes came true",
            "It would've been you",
            "In my defense, I have none",
            "For never leaving well enough alone",
            "But it would've been fun",
            "If you would've been the one",
            "I, I, I persist and resist the temptation to ask you",
            "If one thing had been different",
            "Would everything be different today?",
            "We were something, don't you think so?",
            "Ros\xE9 flowing with your chosen family",
            "And it would've been sweet",
            "If it could've been me",
            "In my defense, I have none",
            "For digging up the grave another time",
            "But it would've been fun",
            "If you would've been the one",
            "(Ooh)"
          ]
        },
        {
          title: "Cardigan",
          lines: [
            "Vintage tee, brand new phone",
            "High heels on cobblestones",
            "When you are young, they assume you know nothing",
            "Sequin smile, black lipstick",
            "Sensual politics",
            "When you are young, they assume you know nothing",
            "But I knew you",
            "Dancin' in your Levi's",
            "Drunk under a streetlight, I",
            "I knew you",
            "Hand under my sweatshirt",
            "Baby, kiss it better, I",
            "And when I felt like I was an old cardigan",
            "Under someone's bed",
            "You put me on and said I was your favorite",
            "A friend to all is a friend to none",
            "Chase two girls, lose the one",
            "When you are young, they assume you know nothing",
            "But I knew you",
            "Playing hide-and-seek and",
            "Giving me your weekends, I",
            "I knew you",
            "Your heartbeat on the High Line",
            "Once in twenty lifetimes, I",
            "And when I felt like I was an old cardigan",
            "Under someone's bed",
            "You put me on and said I was your favorite",
            "To kiss in cars and downtown bars",
            "Was all we needed",
            "You drew stars around my scars",
            "But now I'm bleedin'",
            "'Cause I knew you",
            "Steppin' on the last train",
            "Marked me like a bloodstain, I",
            "I knew you",
            "Tried to change the ending",
            "Peter losing Wendy, I",
            "I knew you",
            "Leavin' like a father",
            "Running like water, I",
            "And when you are young, they assume you know nothing",
            "But I knew you'd linger like a tattoo kiss",
            "I knew you'd haunt all of my what-ifs",
            "The smell of smoke would hang around this long",
            "'Cause I knew everything when I was young",
            "I knew I'd curse you for the longest time",
            "Chasin' shadows in the grocery line",
            "I knew you'd miss me once the thrill expired",
            "And you'd be standin' in my front porch light",
            "And I knew you'd come back to me",
            "You'd come back to me",
            "And you'd come back to me",
            "And you'd come back",
            "And when I felt like I was an old cardigan",
            "Under someone's bed",
            "You put me on and said I was your favorite"
          ]
        },
        {
          title: "The Last Great American Dynasty",
          lines: [
            "Rebekah rode up on the afternoon train, it was sunny",
            "Her saltbox house on the coast took her mind off St.-Louis",
            "Bill was the heir to the Standard-Oil name and money",
            'And the town said, "How did a middle-class divorc\xE9e do it?"',
            "The wedding was charming, if a little gauche",
            "There's only so far new money goes",
            'They picked out a home and called it "Holiday-House"',
            "Their parties were tasteful, if a little loud",
            "The doctor had told him to settle down",
            "It must have been her fault his heart gave out",
            "And they said",
            '"There goes the last great American dynasty',
            "Who knows, if she never showed up, what could've been",
            "There goes the maddest woman this town has ever seen",
            'She had a marvelous time ruining everything"',
            "Rebekah gave up on the Rhode-Island set forever",
            "Flew in all her Bitch-Pack friends from the city",
            "Filled the pool with champagne and swam with the big names",
            "And blew through the money on the boys and the ballet",
            "And losing on card game bets with Dal\xED",
            "And they said",
            '"There goes the last great American dynasty',
            "Who knows, if she never showed up, what could've been",
            "There goes the most shameless woman this town has ever seen",
            'She had a marvelous time ruining everything"',
            "They say she was seen on occasion",
            "Pacing the rocks, staring out at the midnight sea",
            "And in a feud with her neighbor",
            "She stole his dog and dyed it key lime green",
            "Fifty years is a long time",
            "Holiday-House sat quietly on that beach",
            "Free of women with madness, their men and bad habits",
            "And then it was bought by me",
            "Who knows, if I never showed up, what could've been",
            "There goes the loudest woman this town has ever seen",
            "I had a marvelous time ruining everything",
            "I had a marvelous time ruining everything",
            "A marvelous time ruining everything",
            "A marvelous time",
            "I had a marvelous time"
          ]
        },
        {
          title: "Exile",
          lines: [
            "I can see you standing, honey",
            "With his arms around your body",
            "Laughin', but the joke's not funny at all",
            "And it took you five whole minutes",
            "To pack us up and leave me with it",
            "Holdin' all this love out here in the hall",
            "I think I've seen this film before",
            "And I didn't like the ending",
            "You're not my homeland anymore",
            "So what am I defending now?",
            "You were my town, now I'm in exile, seein' you out",
            "I think I've seen this film before",
            "Ooh, ooh, ooh",
            "I can see you starin', honey",
            "Like he's just your understudy",
            "Like you'd get your knuckles bloody for me",
            "Second, third, and hundredth chances",
            "Balancin' on breaking branches",
            "Those eyes add insult to injury",
            "I think I've seen this film before",
            "And I didn't like the ending",
            "I'm not your problem anymore",
            "So who am I offending now?",
            "You were my crown, now I'm in exile, seein' you out",
            "I think I've seen this film before",
            "So I'm leaving out the side door",
            "So step right out, there is no amount",
            "Of crying I can do for you",
            "All this time",
            "We always walked a very thin line",
            "You didn't even hear me out (You didn't even hear me out)",
            "You never gave a warning sign (I gave so many signs)",
            "All this time",
            "I never learned to read your mind (Never learned to read my mind)",
            "I couldn't turn things around (You never turned things around)",
            "'Cause you never gave a warning sign (I gave so many signs)",
            "So many signs, so many signs",
            "You didn't even see the signs",
            "I think I've seen this film before",
            "And I didn't like the ending",
            "You're not my homeland anymore",
            "So what am I defending now?",
            "You were my town, now I'm in exile, seein' you out",
            "I think I've seen this film before",
            "So I'm leavin' out the side door",
            "So step right out, there is no amount",
            "Of crying I can do for you",
            "All this time",
            "We always walked a very thin line",
            "You didn't even hear me out (Didn't even hear me out)",
            "You never gave a warning sign (I gave so many signs)",
            "All this time",
            "I never learned to read your mind (Never learned to read my mind)",
            "I couldn't turn things around (You never turned things around)",
            "'Cause you never gave a warning sign (I gave so many signs)",
            "You never gave a warning sign (All this time)",
            "(So many times) I never learned to read your mind",
            "(So many signs) I couldn't turn things around (I couldn't turn things around)",
            "'Cause you never gave a warning sign (You never gave a warning sign)",
            "You never gave a warning sign",
            "Ah, ah"
          ]
        },
        {
          title: "My Tears Ricochet",
          lines: [
            "We gather here, we line up, weepin' in a sunlit room",
            "And if I'm on fire, you'll be made of ashes, too",
            "Even on my worst day, did I deserve, babe",
            "All the hell you gave me?",
            "'Cause I loved you, I swear I loved you",
            "'Til my dying day",
            "I didn't have it in myself to go with grace",
            "And you're the hero flying around, saving face",
            "And if I'm dead to you, why are you at the wake?",
            "Cursing my name, wishing I stayed",
            "Look at how my tears ricochet",
            "We gather stones, never knowing what they'll mean",
            "Some to throw, some to make a diamond ring",
            "You know I didn't want to have to haunt you",
            "But what a ghostly scene",
            "You wear the same jewels that I gave you",
            "As you bury me",
            "I didn't have it in myself to go with grace",
            "'Cause when I'd fight, you used to tell me I was brave",
            "And if I'm dead to you, why are you at the wake?",
            "Cursing my name, wishing I stayed",
            "Look at how my tears ricochet",
            "And I can go anywhere I want",
            "Anywhere I want, just not home",
            "And you can aim for my heart, go for blood",
            "But you would still miss me in your bones",
            "And I still talk to you (When I'm screaming at the sky)",
            "And when you can't sleep at night (You hear my stolen lullabies)",
            "I didn't have it in myself to go with grace",
            "And so the battleships will sink beneath the waves",
            "You had to kill me, but it killed you just the same",
            "Cursing my name, wishing I stayed",
            "You turned into your worst fears",
            "And you're tossing out blame, drunk on this pain",
            "Crossing out the good years",
            "And you're cursing my name, wishing I stayed",
            "Look at how my tears ricochet"
          ]
        },
        {
          title: "Mirrorball",
          lines: [
            "I want you to know",
            "I'm a mirrorball",
            "I'll show you every version of yourself tonight",
            "I'll get you out on the floor",
            "Shimmering beautiful",
            "And when I break, it's in a million pieces",
            "Hush, when no one is around, my dear",
            "You'll find me on my tallest tiptoes",
            "Spinning in my highest heels, love",
            "Shining just for you",
            "Hush, I know they said the end is near",
            "But I'm still on my tallest tiptoes",
            "Spinning in my highest heels, love",
            "Shining just for you",
            "I want you to know",
            "I'm a mirrorball",
            "I can change everything about me to fit in",
            "You are not like the regulars",
            "The masquerade revelers",
            "Drunk as they watch my shattered edges glisten",
            "Hush, when no one is around, my dear",
            "You'll find me on my tallest tiptoes",
            "Spinning in my highest heels, love",
            "Shining just for you",
            "Hush, I know they said the end is near",
            "But I'm still on my tallest tiptoes",
            "Spinning in my highest heels, love",
            "Shining just for you",
            "And they called off the circus, burned the disco down",
            "When they sent home the horses and the rodeo clowns",
            "I'm still on that tightrope",
            "I'm still trying everything to get you laughing at me",
            "And I'm still a believer, but I don't know why",
            "I've never been a natural, all I do is try, try, try",
            "I'm still on that trapeze",
            "I'm still trying everything to keep you looking at me",
            "Because I'm a mirrorball",
            "I'm a mirrorball",
            "And I'll show you every version of yourself tonight"
          ]
        },
        {
          title: "Seven",
          lines: [
            "Please picture me in the trees",
            "I hit my peak at seven",
            "Feet in the swing over the creek",
            "I was too scared to jump in",
            "But I, I was high in the sky",
            "With Pennsylvania under me",
            "Are there still beautiful things?",
            "Sweet tea in the summer",
            "Cross your heart, won't tell no other",
            "And though I can't recall your face",
            "I still got love for you",
            "Your braids like a pattern",
            "Love you to the Moon and to Saturn",
            "Passed down like folk songs",
            "The love lasts so long",
            "And I've been meaning to tell you",
            "I think your house is haunted",
            "Your dad is always mad and that must be why",
            "And I think you should come live with me",
            "And we can be pirates",
            "Then you won't have to cry",
            "Or hide in the closet",
            "And just like a folk song",
            "Our love will be passed on",
            "Please picture me in the weeds",
            "Before I learned civility",
            "I used to scream ferociously",
            "Any time I wanted",
            "I, I",
            "Sweet tea in the summer",
            "Cross my heart, won't tell no other",
            "And though I can't recall your face",
            "I still got love for you",
            "Pack your dolls and a sweater",
            "We'll move to India forever",
            "Passed down like folk songs",
            "Our love lasts so long"
          ]
        },
        {
          title: "August",
          lines: [
            "Salt air, and the rust on your door",
            "I never needed anything more",
            'Whispers of "Are you sure?"',
            '"Never have I ever before"',
            "But I can see us lost in the memory",
            "August slipped away into a moment in time",
            "'Cause it was never mine",
            "And I can see us twisted in bedsheets",
            "August sipped away like a bottle of wine",
            "'Cause you were never mine",
            "Your back beneath the sun",
            "Wishin' I could write my name on it",
            "Will you call when you're back at school?",
            "I remember thinkin' I had you",
            "But I can see us lost in the memory",
            "August slipped away into a moment in time",
            "'Cause it was never mine",
            "And I can see us twisted in bedsheets",
            "August sipped away like a bottle of wine",
            "'Cause you were never mine",
            "Back when we were still changin' for the better",
            "Wanting was enough",
            "For me, it was enough",
            "To live for the hope of it all",
            "Cancel plans just in case you'd call",
            'And say, "Meet me behind the mall"',
            'So much for summer love and saying "us"',
            "'Cause you weren't mine to lose",
            "You weren't mine to lose, no",
            "But I can see us lost in the memory",
            "August slipped away into a moment in time",
            "'Cause it was never mine",
            "And I can see us twisted in bedsheets",
            "August sipped away like a bottle of wine",
            "'Cause you were never mine",
            "'Cause you were never mine",
            "Never mine",
            "But do you remember?",
            'Remember when I pulled up and said "Get in the car"',
            "And then canceled my plans just in case you'd call?",
            "Back when I was livin' for the hope of it all, for the hope of it all",
            '"Meet me behind the mall"',
            '(Remember when I pulled up and said "Get in the car")',
            "(And then canceled my plans just in case you'd call?)",
            "(Back when I was livin' for the hope of it all, for the hope of it all)",
            '("Meet me behind the mall")',
            'Remember when I pulled up and said "Get in the car"',
            "And then canceled my plans just in case you'd call?",
            "Back when I was livin' for the hope of it all (For the hope of it all)",
            "For the hope of it all, for the hope of it all",
            "(For the hope of it all, for the hope of it all)"
          ]
        },
        {
          title: "This Is Me Trying",
          lines: [
            "I've been having a hard time adjusting",
            "I had the shiniest wheels, now they're rusting",
            "I didn't know if you'd care if I came back",
            "I have a lot of regrets about that",
            "Pulled the car off the road to the lookout",
            "Could've followed my fears all the way down",
            "And maybe I don't quite know what to say",
            "But I'm here in your doorway",
            "I just wanted you to know that this is me trying",
            "I just wanted you to know that this is me trying",
            "They told me all of my cages were mental",
            "So I got wasted like all my potential",
            "And my words shoot to kill when I'm mad",
            "I have a lot of regrets about that",
            "I was so ahead of the curve, the curve became a sphere",
            "Fell behind all my classmates and I ended up here",
            "Pouring out my heart to a stranger",
            "But I didn't pour the whiskey",
            "I just wanted you to know that this is me trying",
            "I just wanted you to know that this is me trying",
            "At least I'm trying",
            "And it's hard to be at a party when I feel like an open wound",
            "It's hard to be anywhere these days when all I want is you",
            "You're a flashback in a film reel on the one screen in my town",
            "And I just wanted you to know that this is me trying",
            "(And maybe I don't quite know what to say)",
            "I just wanted you to know that this is me trying",
            "At least I'm trying"
          ]
        },
        {
          title: "Illicit Affairs",
          lines: [
            "Make sure nobody sees you leave",
            "Hood over your head, keep your eyes down",
            "Tell your friends you're out for a run",
            "You'll be flushed when you return",
            "Take the road less traveled by",
            "Tell yourself you can always stop",
            "What started in beautiful rooms",
            "Ends with meetings in parking lots",
            "And that's the thing about illicit affairs",
            "And clandestine meetings and longing stares",
            "It's born from just one single glance",
            "But it dies and it dies and it dies",
            "A million little times",
            "Leave the perfume on the shelf",
            "That you picked out just for him",
            "So you leave no trace behind",
            "Like you don't even exist",
            "Take the words for what they are",
            "A dwindling, mercurial high",
            "A drug that only worked",
            "The first few hundred times",
            "And that's the thing about illicit affairs",
            "And clandestine meetings and stolen stares",
            "They show their truth one single time",
            "But they lie and they lie and they lie",
            "A million little times",
            "And you wanna scream",
            `Don't call me "kid," don't call me "baby"`,
            "Look at this godforsaken mess that you made me",
            "You showed me colors you know I can't see with anyone else",
            `Don't call me "kid," don't call me "baby"`,
            "Look at this idiotic fool that you made me",
            "You taught me a secret language I can't speak with anyone else",
            "And you know damn well",
            "For you, I would ruin myself",
            "A million little times"
          ]
        },
        {
          title: "Invisible String",
          lines: [
            "Green was the color of the grass",
            "Where I used to read at Centennial-Park",
            "I used to think I would meet somebody there",
            "Teal was the color of your shirt",
            "When you were sixteen at the yogurt shop",
            "You used to work at to make a little money",
            "Time, curious time",
            "Gave me no compasses, gave me no signs",
            "Were there clues I didn't see?",
            "And isn't it just so pretty to think",
            "All along there was some",
            "Invisible string",
            "Tying you to me?",
            "Ooh-ooh-ooh-ooh",
            "Bad was the blood of the song in the cab",
            "On your first trip to L.A.",
            "You ate at my favorite spot for dinner",
            "Bold was the waitress on our three-year trip",
            "Getting lunch down by The-Lakes",
            "She said I looked like an American singer",
            "Time, mystical time",
            "Cutting me open, then healing me fine",
            "Were there clues I didn't see?",
            "And isn't it just so pretty to think",
            "All along there was some",
            "Invisible string",
            "Tying you to me?",
            "Ooh-ooh-ooh-ooh",
            "A string that pulled me",
            "Out of all the wrong arms, right into that dive bar",
            "Something wrapped all of my past mistakes in barbed wire",
            "Chains around my demons",
            "Wool to brave the seasons",
            "One single thread of gold",
            "Tied me to you",
            "Cold was the steel of my axe to grind",
            "For the boys who broke my heart",
            "Now I send their babies presents",
            "Gold was the color of the leaves",
            "When I showed you around Centennial-Park",
            "Hell was the journey, but it brought me heaven",
            "Time, wondrous time",
            "Gave me the blues and then purple-pink skies",
            "And it's cool, baby, with me",
            "And isn't it just so pretty to think",
            "All along there was some",
            "Invisible string",
            "Tying you to me?",
            "Ooh-ooh-ooh-ooh",
            "Me",
            "Ooh-ooh-ooh-ooh",
            "(Ah-ah-ah)",
            "(Ah-ah-ah)"
          ]
        },
        {
          title: "Mad Woman",
          lines: [
            "What did you think I'd say to that?",
            "Does a scorpion sting when fighting back?",
            "They strike to kill, and you know I will",
            "You know I will",
            "What do you sing on your drive home?",
            "Do you see my face in the neighbor's lawn?",
            "Does she smile?",
            'Or does she mouth, "Fuck you forever"?',
            "Every time you call me crazy, I get more crazy",
            "What about that?",
            "And when you say I seem angry, I get more angry",
            "And there's nothing like a mad woman",
            "What a shame she went mad",
            "No one likes a mad woman",
            "You made her like that",
            "And you'll poke that bear 'til her claws come out",
            "And you find something to wrap your noose around",
            "And there's nothing like a mad woman",
            "Now I breathe flames each time I talk",
            "My cannons all firin' at your yacht",
            `They say, "Move on," but you know I won't`,
            "And women like hunting witches too",
            "Doing your dirtiest work for you",
            "It's obvious that wanting me dead",
            "Has really brought you two together",
            "Every time you call me crazy, I get more crazy",
            "What about that?",
            "And when you say I seem angry, I get more angry",
            "And there's nothing like a mad woman",
            "What a shame she went mad",
            "No one likes a mad woman",
            "You made her like that",
            "And you'll poke that bear 'til her claws come out",
            "And you find something to wrap your noose around",
            "And there's nothing like a mad woman",
            "I'm taking my time, taking my time",
            "'Cause you took everything from me",
            "Watching you climb, watching you climb",
            "Over people like me",
            "The master of spin has a couple side flings",
            "Good wives always know",
            "She should be mad, should be scathing like me, but",
            "No one likes a mad woman",
            "What a shame she went mad",
            "You made her like that"
          ]
        },
        {
          title: "Epiphany",
          lines: [
            "Keep your helmet, keep your life, son",
            "Just a flesh wound, here's your rifle",
            "Crawling up the beaches now",
            `"Sir, I think he's bleeding out"`,
            "And some things you just can't speak about",
            "With you I serve, with you I fall down, down",
            "Watch you breathe in, watch you breathing out, out",
            "Something med school did not cover",
            "Someone's daughter, someone's mother",
            "Holds your hand through plastic now",
            `"Doc, I think she's crashing out"`,
            "And some things you just can't speak about",
            "Only twenty minutes to sleep",
            "But you dream of some epiphany",
            "Just one single glimpse of relief",
            "To make some sense of what you've seen",
            "With you I serve, with you I fall down, down (Down)",
            "Watch you breathe in, watch you breathing out, out",
            "With you I serve (With you I serve), with you I fall down (Down), down (Down)",
            "Watch you breathe in (Watch you breathe in), watch you breathing out (Out), out (Out)",
            "Only twenty minutes to sleep",
            "But you dream of some epiphany",
            "Just one single glimpse of relief",
            "To make some sense of what you've seen"
          ]
        },
        {
          title: "Betty",
          lines: [
            "Betty, I won't make assumptions",
            "About why you switched your homeroom, but",
            "I think it's 'cause of me",
            "Betty, one time, I was riding on my skateboard",
            "When I passed your house",
            "It's like I couldn't breathe",
            "You heard the rumors from Inez",
            "You can't believe a word she says",
            "Most times, but this time, it was true",
            "The worst thing that I ever did",
            "Was what I did to you",
            "But if I just showed up at your party",
            "Would you have me? Would you want me?",
            "Would you tell me to go fuck myself",
            "Or lead me to the garden?",
            "In the garden, would you trust me",
            "If I told you it was just a summer thing?",
            "I'm only seventeen, I don't know anything",
            "But I know I miss you",
            "Betty, I know where it all went wrong",
            "Your favorite song was playing",
            "From the far side of the gym",
            "I was nowhere to be found",
            "I hate the crowds, you know that",
            "Plus, I saw you dance with him",
            "You heard the rumors from Inez",
            "You can't believe a word she says",
            "Most times, but this time, it was true",
            "The worst thing that I ever did",
            "Was what I did to you",
            "But if I just showed up at your party",
            "Would you have me? Would you want me?",
            "Would you tell me to go fuck myself",
            "Or lead me to the garden?",
            "In the garden, would you trust me",
            "If I told you it was just a summer thing?",
            "I'm only seventeen, I don't know anything",
            "But I know I miss you",
            "I was walking home on broken cobblestones",
            "Just thinking of you when she pulled up like",
            "A figment of my worst intentions",
            `She said, "James, get in, let's drive"`,
            "Those days turned into nights",
            "Slept next to her, but",
            "I dreamt of you all summer long",
            "Betty, I'm here on your doorstep",
            "And I planned it out for weeks now",
            "But it's finally sinkin' in",
            "Betty, right now is the last time",
            "I can dream about what happens when",
            "You see my face again",
            "The only thing I wanna do",
            "Is make it up to you",
            "So I showed up at your party",
            "Yeah, I showed up at your party",
            "Yeah, I showed up at your party",
            "Will you have me? Will you love me?",
            "Will you kiss me on the porch",
            "In front of all your stupid friends?",
            "If you kiss me, will it be just like I dreamed it?",
            "Will it patch your broken wings?",
            "I'm only seventeen, I don't know anything",
            "But I know I miss you",
            "Standing in your cardigan",
            "Kissin' in my car again",
            "Stopped at a streetlight",
            "You know I miss you"
          ]
        },
        {
          title: "Peace",
          lines: [
            "Our coming-of-age has come and gone",
            "Suddenly, this summer, it's clear",
            "I never had the courage of my convictions",
            "As long as danger is near",
            "And it's just around the corner, darlin'",
            "'Cause it lives in me",
            "No, I could never give you peace",
            "But I'm a fire and I'll keep your brittle heart warm",
            "If your cascade, ocean wave blues come",
            "All these people think love's for show",
            "But I would die for you in secret",
            "The devil's in the details, but you got a friend in me",
            "Would it be enough if I could never give you peace?",
            "Your integrity makes me seem small",
            "You paint dreamscapes on the wall",
            "I talk shit with my friends, it's like I'm wasting your honor",
            "And you know that I'd swing with you for the fences",
            "Sit with you in the trenches",
            "Give you my wild, give you a child",
            "Give you the silence that only comes when two people understand each other",
            "Family that I chose, now that I see your brother as my brother",
            "Is it enough?",
            "But there's robbers to the east, clowns to the west",
            "I'd give you my sunshine, give you my best",
            "But the rain is always gonna come if you're standin' with me",
            "But I'm a fire and I'll keep your brittle heart warm",
            "If your cascade, ocean wave blues come",
            "All these people think love's for show",
            "But I would die for you in secret",
            "The devil's in the details, but you got a friend in me",
            "Would it be enough if I could never give you peace?",
            "Would it be enough if I could never give you peace?",
            "Would it be enough if I could never give you peace?"
          ]
        },
        {
          title: "Hoax",
          lines: [
            "My only one",
            "My smoking gun",
            "My eclipsed sun",
            "This has broken me down",
            "My twisted knife",
            "My sleepless night",
            "My winless fight",
            "This has frozen my ground",
            'Stood on the cliffside screaming, "Give me a reason"',
            "Your faithless love's the only hoax I believe in",
            "Don't want no other shade of blue but you",
            "No other sadness in the world would do",
            "My best laid plan",
            "Your sleight of hand",
            "My barren land",
            "I am ash from your fire",
            'Stood on the cliffside screaming, "Give me a reason"',
            "Your faithless love's the only hoax I believe in",
            "Don't want no other shade of blue but you",
            "No other sadness in the world would do",
            "You know I left a part of me back in New-York",
            "You knew the hero died so what's the movie for?",
            "You knew it still hurts underneath my scars",
            "From when they pulled me apart",
            "You knew the password so I let you in the door",
            "You knew you won so what's the point of keeping score?",
            "You knew it still hurts underneath my scars",
            "From when they pulled me apart",
            "But what you did was just as dark",
            "(Ah, ah, ah)",
            "Darling, this was just as hard",
            "As when they pulled me apart",
            "My only one",
            "My kingdom come undone",
            "My broken drum",
            "You have beaten my heart",
            "Don't want no other shade of blue but you",
            "No other sadness in the world would do"
          ]
        },
        {
          title: "The Lakes",
          lines: [
            "Is it romantic how all my elegies eulogize me?",
            "I'm not cut out for all these cynical clones",
            "These hunters with cell phones",
            "Take me to The-Lakes, where all the poets went to die",
            "I don't belong and, my beloved, neither do you",
            "Those Windermere peaks look like a perfect place to cry",
            "I'm setting off, but not without my muse",
            "What should be over, burrowed under my skin",
            "In heart-stopping waves of hurt",
            "I've come too far to watch some namedropping sleaze",
            "Tell me what are my words worth",
            "Take me to The-Lakes, where all the poets went to die",
            "I don't belong and, my beloved, neither do you",
            "Those Windermere peaks look like a perfect place to cry",
            "I'm setting off, but not without my muse",
            "I want auroras and sad prose",
            "I want to watch wisteria grow right over my bare feet",
            "'Cause I haven't moved in years",
            "And I want you right here",
            "A red rose grew up out of ice frozen ground",
            "With no one around to tweet it",
            "While I bathe in cliffside pools",
            "With my calamitous love and insurmountable grief",
            "Take me to The-Lakes, where all the poets went to die",
            "I don't belong and, my beloved, neither do you",
            "Those Windermere peaks look like a perfect place to cry",
            "I'm setting off, but not without my muse",
            "No, not without you"
          ]
        }
      ]
    },
    {
      title: "Evermore",
      songs: [
        {
          title: "Willow",
          lines: [
            "I'm like the water when your ship rolled in that night",
            "Rough on the surface, but you cut through like a knife",
            "And if it was an open-shut case",
            "I never would've known from that look on your face",
            "Lost in your current like a priceless wine",
            "The more that you say, the less I know",
            "Wherever you stray, I follow",
            "I'm begging for you to take my hand",
            "Wreck my plans, that's my man",
            "Life was a willow and it bent right to your wind",
            "Head on the pillow, I could feel you sneakin' in",
            "As if you were a mythical thing",
            "Like you were a trophy or a champion ring",
            "And there was one prize I'd cheat to win",
            "The more that you say, the less I know",
            "Wherever you stray, I follow",
            "I'm begging for you to take my hand",
            "Wreck my plans, that's my man",
            "You know that my train could take you home",
            "Anywhere else is hollow",
            "I'm begging for you to take my hand",
            "Wreck my plans, that's my man",
            "Life was a willow and it bent right to your wind",
            "They count me out time and time again",
            "Life was a willow and it bent right to your wind",
            "But I come back stronger than a '90s trend",
            "Wait for the signal, and I'll meet you after dark",
            "Show me the places where the others gave you scars",
            "Now this is an open-shut case",
            "I guess I should've known from the look on your face",
            "Every bait-and-switch was a work of art",
            "The more that you say, the less I know",
            "Wherever you stray, I follow",
            "I'm begging for you to take my hand",
            "Wreck my plans, that's my man",
            "You know that my train could take you home",
            "Anywhere else is hollow",
            "I'm begging for you to take my hand",
            "Wreck my plans, that's my man",
            "The more that you say, the less I know",
            "Wherever you stray, I follow",
            "I'm begging for you to take my hand",
            "Wreck my plans, that's my man",
            "You know that my train could take you home",
            "Anywhere else is hollow",
            "I'm begging for you to take my hand",
            "Wreck my plans, that's my man",
            "Hey, that's my man",
            "That's my man",
            "Yeah, that's my man",
            "Every bait-and-switch was a work of art",
            "That's my man",
            "Hey, that's my man",
            "I'm begging for you to take my hand",
            "Wreck my plans, that's my man"
          ]
        },
        {
          title: "Champagne Problems",
          lines: [
            "You booked the night train for a reason",
            "So you could sit there in this hurt",
            "Bustling crowds or silent sleepers",
            "You're not sure which is worse",
            "Because I dropped your hand while dancing",
            "Left you out there standing",
            "Crestfallen on the landing",
            "Champagne problems",
            "Your mom's ring in your pocket",
            "My picture in your wallet",
            "Your heart was glass, I dropped it",
            "Champagne problems",
            "You told your family for a reason",
            "You couldn't keep it in",
            "Your sister splashed out on the bottle",
            "Now no one's celebrating",
            "Dom-P\xE9rignon, you brought it",
            "No crowd of friends applauded",
            "Your hometown skeptics called it",
            "Champagne problems",
            "You had a speech, you're speechless",
            "Love slipped beyond your reaches",
            "And I couldn't give a reason",
            "Champagne problems",
            "Your Midas touch on the Chevy door",
            "November flush and your flannel cure",
            '"This dorm was once a madhouse"',
            `I made a joke, "Well, it's made for me"`,
            "How evergreen, our group of friends",
            "Don't think we'll say that word again",
            "And soon they'll have the nerve to deck the halls",
            "That we once walked through",
            "One for the money, two for the show",
            "I never was ready so I watch you go",
            "Sometimes you just don't know the answer",
            "'Til someone's on their knees and asks you",
            `"She would've made such a lovely bride`,
            `What a shame she's fucked in the head," they said`,
            "But you'll find the real thing instead",
            "She'll patch up your tapestry that I shred",
            "And hold your hand while dancing",
            "Never leave you standing",
            "Crestfallen on the landing",
            "With champagne problems",
            "Your mom's ring in your pocket",
            "Her picture in your wallet",
            "You won't remember all my",
            "Champagne problems",
            "You won't remember all my",
            "Champagne problems"
          ]
        },
        {
          title: "Gold Rush",
          lines: [
            "Gleaming, twinkling",
            "Eyes like sinking",
            "Ships on waters",
            "So inviting, I almost jump in",
            "But I don't like a gold rush, gold rush",
            "I don't like anticipatin' my face in a red flush",
            "I don't like that anyone would die to feel your touch",
            "Everybody wants you",
            "Everybody wonders what it would be like to love you",
            "Walk past, quick brush",
            "I don't like slow motion, double vision in rose blush",
            "I don't like that falling feels like flying 'til the bone crush",
            "Everybody wants you",
            "But I don't like a gold rush",
            "What must it be like to grow up that beautiful?",
            "With your hair falling into place like dominoes",
            "I see me padding across your wooden floors",
            "With my Eagles T-shirt hanging from the door",
            "At dinner parties, I call you out on your contrarian shit",
            "And the coastal town we wandered 'round had never seen a love as pure as it",
            "And then it fades into the gray of my day-old tea",
            "'Cause it could never be",
            "'Cause I don't like a gold rush, gold rush",
            "I don't like anticipatin' my face in a red flush",
            "I don't like that anyone would die to feel your touch",
            "Everybody wants you",
            "Everybody wonders what it would be like to love you",
            "Walk past, quick brush",
            "I don't like slow motion, double vision in rose blush",
            "I don't like that falling feels like flying 'til the bone crush",
            "Everybody wants you",
            "But I don't like a gold rush",
            "What must it be like to grow up that beautiful?",
            "With your hair falling into place like dominoes",
            "My mind turns your life into folklore",
            "I can't dare to dream about you anymore",
            "At dinner parties, I won't call you out on your contrarian shit",
            "And the coastal town we never found will never see a love as pure as it",
            "'Cause it fades into the gray of my day-old tea",
            "'Cause it will never be",
            "Gleaming, twinkling",
            "Eyes like sinking",
            "Ships on waters",
            "So inviting, I almost jump in"
          ]
        },
        {
          title: "'Tis The Damn Season",
          lines: [
            "If I wanted to know who you were hanging with",
            "While I was gone, I would've asked you",
            "It's the kind of cold, fogs up windshield glass",
            "But I felt it when I passed you",
            "There's an ache in you, put there by the ache in me",
            "But if it's all the same to you",
            "It's the same to me",
            "So we could call it even",
            'You could call me "babe" for the weekend',
            "'Tis the damn season, write this down",
            "I'm stayin' at my parents' house",
            "And the road not taken looks real good now",
            "And it always leads to you and my hometown",
            "I parked my car right between the Methodist",
            "And the school that used to be ours",
            "The holidays linger like bad perfume",
            "You can run, but only so far",
            "I escaped it too, remember how you watched me leave",
            "But if it's okay with you, it's okay with me",
            "We could call it even",
            'You could call me "babe" for the weekend',
            "'Tis the damn season, write this down",
            "I'm stayin' at my parents' house",
            "And the road not taken looks real good now",
            "Time flies, messy as the mud on your truck tires",
            "Now I'm missing your smile, hear me out",
            "We could just ride around",
            "And the road not taken looks real good now",
            "And it always leads to you and my hometown",
            "Sleep in half the day just for old times' sake",
            "I won't ask you to wait if you don't ask me to stay",
            "So I'll go back to L.A. and the so-called friends",
            "Who'll write books about me if I ever make it",
            "And wonder about the only soul",
            "Who can tell which smiles I'm fakin'",
            "And the heart I know I'm breakin' is my own",
            "To leave the warmest bed I've ever known",
            "We could call it even",
            "Even though I'm leaving",
            "And I'll be yours for the weekend",
            "'Tis the damn season",
            "We could call it even",
            'You could call me "babe" for the weekend',
            "'Tis the damn season, write this down",
            "I'm stayin' at my parents' house",
            "And the road not taken looks real good now",
            "Time flies, messy as the mud on your truck tires",
            "Now I'm missing your smile, hear me out",
            "We could just ride around",
            "And the road not taken looks real good now",
            "And it always leads to you and my hometown",
            "It always leads to you and my hometown"
          ]
        },
        {
          title: "Tolerate It",
          lines: [
            "I sit and watch you readin' with your head low",
            "I wake and watch you breathin' with your eyes closed",
            "I sit and watch you",
            "I notice everything you do or don't do",
            "You're so much older and wiser, and I",
            "I wait by the door like I'm just a kid",
            "Use my best colors for your portrait",
            "Lay the table with the fancy shit",
            "And watch you tolerate it",
            "If it's all in my head, tell me now",
            "Tell me I've got it wrong somehow",
            "I know my love should be celebrated",
            "But you tolerate it",
            "I greet you with a battle hero's welcome",
            "I take your indiscretions all in good fun",
            "I sit and listen",
            "I polish plates until they gleam and glisten",
            "You're so much older and wiser, and I",
            "I wait by the door like I'm just a kid",
            "Use my best colors for your portrait",
            "Lay the table with the fancy shit",
            "And watch you tolerate it",
            "If it's all in my head, tell me now",
            "Tell me I've got it wrong somehow",
            "I know my love should be celebrated",
            "But you tolerate it",
            "While you were out buildin' other worlds, where was I?",
            "Where's that man who'd throw blankets over my barbed wire?",
            "I made you my temple, my mural, my sky",
            "Now I'm beggin' for footnotes in the story of your life",
            "Drawin' hearts in the byline",
            "Always takin' up too much space or time",
            "You assume I'm fine, but what would you do if I (I)",
            "Break free and leave us in ruins?",
            "Took this dagger in me and removed it",
            "Gain the weight of you, then lose it",
            "Believe me, I could do it",
            "If it's all in my head, tell me now",
            "Tell me I've got it wrong somehow",
            "I know my love should be celebrated",
            "But you tolerate it",
            "I sit and watch you"
          ]
        },
        {
          title: "No Body, No Crime",
          lines: [
            "He did it",
            "He did it",
            "Este's a friend of mine",
            "We meet up every Tuesday night for dinner and a glass of wine",
            "Este's been losin' sleep",
            "Her husband's actin' different and it smells like infidelity",
            `She says, "That ain't my Merlot on his mouth`,
            `That ain't my jewelry on our joint account"`,
            "No, there ain't no doubt",
            "I think I'm gonna call him out",
            `She says, "I think he did it, but I just can't prove it"`,
            "I think he did it, but I just can't prove it",
            "I think he did it, but I just can't prove it",
            "No, no body, no crime",
            "But I ain't lettin' up until the day I die",
            "No, no",
            "I think he did it",
            "No, no",
            "He did it",
            "Este wasn't there Tuesday night at Olive-Garden",
            "At her job or anywhere",
            "He reports his missing wife",
            "And I noticed when I passed his house",
            "His truck has got some brand new tires",
            "And his mistress moved in",
            "Sleeps in Este's bed and everything",
            "No, there ain't no doubt",
            "Somebody's gotta catch him out 'cause",
            "I think he did it, but I just can't prove it (He did it)",
            "I think he did it, but I just can't prove it (He did it)",
            "I think he did it, but I just can't prove it",
            "No, no body, no crime",
            "But I ain't lettin' up until the day I die",
            "No, no",
            "I think he did it",
            "No, no",
            "He did it",
            "Good thing my daddy made me get a boating license when I was fifteen",
            "And I've cleaned enough houses to know how to cover up a scene",
            "Good thing Este's sister's gonna swear she was with me (She was with me, dude)",
            "Good thing his mistress took out a big life insurance policy",
            "They think she did it, but they just can't prove it",
            "They think she did it, but they just can't prove it",
            "She thinks I did it, but she just can't prove it",
            "No, no body, no crime",
            "I wasn't lettin' up until the day he",
            "No, no body, no crime",
            "I wasn't lettin' up until the day he",
            "No, no body, no crime",
            "I wasn't lettin' up until the day he died"
          ]
        },
        {
          title: "Happiness",
          lines: [
            "Honey, when I'm above the trees",
            "I see this for what it is",
            "But now I'm right down in it, all the years I've given",
            "Is just shit we're dividin' up",
            "Showed you all of my hiding spots",
            "I was dancing when the music stopped",
            "And in the disbelief, I can't face reinvention",
            "I haven't met the new me yet",
            "There'll be happiness after you",
            "But there was happiness because of you",
            "Both of these things can be true",
            "There is happiness",
            "Past the blood and bruise",
            "Past the curses and cries",
            "Beyond the terror in the nightfall",
            "Haunted by the look in my eyes",
            "That would've loved you for a lifetime",
            "Leave it all behind",
            "And there is happiness",
            "Tell me, when did your winning smile",
            "Begin to look like a smirk?",
            "When did all our lessons start to look like weapons",
            "Pointed at my deepest hurt?",
            "I hope she'll be a beautiful fool",
            "Who takes my spot next to you",
            "No, I didn't mean that",
            "Sorry, I can't see facts through all of my fury",
            "You haven't met the new me yet",
            "There'll be happiness after me",
            "But there was happiness because of me",
            "Both of these things, I believe",
            "There is happiness",
            "In our history, across our great divide",
            "There is a glorious sunrise",
            "Dappled with the flickers of light",
            "From the dress I wore at midnight, leave it all behind",
            "And there is happiness",
            "I can't make it go away by making you a villain",
            "I guess it's the price I paid for seven years in Heaven",
            "And I pulled your body into mine",
            "Every goddamn night, now I get fake niceties",
            "No one teaches you what to do",
            "When a good man hurts you",
            "And you know you hurt him too",
            "Honey, when I'm above the trees",
            "I see it for what it is",
            "But now my eyes leak acid rain on the pillow where you used to lay your head",
            "After giving you the best I had",
            "Tell me what to give after that",
            "All you want from me now is the green light of forgiveness",
            "You haven't met the new me yet",
            "And I think she'll give you that",
            "There'll be happiness after you",
            "But there was happiness because of you too",
            "Both of these things can be true",
            "There is happiness",
            "In our history, across our great divide",
            "There is a glorious sunrise",
            "Dappled with the flickers of light",
            "From the dress I wore at midnight, leave it all behind",
            "Oh, leave it all behind",
            "Leave it all behind",
            "And there is happiness"
          ]
        },
        {
          title: "Dorothea",
          lines: [
            "Hey, Dorothea, do you ever stop and think about me?",
            "When we were younger, down in the park",
            "Honey, makin' a lark of the misery",
            "You got shiny friends since you left town",
            "A tiny screen's the only place I see you now",
            "And I got nothin' but well wishes for ya",
            "Ooh",
            "This place is the same as it ever was",
            "Ooh",
            "But you won't like it that way",
            "It's never too late to come back to my side",
            "The stars in your eyes shined brighter in Tupelo",
            "And if you're ever tired of bein' known for who you know",
            "You know that you'll always know me",
            "Dorothea, uh-uh",
            "Dorothea, ah-ah",
            "Ooh",
            "You're a queen sellin' dreams, sellin' makeup and magazines",
            "Ooh",
            "From you, I'd buy anything",
            "Hey, Dorothea, do you ever stop and think about me?",
            "When it was calmer, skippin' the prom",
            "Just to piss off your mom and her pageant schemes",
            "And damn, Dorothea, they all wanna be ya",
            "But are you still the same soul I met under the bleachers? Well",
            "Ooh",
            "I guess I'll never know",
            "Ooh",
            "And you'll go on with the show",
            "But it's never too late to come back to my side",
            "The stars in your eyes shined brighter in Tupelo",
            "And if you're ever tired of bein' known for who you know",
            "You know, you'll always know me",
            "Dorothea, uh-uh",
            "Dorothea, ah-ah",
            "Ooh, ooh",
            "Ooh-woo-ooh-ooh-ooh, ooh-ooh-ooh-ooh",
            "Ooh, ooh",
            "Ooh-woo-ooh-ooh-ooh, ooh-ooh-ooh",
            "Dorothea (Ah-ah-ah)",
            "Ah-ah",
            "Ooh"
          ]
        },
        {
          title: "Coney Island",
          lines: [
            "Break my soul in two looking for you",
            "But you're right here",
            "If I can't relate to you anymore",
            "Then who am I related to?",
            "And if this is the long haul",
            "How'd we get here so soon?",
            "Did I close my fist around something delicate?",
            "Did I shatter you?",
            "And I'm sitting on a bench in Coney-Island",
            "Wondering, where did my baby go?",
            "The fast times, the bright lights, the merry go",
            "Sorry for not making you my centerfold",
            "Over and over",
            "Lost again with no surprises",
            "Disappointments, close your eyes",
            "And it gets colder and colder",
            "When the sun goes down",
            "The question pounds my head",
            "What's a lifetime of achievement",
            "If I pushed you to the edge",
            "But you were too polite to leave me?",
            "And do you miss the rogue",
            "Who coaxed you into paradise and left you there?",
            "Will you forgive my soul",
            "When you're too wise to trust me and too old to care?",
            "'Cause we were like the mall before the internet",
            "It was the one place to be",
            "The mischief, the gift-wrapped suburban dreams",
            "Sorry for not winning you an arcade ring",
            "Over and over",
            "Lost again with no surprises",
            "Disappointments, close your eyes",
            "And it gets colder and colder",
            "When the sun goes down",
            "Were you waiting at our old spot",
            "In the tree line by the gold clock",
            "Did I leave you hanging every single day?",
            "Were you standing in the hallway",
            "With a big cake, happy birthday",
            "Did I paint your bluest skies the darkest grey?",
            "A universe away",
            "And when I got into the accident",
            "The sight that flashed before me was your face",
            "But when I walked up to the podium",
            "I think that I forgot to say your name",
            "I'm on a bench in Coney-Island",
            "Wondering, where did my baby go?",
            "The fast times, the bright lights, the merry go",
            "Sorry for not making you my centerfold",
            "Over and over",
            "Lost again with no surprises",
            "Disappointments, close your eyes",
            "And it gets colder and colder",
            "When the sun goes down",
            "When the sun goes down",
            "The sight that flashed before me was your face",
            "When the sun goes down",
            "But I think that I forgot to say your name",
            "Over and over",
            "Sorry for not making you my, making you my",
            "Making you my centerfold"
          ]
        },
        {
          title: "Ivy",
          lines: [
            "How's one to know?",
            "I'd meet you where the spirit meets the bones",
            "In a faith-forgotten land",
            "In from the snow",
            "Your touch brought forth an incandescent glow",
            "Tarnished but so grand",
            "And the old widow goes to the stone every day",
            "But I don't, I just sit here and wait",
            "Grieving for the living",
            "Oh, goddamn",
            "My pain fits in the palm of your freezing hand",
            "Taking mine, but it's been promised to another",
            "Oh, I can't",
            "Stop you putting roots in my dreamland",
            "My house of stone, your ivy grows",
            "And now I'm covered in you",
            "I wish to know",
            "The fatal flaw that makes you long to be",
            "Magnificently cursed",
            "He's in the room",
            "Your opal eyes are all I wish to see",
            "He wants what's only yours",
            "Oh, goddamn",
            "My pain fits in the palm of your freezing hand",
            "Taking mine, but it's been promised to another",
            "Oh, I can't",
            "Stop you putting roots in my dreamland",
            "My house of stone, your ivy grows",
            "And now I'm covered",
            "Clover blooms in the fields",
            "Spring breaks loose, the time is near",
            "What would he do if he found us out?",
            "Crescent moon, coast is clear",
            "Spring breaks loose, but so does fear",
            "He's gonna burn this house to the ground",
            "How's one to know?",
            "I'd live and die for moments that we stole",
            "On begged and borrowed time",
            "So tell me to run",
            "Or dare to sit and watch what we'll become",
            "And drink my husband's wine",
            "Oh, goddamn",
            "My pain fits in the palm of your freezing hand",
            "Taking mine, but it's been promised to another",
            "Oh, I can't",
            "Stop you putting roots in my dreamland",
            "My house of stone, your ivy grows",
            "And now I'm covered in you",
            "And I'm covered in you",
            "So yeah, it's a fire",
            "It's a goddamn blaze in the dark",
            "And you started it",
            "You started it",
            "So yeah, it's a war",
            "It's the goddamn fight of my life",
            "And you started it",
            "You started it",
            "Oh, I can't",
            "Stop you putting roots in my dreamland",
            "My house of stone, your ivy grows",
            "And now I'm covered",
            "In you, in you",
            "Now I'm covered in you",
            "In you"
          ]
        },
        {
          title: "Cowboy Like Me",
          lines: [
            "And the tennis court was covered up",
            "With some tent-like thing",
            "And you asked me to dance",
            `But I said, "Dancin' is a dangerous game"`,
            "Oh, I thought",
            "This is gonna be one of those things",
            "Now I know",
            "I'm never gonna love again",
            "I've got some tricks up my sleeve",
            "Takes one to know one",
            "You're a cowboy like me",
            "Never wanted love",
            "Just a fancy car",
            "Now I'm waiting by the phone",
            "Like I'm sitting in an airport bar",
            "You had some tricks up your sleeve",
            "Takes one to know one",
            "You're a cowboy like me",
            "Perched in the dark",
            "Tellin' all the rich folks anything they wanna hear",
            "Like it could be love",
            "I could be the way forward",
            "Only if they pay for it",
            "You're a bandit like me",
            "Eyes full of stars",
            "Hustling for the good life, never thought I'd meet you here",
            "It could be love",
            "We could be the way forward",
            "And I know I'll pay for it",
            "You're a cowboy like me",
            "Perched in the dark",
            "Tellin' all the rich folks anything they wanna hear",
            "Like it could be love",
            "I could be the way forward",
            "Only if they pay for it",
            "You're a bandit like me",
            "Eyes full of stars",
            "Hustlin' for the good life, never thought I'd meet you here",
            "It could be love",
            "We could be the way forward",
            "And I know I'll pay for it",
            "And the skeletons in both our closets",
            "Plotted hard to fuck this up",
            "And the old men that I've swindled",
            "Really did believe I was the one",
            "And the ladies lunchin' have their stories about",
            "When you passed through town",
            "Oh, but that was all before I locked it down",
            "Now you hang from my lips",
            "Like the Gardens-of-Babylon",
            "With your boots beneath my bed",
            "Forever is the sweetest con",
            "I've had some tricks up my sleeve",
            "Takes one to know one",
            "You're a cowboy like me",
            "And I'm never gonna love again",
            "I'm never gonna love again",
            "I'm never gonna love again"
          ]
        },
        {
          title: "Long Story Short",
          lines: [
            "Fatefully",
            "I tried to pick my battles 'til the battle picked me",
            "Misery",
            "Like the war of words I shouted in my sleep",
            "And you passed right by",
            "I was in the alley, surrounded on all sides",
            "The knife cuts both ways",
            "If the shoe fits, walk in it 'til your high heels break",
            "And I fell from the pedestal",
            "Right down the rabbit hole",
            "Long story short, it was a bad time",
            "Pushed from the precipice",
            "Clung to the nearest lips",
            "Long story short, it was the wrong guy",
            "Now I'm all about you",
            "I'm all about you, ah",
            "Yeah, yeah",
            "I'm all about you, ah",
            "Yeah, yeah",
            "Actually",
            "I always felt I must look better in the rear view",
            "Missing me",
            "At the golden gates they once held the keys to",
            "When I dropped my sword",
            "I threw it in the bushes and knocked on your door",
            "And we live in peace",
            "But if someone comes at us, this time, I'm ready",
            "'Cause I fell from the pedestal",
            "Right down the rabbit hole",
            "Long story short, it was a bad time",
            "Pushed from the precipice",
            "Clung to the nearest lips",
            "Long story short, it was the wrong guy",
            "Now I'm all about you",
            "I'm all about you, ah",
            "Yeah, yeah",
            "I'm all about you",
            "No more keepin' score",
            "Now I just keep you warm (Keep you warm)",
            "No more tug of war",
            "Now I just know there's more (Know there's more)",
            "No more keepin' score",
            "Now I just keep you warm (Keep you warm)",
            "And my waves meet your shore",
            "Ever and evermore",
            "Past me",
            "I wanna tell you not to get lost in these petty things",
            "Your nemeses",
            "Will defeat themselves before you get the chance to swing",
            "And he's passing by",
            "Rare as the glimmer of a comet in the sky",
            "And he feels like home",
            "If the shoe fits, walk in it everywhere you go",
            "And I fell from the pedestal",
            "Right down the rabbit hole",
            "Long story short, it was a bad time",
            "Pushed from the precipice",
            "Climbed right back up the cliff",
            "Long story short, I survived",
            "Now I'm all about you",
            "(And now) I'm all about you, ah",
            "(And now) I'm all about you",
            "(And now) I'm all about you, ah",
            "Yeah, yeah",
            "I'm all about you",
            "(And now) Yeah, yeah",
            "I'm all about you",
            "Long story short, it was a bad time",
            "Long story short, I survived"
          ]
        },
        {
          title: "Marjorie",
          lines: [
            "Never be so kind",
            "You forget to be clever",
            "Never be so clever",
            "You forget to be kind",
            "And if I didn't know better",
            "I'd think you were talking to me now",
            "If I didn't know better",
            "I'd think you were still around",
            "What died didn't stay dead",
            "What died didn't stay dead",
            "You're alive, you're alive in my head",
            "What died didn't stay dead",
            "What died didn't stay dead",
            "You're alive, so alive",
            "Never be so polite",
            "You forget your power",
            "Never wield such power",
            "You forget to be polite",
            "And if I didn't know better",
            "I'd think you were listening to me now",
            "If I didn't know better",
            "I'd think you were still around",
            "What died didn't stay dead",
            "What died didn't stay dead",
            "You're alive, you're alive in my head",
            "What died didn't stay dead",
            "What died didn't stay dead",
            "You're alive, so alive",
            "The autumn chill that wakes me up",
            "You loved the amber skies so much",
            "Long limbs and frozen swims",
            "You'd always go past where our feet could touch",
            "And I complained the whole way there",
            "The car ride back and up the stairs",
            "I should've asked you questions",
            "I should've asked you how to be",
            "Asked you to write it down for me",
            "Should've kept every grocery store receipt",
            "'Cause every scrap of you would be taken from me",
            "Watched as you signed your name Marjorie",
            "All your closets of backlogged dreams",
            "And how you left them all to me",
            "What died didn't stay dead",
            "What died didn't stay dead",
            "You're alive, you're alive in my head",
            "What died didn't stay dead",
            "What died didn't stay dead",
            "You're alive, so alive",
            "And if I didn't know better",
            "I'd think you were singing to me now",
            "If I didn't know better",
            "I'd think you were still around",
            "I know better",
            "But I still feel you all around",
            "I know better",
            "But you're still around"
          ]
        },
        {
          title: "Closure",
          lines: [
            "It's been a long time",
            "And seeing the shape of your name",
            "Still spells out pain",
            "It wasn't right",
            "The way it all went down",
            "Looks like you know that now",
            "Yes, I got your letter",
            "Yes, I'm doing better",
            "It cut deep to know ya, right to the bone",
            "Yes, I got your letter",
            "Yes, I'm doing better",
            "I know that it's over, I don't need your",
            "Closure, your closure",
            "Don't treat me like",
            "Some situation that needs to be handled",
            "I'm fine with my spite",
            "And my tears and my beers and my candles",
            "I can feel you smoothing me over",
            "Yes, I got your letter",
            "Yes, I'm doing better",
            "It cut deep to know ya, right to the bone",
            "Yes, I got your letter",
            "Yes, I'm doing better",
            "I know that it's over, I don't need your",
            "Closure, your closure",
            "Your closure, your closure",
            "I know I'm just a wrinkle in your new life",
            "Staying friends would iron it out so nice",
            "Guilty, guilty, reaching out across the sea",
            "That you put between you and me",
            "But it's fake and it's oh-so unnecessary",
            "Yes, I got your letter",
            "Yes, I'm doing better",
            "It cut deep to know ya, right to the bone",
            "Yes, I got your letter",
            "Yes, I'm doing better",
            "I know that it's over, I don't need your",
            "Closure, closure, your closure",
            "Your closure"
          ]
        },
        {
          title: "Evermore",
          lines: [
            "Gray November",
            "I've been down since July",
            "Motion capture",
            "Put me in a bad light",
            "I replay my footsteps on each stepping stone",
            "Trying to find the one where I went wrong",
            "Writing letters",
            "Addressed to the fire",
            "And I was catchin' my breath",
            "Starin' out an open window, catchin' my death",
            "And I couldn't be sure",
            "I had a feeling so peculiar",
            "That this pain would be for",
            "Evermore",
            "Hey, December",
            "Guess I'm feeling unmoored",
            "Can't remember",
            "What I used to fight for",
            "I rewind the tape, but all it does is pause",
            "On the very moment all was lost",
            "Sending signals",
            "To be double-crossed",
            "And I was catchin' my breath",
            "Barefoot in the wildest winter, catchin' my death",
            "And I couldn't be sure",
            "I had a feeling so peculiar",
            "That this pain would be for",
            "Evermore",
            "(Evermore)",
            "Can't not think of all the cost",
            "And the things that will be lost",
            "Oh, can we just get a pause?",
            "To be certain we'll be tall again",
            "Whether weather be the frost",
            "Or the violence of the dog days",
            "I'm on waves, out being tossed",
            "Is there a line that I could just go cross?",
            "And when I was shipwrecked (Can't think of all the cost now)",
            "I thought of you (All the things that will be lost now)",
            "In the cracks of light (Can we just get a pause?)",
            "I dreamed of you (To be certain we'll be tall again)",
            "(If you think of all the cost)",
            "It was real enough (Whether weather be the frost)",
            "To get me through (Or the violence of the dog days)",
            "(Or the violence of the dog days)",
            "(Out on waves, being tossed)",
            "(I'm on waves, out being tossed)",
            "But I swear (Is there a line that we can just go cross?)",
            "You were there",
            "And I was catchin' my breath",
            "Floors of a cabin creakin' under my step",
            "And I couldn't be sure",
            "I had a feeling so peculiar",
            "This pain wouldn't be for",
            "Evermore",
            "Evermore (Evermore)",
            "Evermore (Evermore)",
            "This pain wouldn't be for evermore",
            "Evermore"
          ]
        },
        {
          title: "Right Where You Left Me",
          lines: [
            "Friends break up, friends get married",
            "Strangers get born, strangers get buried",
            "Trends change, rumors fly through new skies",
            "But I'm right where you left me",
            "Matches burn after the other",
            "Pages turn and stick to each other",
            "Wages earned and lessons learned",
            "But I, I'm right where you left me",
            "Help, I'm still at the restaurant",
            "Still sitting in a corner I haunt",
            "Cross-legged in the dim light",
            'They say, "What a sad sight," I',
            "I swear you could hear a hair pin drop",
            "Right when I felt the moment stop",
            "Glass shattered on the white cloth",
            "Everybody moved on, I, I stayed there",
            "Dust collected on my pinned-up hair",
            "They expected me to find somewhere",
            "Some perspective, but I sat and stared right where",
            "You left me, you left me no, oh, you left me no",
            "You left me no choice but to stay here forever",
            "You left me, you left me no, oh, you left me no",
            "You left me no choice but to stay here forever",
            "Did you ever hear about the girl who got frozen?",
            "Time went on for everybody else, she won't know it",
            "She's still twenty-three inside her fantasy",
            "How it was supposed to be",
            "Did you hear about the girl who lives in delusion?",
            "Breakups happen every day, you don't have to lose it",
            "She's still twenty-three inside her fantasy",
            "And you're sitting in front of me",
            "At the restaurant",
            "When I was still the one you want",
            "Cross-legged in the dim light",
            "Everything was just right, I",
            "I could feel the mascara run",
            "You told me that you met someone",
            "Glass shattered on the white cloth",
            "Everybody moved on",
            "Help, I'm still at the restaurant",
            "Still sitting in a corner I haunt",
            "Cross-legged in the dim light",
            'They say, "What a sad sight," I, I stayed there',
            "Dust collected on my pinned-up hair",
            "I'm sure that you got a wife out there",
            "Kids and Christmas, but I'm unaware 'cause I'm right where",
            "I cause no harm, mind my business",
            "If our love died young, I can't bear witness, and it's been so long",
            "If you ever think you got it wrong, I'm right where",
            "You left me, you left me no, oh, you left me no",
            "You left me no choice but to stay here forever",
            "You left me, you left me no, oh, you left me no",
            "You left me no choice but to stay here forever"
          ]
        },
        {
          title: "It's Time To Go",
          lines: [
            "When the dinner is cold and the chatter gets old",
            "You ask for the tab",
            "Or that moment again, he's insisting that friends",
            "Look at each other like that",
            "When the words of a sister come back in whispers",
            "That prove she was not",
            "In fact what she seemed, not a twin from your dreams",
            "She's a crook who was caught",
            "That old familiar body ache",
            "The snaps from the same little breaks in your soul",
            "You know when it's time to go",
            "Twenty years at your job, then the son of the boss",
            "Gets the spot that was yours",
            "Or trying to stay for the kids, when keeping it how it is",
            "Will only break their hearts worse",
            "That old familiar body ache",
            "The snaps from the same little breaks in your soul",
            "You know when it's time to go",
            "Sometimes, givin' up is the strong thing",
            "Sometimes, to run is the brave thing",
            "Sometimes, walkin' out is the one thing",
            "That will find you the right thing",
            "Sometimes, givin' up is the strong thing",
            "Sometimes, to run is the brave thing",
            "Sometimes, walkin' out is the one thing",
            "That will find you the right thing",
            "Fifteen years, fifteen million tears",
            "Begging 'til my knees bled",
            "I gave it my all, he gave me nothin' at all",
            "Then wondered why I left",
            "Now he sits on his throne in his palace of bones",
            "Praying to his greed",
            "He's got my past frozen behind glass",
            "But I've got me",
            "That old familiar body ache",
            "The snaps from the same little breaks in my soul",
            "I know when it's time to go",
            "Sometimes, givin' up is the strong thing",
            "Sometimes, to run is the brave thing",
            "Sometimes, walkin' out is the one thing",
            "That will find you the right thing",
            "Sometimes, givin' up is the strong thing",
            "Sometimes, to run is the brave thing",
            "Sometimes, walkin' out is the one thing",
            "That will find you the right thing",
            "That will find you the right thing",
            "And you know in your soul",
            "And you know in your soul",
            "When it's time to go",
            "And, well, you know, you know, you know, you know",
            "When it's time to go",
            "So then you go and then you go",
            "You just go"
          ]
        }
      ]
    },
    {
      title: "Midnights",
      songs: [
        {
          title: "Lavender Haze",
          lines: [
            "Meet me at midnight",
            "Staring at the ceiling with you",
            "Oh, you don't ever say too much",
            "And you don't really read into",
            "My melancholia",
            "I been under scrutiny (Yeah, oh, yeah)",
            "You handle it beautifully (Yeah, oh, yeah)",
            "All this shit is new to me (Yeah, oh, yeah)",
            "I feel",
            "The lavender haze creeping up on me",
            "Surreal",
            "I'm damned if I do give a damn what people say",
            "No deal",
            "The 1950s shit they want from me",
            "I just wanna stay in that lavender haze",
            "All they keep asking me (All they keep asking me)",
            "Is if I'm gonna be your bride",
            "The only kinda girl they see (Only kinda girl they see)",
            "Is a one-night or a wife",
            "I find it dizzying (Yeah, oh, yeah)",
            "They're bringing up my history (Yeah, oh, yeah)",
            "But you weren't even listening (Yeah, oh, yeah)",
            "I feel",
            "The lavender haze creepin' up on me",
            "Surreal",
            "I'm damned if I do give a damn what people say",
            "No deal",
            "The 1950s shit they want from me",
            "I just wanna stay in that lavender haze",
            "That lavender haze",
            "Talk your talk and go viral",
            "I just need this love spiral",
            "Get it off your chest",
            "Get it off my desk (Get it off my desk)",
            "Talk your talk and go viral",
            "I just need this love spiral",
            "Get it off your chest",
            "Get it off my desk",
            "I feel (I feel)",
            "The lavender haze creeping up on me",
            "Surreal",
            "I'm damned if I do give a damn what people say",
            "No deal (No deal)",
            "The 1950s shit they want from me",
            "I just wanna stay in that lavender haze",
            "Get it off your chest",
            "Get it off my desk",
            "That lavender haze",
            "I just wanna stay",
            "I just wanna stay in that lavender haze"
          ]
        },
        {
          title: "Maroon",
          lines: [
            "When the morning came",
            "We were cleaning incense off your vinyl shelf",
            "'Cause we lost track of time again",
            "Laughing with my feet in your lap",
            "Like you were my closest friend",
            `"How'd we end up on the floor, anyway?" you say`,
            `"Your roommate's cheap-ass screw-top ros\xE9, that's how"`,
            "I see you every day now",
            "And I chose you",
            "The one I was dancing with",
            "In New-York, no shoes",
            "Looked up at the sky and it was",
            "The burgundy on my t-shirt",
            "When you splashed your wine into me",
            "And how the blood rushed into my cheeks",
            "So scarlet, it was",
            "The mark they saw on my collarbone",
            "The rust that grew between telephones",
            "The lips I used to call home",
            "So scarlet, it was maroon",
            "When the silence came",
            "We were shaking, blind and hazy",
            "How the hell did we lose sight of us again?",
            "Sobbing with your head in your hands",
            "Ain't that the way shit always ends?",
            "You were standing hollow-eyed in the hallway",
            "Carnations you had thought were roses, that's us",
            "I feel you, no matter what",
            "The rubies that I gave up",
            "And I lost you",
            "The one I was dancing with",
            "In New-York, no shoes",
            "Looked up at the sky and it was (Maroon)",
            "The burgundy on my t-shirt",
            "When you splashed your wine into me",
            "And how the blood rushed into my cheeks",
            "So scarlet, it was (Maroon)",
            "The mark they saw on my collarbone",
            "The rust that grew between telephones",
            "The lips I used to call home",
            "So scarlet, it was maroon",
            "And I wake with your memory over me",
            "That's a real fucking legacy, legacy (It was maroon)",
            "And I wake with your memory over me",
            "That's a real fucking legacy to leave",
            "The burgundy on my t-shirt",
            "When you splashed your wine into me",
            "And how the blood rushed into my cheeks",
            "So scarlet, it was maroon",
            "The mark they saw on my collarbone",
            "The rust that grew between telephones",
            "The lips I used to call home",
            "So scarlet, it was maroon",
            "It was maroon",
            "It was maroon"
          ]
        },
        {
          title: "Anti-Hero",
          lines: [
            "I have this thing where I get older, but just never wiser",
            "Midnights become my afternoons",
            "When my depression works the graveyard shift, all of the people",
            "I've ghosted stand there in the room",
            "I should not be left to my own devices",
            "They come with prices and vices",
            "I end up in crisis",
            "(Tale as old as time)",
            "I wake up screaming from dreaming",
            "One day, I'll watch as you're leaving",
            "'Cause you got tired of my scheming",
            "(For the last time)",
            "It's me, hi",
            "I'm the problem, it's me",
            "At teatime, everybody agrees",
            "I'll stare directly at the sun, but never in the mirror",
            "It must be exhausting always rooting for the anti-hero",
            "Sometimes, I feel like everybody is a sexy baby",
            "And I'm a monster on the hill",
            "Too big to hang out, slowly lurching toward your favorite city",
            "Pierced through the heart, but never killed",
            "Did you hear my covert narcissism I disguise as altruism",
            "Like some kind of congressman?",
            "(A tale as old as time)",
            "I wake up screaming from dreaming",
            "One day, I'll watch as you're leaving",
            "And life will lose all its meaning",
            "(For the last time)",
            "It's me, hi",
            "I'm the problem, it's me (I'm the problem, it's me)",
            "At teatime, everybody agrees",
            "I'll stare directly at the sun, but never in the mirror",
            "It must be exhausting always rooting for the anti-hero",
            "I have this dream my daughter-in-law kills me for the money",
            "She thinks I left them in the will",
            "The family gathers 'round and reads it and then someone screams out",
            `"She's laughing up at us from Hell"`,
            "It's me, hi",
            "I'm the problem, it's me",
            "It's me, hi",
            "I'm the problem, it's me",
            "It's me, hi",
            "Everybody agrees, everybody agrees",
            "It's me, hi (Hi)",
            "I'm the problem, it's me (I'm the problem, it's me)",
            "At teatime (Teatime), everybody agrees (Everybody agrees)",
            "I'll stare directly at the sun, but never in the mirror",
            "It must be exhausting always rooting for the anti-hero"
          ]
        },
        {
          title: "You're On Your Own, Kid",
          lines: [
            "Summer went away, still, the yearning stays",
            "I play it cool with the best of them",
            "I wait patiently, he's gonna notice me",
            "It's okay, we're the best of friends",
            "Anyway",
            "I hear it in your voice, you're smoking with your boys",
            "I touch my phone as if it's your face",
            "I didn't choose this town, I dream of getting out",
            "There's just one who could make me stay",
            "All my days",
            "From sprinkler splashes to fireplace ashes",
            "I waited ages to see you there",
            "I search the party of better bodies",
            "Just to learn that you never cared",
            "You're on your own, kid",
            "You always have been",
            "I see the great escape, so long, Daisy-May",
            "I picked the petals, he loves me not",
            "Something different bloomed, writing in my room",
            "I play my songs in the parking lot",
            "I'll run away",
            "From sprinkler splashes to fireplace ashes",
            "I called a taxi to take me there",
            "I search the party of better bodies",
            "Just to learn that my dreams aren't rare",
            "You're on your own, kid",
            "You always have been",
            "From sprinkler splashes to fireplace ashes",
            "I gave my blood, sweat, and tears for this",
            "I hosted parties and starved my body",
            "Like I'd be saved by a perfect kiss",
            "The jokes weren't funny, I took the money",
            "My friends from home don't know what to say",
            "I looked around in a blood-soaked gown",
            "And I saw something they can't take away",
            "'Cause there were pages turned with the bridges burned",
            "Everything you lose is a step you take",
            "So, make the friendship bracelets, take the moment and taste it",
            "You've got no reason to be afraid",
            "You're on your own, kid",
            "Yeah, you can face this",
            "You're on your own, kid",
            "You always have been"
          ]
        },
        {
          title: "Midnight Rain",
          lines: [
            "Rain",
            "He wanted it comfortable, I wanted that pain",
            "He wanted a bride, I was making my own name",
            "Chasing that fame, he stayed the same",
            "All of me changed like midnight",
            "My town was a wasteland",
            "Full of cages, full of fences",
            "Pageant queens and big pretenders",
            "But for some, it was paradise",
            "My boy was a montage",
            "A slow-motion, love potion",
            "Jumping off things in the ocean",
            "I broke his heart 'cause he was nice",
            "He was sunshine, I was midnight rain",
            "He wanted it comfortable, I wanted that pain",
            "He wanted a bride, I was making my own name",
            "Chasing that fame, he stayed the same",
            "All of me changed like midnight",
            "It came like a postcard",
            "Picture perfect shiny family",
            "Holiday peppermint candy",
            "But for him, it's every day",
            "So I peered through a window",
            "A deep portal, time travel",
            "All the love we unravel",
            "And the life I gave away",
            "'Cause he was sunshine, I was midnight rain",
            "He wanted it comfortable, I wanted that pain",
            "He wanted a bride, I was making my own name",
            "Chasing that fame, he stayed the same",
            "All of me changed like midnight rain",
            "He wanted it comfortable, I wanted that pain",
            "He wanted a bride, I was making my own name",
            "Chasing that fame, he stayed the same",
            "All of me changed like midnight",
            "I guess sometimes we all get",
            "Just what we wanted, just what we wanted",
            "And he never thinks of me",
            "Except for when I'm on TV",
            "I guess sometimes we all get",
            "Some kind of haunted, some kind of haunted",
            "And I never think of him",
            "Except on midnights like this",
            "(Midnights like this, midnights like this)"
          ]
        },
        {
          title: "Question...?",
          lines: [
            "I remember",
            "Good girl, sad boy",
            "Big city, wrong choices",
            "We had one thing goin' on",
            "I swear that it was somethin'",
            "'Cause I don't remember who I was",
            "Before you painted all my nights",
            "A color I've searched for since",
            "But one thing after another",
            "Fuckin' situations, circumstances",
            "Miscommunications, and I",
            "Have to say, by the way",
            "I just may like some explanations",
            "Can I ask you a question?",
            "Did you ever have someone kiss you in a crowded room",
            "And every single one of your friends was makin' fun of you",
            "But fifteen seconds later, they were clappin' too?",
            "Then what did you do?",
            "Did you leave her house in the middle of the night? Oh",
            "Did you wish you'd put up more of a fight, oh",
            "When she said it was too much?",
            "Do you wish you could still touch her?",
            "It's just a question",
            "Half-moon eyes, bad surprise",
            "Did you realize out of time?",
            "She was on your mind with some dickhead guy",
            "That you saw that night",
            "But you were on somethin'",
            "It was one drink after another",
            "Fuckin' politics and gender roles",
            "And you're not sure and I don't know",
            "Got swept away in the gray",
            "I just may like to have a conversation",
            "Can I ask you a question?",
            "Did you ever have someone kiss you in a crowded room",
            "And every single one of your friends was makin' fun of you",
            "But fifteen seconds later, they were clappin' too?",
            "Then what did you do?",
            "Did you leave her house in the middle of the night? Oh",
            "Did you wish you'd put up more of a fight, oh",
            "When she said it was too much?",
            "Do you wish you could still touch her?",
            "It's just a question",
            "Does it feel like everything's just like",
            "Second best after that meteor strike?",
            "And what's that that I heard? That you're still with her?",
            "That's nice, I'm sure that's what's suitable",
            "And right, but tonight",
            "Can I ask you a question? (Can I ask you a question?)",
            "Did you ever have someone kiss you in a crowded room (In a crowded room)",
            "And every single one of your friends was makin' fun of you (Makin' fun of you)",
            "But fifteen seconds later, they were clappin' too?",
            "Then what did you do? (Do)",
            "Did you leave her house in the middle of the night? Oh",
            "Did you wish you'd put up more of a fight, oh (More of a fight)",
            "When she said it was too much?",
            "Do you wish you could still touch her?",
            "It's just a question"
          ]
        },
        {
          title: "Vigilante Shit",
          lines: [
            "Draw the cat eye sharp enough to kill a man",
            "You did some bad things, but I'm the worst of them",
            "Sometimes I wonder which one'll be your last lie",
            "They say looks can kill and I might try",
            "I don't dress for women",
            "I don't dress for men",
            "Lately, I've been dressin' for revenge",
            "I don't start shit, but I can tell you how it ends",
            "Don't get sad, get even",
            "So on the weekends",
            "I don't dress for friends",
            "Lately, I've been dressin' for revenge",
            "She needed cold, hard proof, so I gave her some",
            "She had the envelope, where you think she got it from?",
            "Now she gets the house, gets the kids, gets the pride",
            "Picture me thick as thieves with your ex-wife",
            "And she looks so pretty",
            "Drivin' in your Benz",
            "Lately, she's been dressin' for revenge",
            "She don't start shit, but she can tell you how it ends",
            "Don't get sad, get even",
            "So on the weekends",
            "She don't dress for friends",
            "Lately, she's been dressing for revenge",
            "Ladies always rise above",
            "Ladies know what people want",
            "Someone sweet and kind and fun",
            "The lady simply had enough",
            "While he was doin' lines and crossin' all of mine",
            "Someone told his white-collar crimes to the FBI",
            "And I don't dress for villains",
            "Or for innocents",
            "I'm on my vigilante shit again",
            "I don't start shit, but I can tell you how it ends",
            "Don't get sad, get even",
            "So on the weekends",
            "I don't dress for friends",
            "Lately, I've been dressin' for revenge"
          ]
        },
        {
          title: "Bejeweled",
          lines: [
            "Baby love, I think I've been a little too kind",
            "Didn't notice you walkin' all over my peace of mind",
            "In the shoes I gave you as a present",
            "Puttin' someone first only works when you're in their top five",
            "And by the way, I'm goin' out tonight",
            "Best believe I'm still bejeweled",
            "When I walk in the room",
            "I can still make the whole place shimmer",
            "And when I meet the band",
            'They ask, "Do you have a man?"',
            `I could still say, "I don't remember"`,
            "Familiarity breeds contempt",
            "Don't put me in the basement",
            "When I want the penthouse of your heart",
            "Diamonds in my eyes",
            "I polish up real, I polish up real nice",
            "Nice",
            "Baby boy, I think I've been too good of a girl (Too good of a girl)",
            "Did all the extra credit, then got graded on a curve",
            "I think it's time to teach some lessons",
            "I made you my world (Huh), have you heard? (Huh)",
            "I can reclaim the land",
            "And I miss you (Miss you), but I miss sparklin' (Nice)",
            "Best believe I'm still bejeweled",
            "When I walk in the room",
            "I can still make the whole place shimmer",
            "And when I meet the band",
            'They ask, "Do you have a man?"',
            `I could still say, "I don't remember"`,
            "Familiarity breeds contempt",
            "Don't put me in the basement",
            "When I want the penthouse of your heart",
            "Diamonds in my eyes",
            "I polish up real, I polish up real nice",
            "Nice",
            "Sapphire tears on my face",
            "Sadness became my whole sky",
            "But some guy said my aura's moonstone",
            "Just 'cause he was high",
            "And we're dancin' all night",
            "And you can try to change my mind",
            "But you might have to wait in line",
            "What's a girl gonna do?",
            "A diamond's gotta shine",
            "Best believe I'm still bejeweled",
            "When I walk in the room",
            "I can still make the whole place shimmer (Shimmer)",
            "And when I meet the band",
            'They ask, "Do you have a man?"',
            `I could still say, "I don't remember"`,
            "Familiarity breeds contempt",
            "Don't put me in the basement",
            "When I want the penthouse of your heart",
            "Diamonds in my eyes",
            "I polish up real (Nice), I polish up real nice",
            "And we're dancin' all night",
            "And you can try to change my mind",
            "But you might have to wait in line",
            "What's a girl gonna do? What's a girl gonna do?",
            "I polish up nice",
            "Best believe I'm still bejeweled",
            "When I walk in the room",
            "I can still make the whole place shimmer"
          ]
        },
        {
          title: "Labyrinth",
          lines: [
            '"It only hurts this much right now"',
            "Was what I was thinkin' the whole time",
            "Breathe in, breathe through, breathe deep, breathe out",
            "I'll be gettin' over you my whole life",
            "You know how scared I am of elevators",
            "Never trust it if it rises fast",
            "It can't last",
            "Uh-oh, I'm fallin' in love",
            "Oh no, I'm fallin' in love again",
            "Oh, I'm fallin' in love",
            "I thought the plane was goin' down",
            "How'd you turn it right around?",
            "It only feels this raw right now",
            "Lost in the labyrinth of my mind",
            "Break up, break free, break through, break down",
            "You would break your back to make me break a smile",
            "You know how much I hate",
            "That everybody just expects me to bounce back",
            "Just like that",
            "Uh-oh, I'm fallin' in love",
            "Oh no, I'm fallin' in love again",
            "Oh, I'm fallin' in love",
            "I thought the plane was goin' down",
            "How'd you turn it right around?",
            "Uh-oh, I'm fallin' in love",
            "Oh no, I'm fallin' in love again",
            "Oh, I'm fallin' in love",
            "I thought the plane was goin' down",
            "How'd you turn it right around?",
            "Uh-oh, I'm fallin' in love",
            "Oh no, I'm fallin' in love again",
            "Oh, I'm fallin' in love",
            "I thought the plane was goin' down",
            "How'd you turn it right around?",
            "Uh-oh, I'm fallin' in love",
            "Oh no, I'm fallin' in love again",
            "Oh, I'm fallin' in love",
            "I thought the plane was goin' down",
            "How'd you turn it right around?"
          ]
        },
        {
          title: "Karma",
          lines: [
            "You're talking shit for the hell of it",
            "Addicted to betrayal, but you're relevant",
            "You're terrified to look down",
            "'Cause if you dare, you'll see the glare",
            "Of everyone you burned just to get there",
            "It's coming back around",
            "And I keep my side of the street clean",
            "You wouldn't know what I mean",
            "'Cause karma is my boyfriend",
            "Karma is a god",
            "Karma is the breeze in my hair on the weekend",
            "Karma's a relaxing thought",
            "Aren't you envious that for you it's not?",
            "Sweet like honey, karma is a cat",
            "Purring in my lap 'cause it loves me",
            "Flexing like a goddamn acrobat",
            "Me and karma vibe like that",
            "Spiderboy, king of thieves",
            "Weave your little webs of opacity",
            "My pennies made your crown",
            "Trick me once, trick me twice",
            "Don't you know that cash ain't the only price?",
            "It's coming back around",
            "And I keep my side of the street clean",
            "You wouldn't know what I mean",
            "'Cause karma is my boyfriend",
            "Karma is a god",
            "Karma is the breeze in my hair on the weekend",
            "Karma's a relaxing thought",
            "Aren't you envious that for you it's not?",
            "Sweet like honey, karma is a cat",
            "Purring in my lap 'cause it loves me",
            "Flexing like a goddamn acrobat",
            "Me and karma vibe like that",
            "Ask me what I learned from all those years",
            "Ask me what I earned from all those tears",
            "Ask me why so many fade, but I'm still here",
            "(I'm still here, I'm still here)",
            "'Cause karma is the thunder",
            "Rattling your ground",
            "Karma's on your scent like a bounty hunter",
            "Karma's gonna track you down",
            "Step by step, from town to town",
            "Sweet like justice, karma is a queen",
            "Karma takes all my friends to the summit",
            "Karma is the guy on the screen",
            "Coming straight home to me",
            "'Cause karma is my boyfriend (Karma is my boyfriend)",
            "Karma is a god",
            "Karma is the breeze in my hair on the weekend (Weekend)",
            "Karma's a relaxing thought",
            "Aren't you envious that for you it's not?",
            "Sweet like honey, karma is a cat",
            "Purring in my lap 'cause it loves me",
            "Flexing like a goddamn acrobat",
            "Me and karma vibe like that",
            "Karma is my boyfriend",
            "Karma is a god (Ah)",
            "Uh-huh, mm",
            "Karma's a relaxing thought"
          ]
        },
        {
          title: "Sweet Nothing",
          lines: [
            "I spy with my little tired eye",
            "Tiny as a firefly",
            "A pebble that we picked up last July",
            "Down deep inside your pocket",
            "We almost forgot it",
            "Does it ever miss Wicklow sometimes?",
            "Ooh, ooh",
            "They said the end is comin'",
            "Everyone's up to somethin'",
            "I find myself runnin' home to your sweet nothings",
            "Outside, they're push and shovin'",
            "You're in the kitchen hummin'",
            "All that you ever wanted from me was sweet nothin'",
            "On the way home",
            "I wrote a poem",
            'You say, "What a mind"',
            "This happens all the time",
            "Ooh, ooh",
            "'Cause they said the end is comin'",
            "Everyone's up to somethin'",
            "I find myself runnin' home to your sweet nothings",
            "Outside, they're push and shovin'",
            "You're in the kitchen hummin'",
            "All that you ever wanted from me was nothin'",
            "Industry disruptors and soul deconstructors",
            "And smooth-talking hucksters out glad-handing each other",
            'And the voices that implore, "You should be doing more"',
            "To you, I can admit that I'm just too soft for all of it",
            "Ooh",
            "They said the end is comin'",
            "Everyone's up to somethin'",
            "I find myself runnin' home to your sweet nothings",
            "Outside, they're push and shovin'",
            "You're in the kitchen hummin'",
            "All that you ever wanted from me was sweet nothin'",
            "They said the end is comin' (They said the end is comin')",
            "Everyone's up to somethin' (Everyone's up to somethin')",
            "I find myself runnin' home to your sweet nothings",
            "Outside, they're push and shovin' (Outside, they're push and shovin')",
            "You're in the kitchen hummin' (You're in the kitchen hummin')",
            "All that you ever wanted from me was sweet nothin'"
          ]
        },
        {
          title: "Mastermind",
          lines: [
            "Once upon a time, the planets and the fates",
            "And all the stars aligned",
            "You and I ended up in the same room",
            "At the same time",
            "And the touch of a hand lit the fuse",
            "Of a chain reaction of countermoves",
            "To assess the equation of you",
            "Checkmate, I couldn't lose",
            "What if I told you none of it was accidental?",
            "And the first night that you saw me",
            "Nothing was gonna stop me",
            "I laid the groundwork, and then",
            "Just like clockwork",
            "The dominoes cascaded in a line",
            "What if I told you I'm a mastermind?",
            "And now you're mine",
            "It was all by design",
            "'Cause I'm a mastermind",
            "You see, all the wisest women",
            "Had to do it this way",
            "'Cause we were born to be the pawn",
            "In every lover's game",
            "If you fail to plan, you plan to fail",
            "Strategy sets the scene for the tale",
            "I'm the wind in our free-flowing sails",
            "And the liquor in our cocktails",
            "What if I told you none of it was accidental?",
            "And the first night that you saw me",
            "I knew I wanted your body",
            "I laid the groundwork, and then",
            "Just like clockwork",
            "The dominoes cascaded in a line",
            "What if I told you I'm a mastermind?",
            "And now you're mine",
            "It was all my design",
            "'Cause I'm a mastermind",
            "No one wanted to play with me as a little kid",
            "So I've been scheming like a criminal ever since",
            "To make them love me and make it seem effortless",
            "This is the first time I've felt the need to confess",
            "And I swear",
            "I'm only cryptic and Machiavellian",
            "'Cause I care",
            "So I told you none of it was accidental",
            "And the first night that you saw me",
            "Nothing was gonna stop me",
            "I laid the groundwork, and then",
            "Saw a wide smirk on your face",
            "You knew the entire time",
            "You knew that I'm a mastermind",
            "And now you're mine",
            "Yeah, all you did was smile",
            "'Cause I'm a mastermind"
          ]
        },
        {
          title: "The Great War",
          lines: [
            "My knuckles were bruised like violets",
            "Sucker punching walls, cursed you as I sleep-talked",
            "Spineless in my tomb of silence",
            "Tore your banners down, took the battle underground",
            "And maybe it was egos swinging",
            "Maybe it was her",
            "Flashes of the battle come back to me in a blur",
            "All that bloodshed, crimson clover",
            "Uh-huh, sweet dream was over",
            "My hand was the one you reached for",
            "All throughout the Great-War",
            "Always remember",
            "Uh-huh, tears on the letter",
            "I vowed not to cry anymore",
            "If we survived the Great-War",
            "You drew up some good faith treaties",
            "I drew curtains closed, drank my poison all alone",
            "You said I have to trust more freely",
            "But diesel is desire, you were playing with fire",
            "And maybe it's the past that's talking",
            "Screaming from the crypt",
            "Telling me to punish you for things you never did",
            "So I justified it",
            "All that bloodshed, crimson clover",
            "Uh-huh, the bombs were closer",
            "My hand was the one you reached for",
            "All throughout the Great-War",
            "Always remember",
            "Uh-huh, the burning embers",
            "I vowed not to fight anymore",
            "If we survived the Great-War",
            "Uh-huh, uh-huh",
            "It turned into something bigger",
            "Somewhere in the haze, got a sense I'd been betrayed",
            "Your finger on my hairpin triggers",
            "Soldier down on that icy ground",
            "Looked up at me with honor and truth",
            "Broken and blue, so I called off the troops",
            "That was the night I nearly lost you",
            "I really thought I'd lost you",
            "We can plant a memory garden",
            "Say a solemn prayer, place a poppy in my hair",
            "There's no morning glory, it was war, it wasn't fair",
            "And we will never go back",
            "To that bloodshed, crimson clover",
            "Uh-huh, the worst was over",
            "My hand was the one you reached for",
            "All throughout the Great-War",
            "Always remember",
            "Uh-huh, we're burned for better",
            "I vowed I would always be yours",
            "'Cause we survived the Great-War",
            "Uh-huh, uh-huh",
            "I will always be yours",
            "'Cause we survived the Great-War",
            "Uh-huh",
            "I vow I will always be yours"
          ]
        },
        {
          title: "Bigger Than The Whole Sky",
          lines: [
            "No words appear before me in the aftermath",
            "Salt streams out my eyes and into my ears",
            "Every single thing I touch becomes sick with sadness",
            "'Cause it's all over now, all out to sea",
            "Goodbye, goodbye, goodbye",
            "You were bigger than the whole sky",
            "You were more than just a short time",
            "And I've got a lot to pine about",
            "I've got a lot to live without",
            "I'm never gonna meet",
            "What could've been, would've been",
            "What should've been you",
            "What could've been, would've been you",
            "Did some bird flap its wings over in Asia?",
            "Did some force take you because I didn't pray?",
            "Every single thing to come has turned into ashes",
            "'Cause it's all over, it's not meant to be",
            "So I'll say words I don't believe",
            "Goodbye, goodbye, goodbye",
            "You were bigger than the whole sky",
            "You were more than just a short time",
            "And I've got a lot to pine about",
            "I've got a lot to live without",
            "I'm never gonna meet",
            "What could've been, would've been",
            "What should've been you",
            "What could've been, would've been you",
            "What could've been, would've been",
            "What should've been you",
            "What could've been, would've been you",
            "(What could've been, would've been you)",
            "Goodbye, goodbye, goodbye",
            "You were bigger than the whole sky",
            "You were more than just a short time",
            "And I've got a lot to pine about",
            "I've got a lot to live without",
            "I'm never gonna meet",
            "What could've been, would've been",
            "What should've been you"
          ]
        },
        {
          title: "Paris",
          lines: [
            `"Your ex-friend's sister`,
            "Met someone at a club and he kissed her",
            "Turns out, it was that guy you hooked up with ages ago",
            "Some wannabe Z-lister",
            "And all the outfits were terrible",
            "2003 unbearable",
            'Did you see the photos?"',
            "No, I didn't, but thanks, though",
            "I'm so in love that I might stop breathing",
            "drew a map on your bedroom ceiling",
            "No, I didn't see the news",
            "'Cause we were somewhere else",
            "Stumbled down pretend alleyways",
            "Cheap wine, make believe it's champagne",
            "I was taken by the view",
            "Like we were in Paris",
            "Like we were somewhere else",
            "Like we were in Paris, oh",
            "We were somewhere else",
            "Privacy sign on the door",
            "And on my page and on the whole world",
            "Romance is not dead if you keep it just yours",
            "Levitate above all the messes made",
            "Sit quiet by my side in the shade",
            "And not the kind that's thrown",
            "I mean, the kind under where a tree has grown",
            "I'm so in love that I might stop breathing",
            "drew a map on your bedroom ceiling",
            "No, I didn't see the news",
            "'Cause we were somewhere else",
            "Stumbled down pretend alleyways",
            "Cheap wine, make believe it's champagne",
            "I was taken by the view",
            "Like we were in Paris, oh",
            "Like we were somewhere else",
            "Like we were in Paris, oh",
            "We were somewhere else",
            "I wanna brainwash you",
            "Into loving me forever",
            "I wanna transport you",
            "To somewhere the culture's clever",
            "Confess my truth",
            "In swooping, sloping, cursive letters",
            "Let the only flashing lights be the tower at midnight",
            "In my mind",
            "We drew a map on your bedroom ceiling",
            "No, I didn't see the news",
            "'Cause we were somewhere else",
            "In an alleyway, drinking champagne",
            "'Cause we were in Paris",
            "Yes, we were somewhere else",
            "My love, we were in Paris",
            "Yes, we were somewhere else"
          ]
        },
        {
          title: "High Infidelity",
          lines: [
            "Lock broken, slur spoken",
            "Wound open, game token",
            "I didn't know you were keeping count",
            "Rain soaking, blind hoping",
            "You said I was freeloading",
            "I didn't know you were keeping count",
            "High infidelity",
            "Put on your records and regret me",
            "I bent the truth too far tonight",
            "I was dancing around, dancing around it",
            "High infidelity",
            "Put on your headphones and burn my city",
            "Your picket fence is sharp as knives",
            "I was dancing around, dancing around it",
            "Do you really wanna know where I was April 29th?",
            "Do I really have to chart the constellations in his eyes?",
            "Storm coming, good husband",
            "Bad omen",
            "Dragged my feet right down the aisle",
            "At the house lonely, good money",
            "I'd pay if you'd just know me",
            "Seemed like the right thing at the time",
            "You know there's many different ways that you can kill the one you love",
            "The slowest way is never loving them enough",
            "Do you really wanna know where I was April 29th?",
            "Do I really have to tell you how he brought me back to life?",
            "High infidelity",
            "Put on your records and regret me",
            "I bent the truth too far tonight",
            "I was dancing around, dancing around it",
            "High infidelity",
            "Put on your headphones and burn my city",
            "Your picket fence is sharp as knives",
            "I was dancing around, dancing around it",
            "Do you really want to know where I was April 29th?",
            "Do I really have to chart the constellations in his eyes?",
            "You know there's many different ways that you can kill the one you love",
            "The slowest way is never loving them enough",
            "High infidelity",
            "Put on your records and regret meeting me",
            "I bent the truth too far tonight",
            "I was dancing around, dancing around it",
            "High infidelity",
            "Put on your headphones and burn my city",
            "Your picket fence is sharp as knives",
            "I was dancing around, dancing around it",
            "Oh, there's many different ways that you can kill the one you love",
            "And it's never enough, it's never enough",
            "Lock broken, slur spoken",
            "Wound open, game token",
            "I didn't know you were keeping count",
            "Rain soaking, blind hoping",
            "You said I was freeloading",
            "I didn't know you were keeping count",
            "But, oh, you were keeping count"
          ]
        },
        {
          title: "Glitch",
          lines: [
            "We were supposed to be just friends",
            "You don't live in my part of town, but maybe I'll see you out some weekend",
            "Depending on what kind of mood and situationship I'm in",
            "And what's in my system",
            "I think there's been a glitch, oh, yeah",
            "Five seconds later, I'm fastening myself to you with a stitch, oh, yeah",
            "And I'm not even sorry, nights are so starry",
            "Blood moonlit",
            "It must be counterfeit",
            "I think there's been a glitch, oh, yeah",
            "I was supposed to sweat you out",
            "In search of glorious happenings of happenstance on someone else's playground",
            "But it's been two-thousand one-hundred ninety days of our love blackout",
            "(Our love is blacking out)",
            "The system's breaking down",
            "(The system's breaking down)",
            "I think there's been a glitch, oh, yeah",
            "Five seconds later, I'm fastening myself to you with a stitch, oh, yeah",
            "And I'm not even sorry, nights are so starry",
            "Blood moonlit",
            "It must be counterfeit",
            "I think there's been a glitch",
            "A brief interruption, a slight malfunction",
            "I'd go back to wanting dudes who give nothing",
            "I thought we had no chance",
            "And that's romance, let's dance",
            "Glitch, oh, yeah",
            "Five seconds later, I'm fastening myself to you with a stitch, oh, yeah",
            "And I'm not even sorry, nights are so starry",
            "Blood moonlit",
            "It must be counterfeit (It must be counterfeit)",
            "I think there's been a glitch"
          ]
        },
        {
          title: "Would've, Could've, Should've",
          lines: [
            "If you would've blinked, then I would've",
            "Looked away at the first glance",
            "If you tasted poison, you could've",
            "Spit me out at the first chance",
            "And if I was some paint, did it splatter",
            "On a promising grown man?",
            "And if I was a child, did it matter",
            "If you got to wash your hands?",
            "Ooh, all I used to do was pray",
            "Would've, could've, should've",
            "If you'd never looked my way",
            "I would've stayed on my knees",
            "And I damn sure never would've danced with the devil",
            "At nineteen",
            "And the God's honest truth is that the pain was heaven",
            "And now that I'm grown, I'm scared of ghosts",
            "Memories feel like weapons",
            "And now that I know, I wish you'd left me wondering",
            "If you never touched me, I would've",
            "Gone along with the righteous",
            "If I never blushed, then they could've",
            "Never whispered about this",
            "And if you never saved me from boredom",
            "I could've gone on as I was",
            "But, Lord, you made me feel important",
            "And then you tried to erase us",
            "Ooh, you're a crisis of my faith",
            "Would've, could've, should've",
            "If I'd only played it safe",
            "I would've stayed on my knees",
            "And I damn sure never would've danced with the devil",
            "At nineteen",
            "And the God's honest truth is that the pain was heaven",
            "And now that I'm grown, I'm scared of ghosts",
            "Memories feel like weapons",
            "And now that I know, I wish you'd left me wondering",
            "God rest my soul",
            "I miss who I used to be",
            "The tomb won't close",
            "Stained glass windows in my mind",
            "I regret you all the time",
            "I can't let this go",
            "I fight with you in my sleep",
            "The wound won't close",
            "I keep on waiting for a sign",
            "I regret you all the time",
            "If clarity's in death, then why won't this die?",
            "Years of tearing down our banners, you and I",
            "Living for the thrill of hitting you where it hurts",
            "Give me back my girlhood, it was mine first",
            "And I damn sure never would've danced with the devil",
            "At nineteen",
            "And the God's honest truth is that the pain was heaven",
            "And now that I'm grown, I'm scared of ghosts",
            "Memories feel like weapons",
            "And now that I know, I wish you'd left me wondering",
            "God rest my soul",
            "I miss who I used to be",
            "The tomb won't close",
            "Stained glass windows in my mind",
            "I regret you all the time",
            "I can't let this go",
            "I fight with you in my sleep",
            "The wound won't close",
            "I keep on waiting for a sign",
            "I regret you all the time",
            "Oh, God rest my soul",
            "I miss who I used to be",
            "The tomb won't close",
            "Stained glass windows in my mind",
            "I regret you all the time",
            "I can't let this go",
            "I fight with you in my sleep",
            "The wound won't close",
            "I keep on waiting for a sign",
            "I regret you all the time"
          ]
        },
        {
          title: "Dear Reader",
          lines: [
            "Dear reader, if it feels like a trap",
            "You're already in one",
            "Dear reader, get out your map",
            "Pick somewhere and just run",
            "Dear reader, burn all the files",
            "Desert all your past lives",
            "And if you don't recognize yourself",
            "That means you did it right",
            "Never take advice from someone who's falling apart",
            "Never take advice from someone who's falling apart (You should find another)",
            "Dear reader, bend when you can",
            "Snap when you have to",
            "Dear reader, you don't have to answer",
            "Just 'cause they asked you",
            "(You should find another)",
            "Dear reader, the greatest of luxuries is your secrets",
            "Dear reader, when you aim at the devil",
            "Make sure you don't miss",
            "Never take advice from someone who's falling apart",
            "Never take advice from someone who's falling apart",
            "So I wander through these nights",
            "I prefer hiding in plain sight",
            "My fourth drink in my hand",
            "These desperate prayers of a cursed man",
            "Spilling out to you for free",
            "But darling, darling, please",
            "You wouldn't take my word for it if you knew who was talking",
            "If you knew where I was walking",
            "To a house, not a home, all alone 'cause nobody's there",
            "Where I pace in my pen and my friends found friends who care",
            "No one sees when you lose when you're playing solitaire",
            "You should find another guiding light, guiding light",
            "But I shine so bright",
            "You should find another guiding light, guiding light",
            "But I shine so bright",
            "You should find another, you should find another (Guiding light)",
            "Find another, you should find another",
            "You should find another"
          ]
        },
        {
          title: "Hits Different",
          lines: [
            "I washed my hands of us at the club",
            "You made a mess of me",
            "I pictured you with other girls in love",
            "Then threw up on the street",
            "Like waiting for a bus that never shows",
            "You just start walkin' on",
            "They say that if it's right, you know",
            "Each bar plays our song",
            "Nothing has ever felt so wrong",
            "Oh, my, love is a lie",
            "Shit my friends say to get me by",
            "It hits different",
            "It hits different this time",
            "Catastrophic blues",
            "Movin' on was always easy for me to do",
            "It hits different",
            "It hits different 'cause it's you",
            "('Cause it's you)",
            "I used to switch out these Kens, I'd just ghost",
            "Rip the band-aid off and skip town like an asshole outlaw",
            "Freedom felt like summer then on the coast",
            "Now the sun burns my heart and the sand hurts my feelings",
            "And I never don't cry (And I never don't cry) at the bar",
            "Yeah, my sadness is contagious (My sadness is contagious)",
            "I slur your name 'til someone puts me in a car",
            "I stopped receiving invitations",
            "Oh, my, love is a lie",
            "Shit my friends say to get me by",
            "It hits different",
            "It hits different this time",
            "Catastrophic blues",
            "Movin' on was always easy for me to do",
            "It hits different",
            "It hits different 'cause it's you",
            "('Cause it's you)",
            "I find the artifacts, cried over a hat",
            "Cursed the space that I needed",
            "I trace the evidence, make it make some sense",
            "Why the wound is still bleedin'",
            "You were the one that I loved",
            "Don't need another metaphor, it's simple enough",
            "A wrinkle in time like the crease by your eyes",
            "This is why they shouldn't kill off the main guy",
            "Dreams of your hair and your stare and sense of belief",
            "In the good in the world, you once believed in me",
            "And I felt you and I held you for a while",
            "Bet I could still melt your world",
            "Argumentative, antithetical dream girl",
            "I heard your key turn in the door down the hallway",
            "Is that your key in the door?",
            "Is it okay? Is it you?",
            "Or have they come to take me away?",
            "To take me away",
            "Oh, my, love is a lie",
            "Shit my friends say to get me by",
            "It hits different (It hits different)",
            "It hits different this time",
            "Catastrophic blues",
            "Movin' on was always easy for me to do",
            "It hits different (It hits different)",
            "It hits different 'cause it's you",
            "Oh, my, love is a lie",
            "Shit my friends say to get me by",
            "'Cause it's you",
            "Catastrophic blues",
            "Movin' on was always easy for me to do",
            "It hits different (Yeah)",
            "It hits different 'cause it's you"
          ]
        },
        {
          title: "Snow On The Beach (Feat. More Lana Del Rey)",
          lines: [
            "One night, a few moons ago",
            "I saw flecks of what could've been lights",
            "But it might just have been you",
            "Passing by unbeknownst to me",
            "Life is emotionally abusive",
            "And time can't stop me quite like you did",
            "And my flight was awful, thanks for asking",
            "I'm unglued, thanks to you",
            "And it's like snow at the beach",
            "Weird, but fuckin' beautiful",
            "Flying in a dream",
            "Stars by the pocketful",
            "You wanting me",
            "Tonight feels impossible",
            "But it's comin' down",
            "No sound, it's all around",
            "Like snow on the beach",
            "Like snow on the beach",
            "Like snow on the beach",
            "Like snow, ah, ah",
            "This scene feels like what I once saw on a screen",
            'I searched "Aurora-Borealis green"',
            "I've never seen someone lit from within",
            "Blurring out my periphery",
            "My smile is like I won a contest",
            "And to hide that would be so dishonest",
            "And it's fine to fake it 'til you make it",
            "'Til you do, 'til it's true",
            "Now, it's like snow at the beach",
            "Weird, but fuckin' beautiful",
            "Flying in a dream",
            "Stars by the pocketful",
            "You wanting me",
            "Tonight feels impossible",
            "But it's comin' down",
            "No sound, it's all around",
            "Like snow on the beach (Mmm)",
            "Like snow on the beach",
            "Like snow on the beach (Mmm)",
            "Like snow, ah, ah",
            "I (I) can't (Can't) speak, afraid to jinx it",
            "I (I) don't (Don't) even dare to wish it",
            "But your eyes are flying saucers from another planet",
            "Now, I'm all for you like Janet",
            "Can this be a real thing? Can it?",
            "Are we falling like snow at the beach? (Snow at the beach)",
            "Weird, but fuckin' beautiful",
            "Flying in a dream (Flying in a dream)",
            "Stars by the pocketful",
            "You wanting me (You wanting me)",
            "Tonight feels impossible",
            "But it's comin' down",
            "No sound, it's all around",
            "Like snow on the beach (Snow on the beach; Mmm)",
            "Like snow on the beach (Flying in a dream)",
            "Like snow on the beach (You wanting me; Mmm)",
            "Like snow, ah",
            "But it's comin' down",
            "No sound, it's all around",
            "Like snow on the beach",
            "Like snow, like snow, uh-huh, yeah"
          ]
        }
      ]
    },
    {
      title: "The Tortured Poets Department",
      songs: [
        {
          title: "Fortnight",
          lines: [
            "I was supposed to be sent away",
            "But they forgot to come and get me",
            "I was a functioning alcoholic",
            "'Til nobody noticed my new aesthetic",
            "All of this to say I hope you're okay",
            "But you're the reason",
            "And no one here's to blame",
            "But what about your quiet treason?",
            "And for a fortnight there, we were forever",
            "Run into you sometimes, ask about the weather",
            "Now you're in my backyard, turned into good neighbors",
            "Your wife waters flowers, I wanna kill her",
            "All my mornings are Mondays stuck in an endless February",
            "I took the miracle move-on drug, the effects were temporary",
            "And I love you, it's ruining my life",
            "I love you, it's ruining my life",
            "I touched you for only a fortnight",
            "I touched you, but I touched you",
            "And for a fortnight there, we were forever",
            "Run into you sometimes, ask about the weather",
            "Now you're in my backyard, turned into good neighbors",
            "Your wife waters flowers, I wanna kill her",
            "And for a fortnight there, we were together",
            "Run into you sometimes, comment on my sweater",
            "Now you're at the mailbox, turned into good neighbors",
            "My husband is cheating, I wanna kill him",
            "I love you, it's ruining my life",
            "I love you, it's ruining my life",
            "I touched you for only a fortnight",
            "I touched you, I touched you",
            "I love you, it's ruining my life",
            "I love you, it's ruining my life",
            "I touched you for only a fortnight",
            "I touched you, I touched you",
            "Thought of callin' ya, but you won't pick up",
            "'Nother fortnight lost in America",
            "Move to Florida, buy the car you want",
            "But it won't start up 'til you touch, touch, touch me",
            "Thought of calling ya, but you won't pick up",
            "'Nother fortnight lost in America",
            "Move to Florida, buy the car you want",
            "But it won't start up 'til I touch, touch, touch you"
          ]
        },
        {
          title: "The Tortured Poets Department",
          lines: [
            "You left your typewriter at my apartment",
            "Straight from the tortured poets department",
            "I think some things I never say",
            'Like, "Who uses typewriters anyway?"',
            "But you're in self-sabotage mode",
            "Throwing spikes down on the road",
            "But I've seen this episode and still loved the show",
            "Who else decodes you?",
            "And who's gonna hold you like me?",
            "And who's gonna know you, if not me?",
            "I laughed in your face and said",
            `"You're not Dylan-Thomas, I'm not Patti-Smith`,
            `This ain't the Chelsea-Hotel, we'r\u0435 modern idiots"`,
            "And who's gonna hold you like me?",
            "Nobody",
            "No-fucking-body",
            "Nobody",
            "You smok\u0435d, then ate seven bars of chocolate",
            "We declared Charlie-Puth should be a bigger artist",
            "I scratch your head, you fall asleep",
            "Like a tattooed golden retriever",
            "But you awaken with dread",
            "Pounding nails in your head",
            "But I've read this one where you come undone",
            "I chose this cyclone with you",
            "And who's gonna hold you like me?",
            "(Who's gonna hold you? Who's gonna hold you?)",
            "And who's gonna know you like me?",
            "(Who's gonna know you?)",
            "I laughed in your face and said",
            `"You're not Dylan-Thomas, I'm not Patti-Smith`,
            `This ain't the Chelsea-Hotel, we're modern idiots"`,
            "And who's gonna hold you like me?",
            "(Who's gonna hold you? Who's gonna hold you?)",
            "No-fucking-body",
            "(Who's gonna hold you? Who's gonna hold you?)",
            "Nobody",
            "(Who's gonna hold you? Gonna know you? Gonna troll you?)",
            "Nobody",
            "Sometimes, I wonder if you're gonna screw this up with me",
            "But you told Lucy you'd kill yourself if I ever leave",
            "And I had said that to Jack about you, so I felt seen",
            "Everyone we know understands why it's meant to be",
            "'Cause we're crazy",
            "So tell me, who else is gonna know me?",
            "At dinner, you take my ring off my middle finger",
            "And put it on the one people put wedding rings on",
            "And that's the closest I've come to my heart exploding",
            "Who's gonna hold you? (Who?)",
            "Me",
            "Who's gonna know you? (Who?)",
            "Me",
            "And you're not Dylan-Thomas, I'm not Patti-Smith",
            "This ain't the Chelsea-Hotel, we're two idiots",
            "Who's gonna hold you?",
            "Who's gonna hold you?",
            "Who's gonna hold you?",
            "Who's gonna hold you?",
            "Who's gonna hold you?",
            "Who's gonna hold you?",
            "Who's gonna hold you?",
            "Who's gonna hold you?",
            "Gonna know you? Gonna troll you?",
            "You left your typewriter at my apartment",
            "Straight from the tortured poets department",
            "Who else decodes you?"
          ]
        },
        {
          title: "My Boy Only Breaks His Favorite Toys",
          lines: [
            "Oh, here we go again",
            "The voices in his head",
            "Called the rain to end our days of wild",
            "The sickest army doll",
            "Purchased at the mall",
            "Rivulets descend my plastic smile",
            "But you should've seen him when he first got me",
            "My boy only breaks his favorite toys, toys, oh",
            "I'm queen of sand castles he destroys, oh, oh",
            "'Cause it fit too right, puzzle pieces in the dead of night",
            "I should've known it was a matter of time, oh, oh",
            "My boy only breaks his favorite toys, oh, oh",
            "There was a litany of reasons why",
            "We could've play\u0435d for keeps this time",
            "I know I'm just repeating mys\u0435lf",
            "Put me back on my shelf",
            "But first, pull the string",
            "And I'll tell you that he runs",
            "Because he loves me (He loves me)",
            "'Cause you should've seen him when he first saw me",
            "My boy (My boy), only breaks his favorite toys, toys, oh",
            "I'm queen (I'm queen), of sand castles he destroys, oh, oh",
            "'Cause I knew too much, there was danger in the heat of my touch",
            "He saw forever, so he smashed it up, oh, oh",
            "My boy (My boy), only breaks his favorite toys, oh, oh",
            "Once I fix me",
            "He's gonna miss me",
            "Once I fix me",
            "He's gonna miss me",
            "Just say when, I'd play again",
            "He was my best friend down at the sandlot",
            "I felt more when we played pretend",
            "Than with all the Kens",
            "'Cause he took me out of my box",
            "Stole my tortured heart",
            "Left all these broken parts",
            "Told me I'm better off",
            "But I'm not",
            "I'm not, I'm not"
          ]
        },
        {
          title: "Down Bad",
          lines: [
            "Did you really beam me up",
            "In a cloud of sparkling dust",
            "Just to do experiments on?",
            "Tell me I was the chosen one",
            "Showed me that this world is bigger than us",
            "Then sent me back where I came from",
            "For a moment, I knew cosmic love",
            "Now I'm down bad, cryin' at the gym",
            "Everything comes out teenage petulance",
            `"Fuck it if I can't have him"`,
            '"I might just die, it would make no difference"',
            "Down bad, wakin' up in blood",
            "Starin' at the sky, come back and pick me up",
            "Fuck it if I can't have us",
            "I might just not get up, I might stay",
            "Down bad",
            "Fuck it if I can't have him",
            "Down bad",
            "Fuck it if I can't have him",
            "Did you take all my old clothes",
            "Just to leave me here, naked and alone",
            "In a field in my same old town",
            "That somehow seems so hollow now?",
            "They'll say I'm nuts if I talk about",
            "The existence of you",
            "For a moment, I was heavenstruck",
            "Now I'm down bad, cryin' at the gym (Cryin' at the gym)",
            "Everything comes out teenage petulance",
            `"Fuck it if I can't have him" (Fuck it if I can't have him)`,
            '"I might just die, it would make no difference"',
            "Down bad, wakin' up in blood (Wakin' up in blood)",
            "Starin' at the sky, come back and pick me up",
            "Fuck it if I can't have us",
            "I might just not get up, I might stay",
            "Down bad (Like I lost my twin)",
            "Fuck it if I can't have him (Down bad)",
            "Down bad (Wavin' at the ship)",
            "Fuck it if I can't have him",
            "I loved your hostile takeovers",
            "Encounters closer and closer",
            "All your indecent exposures",
            "How dare you say that it's\u2014",
            "I'll build you a fort on some planet",
            "Where they can all understand it",
            "How dare you think it's romantic",
            "Leaving me safe and stranded",
            "'Cause fuck it, I was in love",
            "So fuck you if I can't have us",
            "'Cause fuck it, I was in love",
            "Now I'm down bad, cryin' at the gym (Cryin' at the gym)",
            "Everything comes out teenage petulance",
            `"Fuck it if I can't have him" (Can't have him)`,
            '"I might just die, it would make no difference"',
            "Down bad, wakin' up in blood (Wakin' up in blood)",
            "Starin' at the sky, come back and pick me up",
            "Fuck it if I can't have us",
            "I might just not get up, I might stay",
            "Down bad (Like I lost my twin)",
            "Fuck it if I can't have him (I'm down bad)",
            "Down bad (Wavin' at the ship)",
            "Fuck it if I can't have him",
            "Like I lost my twin",
            "Fuck it if I can't have him",
            "Down bad (Wavin' at the ship)",
            "Fuck it if I can't have him"
          ]
        },
        {
          title: "So Long, London",
          lines: [
            "So (So) long (Long), London (London)",
            "So (So) long (Long), London (London)",
            "So (So) long (Long), London (London)",
            "I saw in my mind fairy lights through the mist",
            "I kept calm and carried the weight of the rift",
            "Pulled him in tighter each time he was driftin' away",
            "My spine split from carrying us up the hill",
            "Wet through my clothes, weary bones caught the chill",
            "I stopped tryna make him laugh, stopped tryna drill the safe",
            `Thinkin', "How much sad did you think I had`,
            'Did you think I had in me?"',
            "Oh, the tragedy",
            "So long, London",
            "You'll find someone",
            "I didn't opt in to be your odd man out",
            "I founded the club she's heard great things about",
            "I left all I knew, you left me at the house by the Heath",
            "I stopp\u0435d CPR, after all, it's no use",
            "The spirit was gon\u0435, we would never come to",
            "And I'm pissed off you let me give you all that youth for free",
            "For so long, London",
            "Stitches undone",
            "Two graves, one gun",
            "I'll find someone",
            "And you say I abandoned the ship",
            "But I was going down with it",
            "My white-knuckle dying grip",
            "Holding tight to your quiet resentment",
            "And my friends said it isn't right to be scared",
            "Every day of a love affair",
            "Every breath feels like rarest air",
            "When you're not sure if he wants to be there",
            "So how much sad did you think I had",
            "Did you think I had in me?",
            "How much tragedy?",
            "Just how low did you",
            "Think I'd go 'fore I'd self-implode?",
            "'Fore I'd have to go be free?",
            "You swore that you loved me, but where were the clues?",
            "I died on the altar waitin' for the proof",
            "You sacrificed us to the gods of your bluest days",
            "And I'm just getting color back into my face",
            "I'm just mad as hell 'cause I loved this place for",
            "So (So) long (Long), London (London)",
            "Had (Had) a (A) good (Good) run (Run)",
            "A moment (Moment) of warm sun (Sun)",
            "But I'm (I'm) not (Not) the (The) one (One)",
            "So (So) long (Long), London (London)",
            "Stitches (Stitches) undone (Undone)",
            "Two (Two) graves (Graves) one gun (Gun)",
            "You'll (You'll) find (Find) someone"
          ]
        },
        {
          title: "But Daddy I Love Him",
          lines: [
            "I forget how the West was won",
            "I forget if this was ever fun",
            "I just learned these people only raise you",
            "To cage you",
            "Sarahs and Hannahs in their Sunday best",
            `Clutchin' their pearls, sighing, "What a mess"`,
            "I just learned these people try and save you",
            "'Cause they hate you",
            "Too high a horse for a simple girl",
            "To rise above it",
            "They slammed the door on my whole world",
            "The one thing I wanted",
            "Now I'm runnin' with my dress unbuttoned",
            `Scr\u0435amin', "But, Daddy, I love him`,
            `I'm havin' his baby"`,
            "No, I'm not, but you should see your faces",
            "I'm tellin' him to floor it through th\u0435 fences",
            "No, I'm not coming to my senses",
            "I know he's crazy, but he's the one I want",
            "Dutiful daughter, all my plans were laid",
            "Tendrils tucked into a woven braid",
            "Growin' up precocious sometimes means",
            "Not growin' up at all",
            "He was chaos, he was revelry",
            "Bedroom eyes like a remedy",
            "Soon enough, the elders had convened",
            "Down at the city hall",
            '"Stay away from her"',
            "The saboteurs protested too much",
            "Lord knows the words we never heard",
            "Just screeching tires and true love",
            "And I'm runnin' with my dress unbuttoned",
            `Screamin', "But, Daddy, I love him`,
            `I'm havin' his baby"`,
            "No, I'm not, but you should see your faces",
            "I'm tellin' him to floor it through the fences",
            "No, I'm not coming to my senses",
            "I know he's crazy, but he's the one I want",
            "I'll tell you something right now",
            "I'd rather burn my whole life down",
            "Than listen to one more second of all this bitchin' and moanin'",
            "I'll tell you something 'bout my good name",
            "It's mine alone to disgrace",
            "I don't cater to all these vipers dressed in empath's clothing",
            "God save the most judgmental creeps",
            "Who say they want what's best for me",
            "Sanctimoniously performing soliloquies I'll never see",
            "Thinkin' it can change the beat",
            "Of my heart when he touches me",
            "And counteract the chemistry",
            "And undo the destiny",
            "You ain't gotta pray for me",
            "Me and my wild boy and all of this wild joy",
            "If all you want is gray for me",
            "Then it's just white noise, and it's just my choice",
            "There's a lot of people in town that I",
            "Bestow upon my fakest smiles",
            "Scandal does funny things to pride, but brings lovers closer",
            "We came back when the heat died down",
            "Went to my parents and they came around",
            "All the wine moms are still holdin' out, but fuck 'em, it's over",
            "Now I'm dancin' in my dress in the sun and",
            "Even my daddy just loves him",
            "I'm his lady",
            "And, oh, my God, you should see your faces",
            "Time, doesn't it give some perspective?",
            "And, no, you can't come to the wedding",
            "I know it's crazy, but he's the one I want",
            "I'll tell you something right now",
            "You ain't gotta pray for me",
            "Me and my wild boy and all of this wild joy",
            "(He was chaos, he was revelry)",
            "If all you want is gray for me",
            "Then it's just white noise, and it's my choice",
            `Screamin', "But, Daddy, I love him`,
            `I'm having his baby"`,
            "No, I'm not",
            "But you should see your faces",
            "But, oh, my God, you should see your faces",
            "(He was chaos, he was revelry)",
            "(He was chaos, he was revelry)"
          ]
        },
        {
          title: "Fresh Out The Slammer",
          lines: [
            "Now, pretty baby, I'm runnin' back home to you",
            "Fresh out the slammer, I know who my first call will be to",
            "(Fresh out the slammer, oh)",
            "Another summer takin' cover, rolling thunder",
            "He don't understand me",
            "Splintered back in winter, silent dinners, bitter",
            "He was with her in dreams",
            "Gray and blue and fights and tunnels",
            "Handcuffed to the spell I was under",
            "For just one hour of sunshine",
            "Years of labor, locks, and ceilings",
            "In the shade of how he was feeling",
            "But it's gonna be alright, I did my time",
            "Now, pretty baby, I'm runnin' back home to you",
            "Fr\u0435sh out the slammer, I know who my first call will be to",
            "(Fr\u0435sh out the slammer, oh)",
            "Camera flashes, welcome bashes, get the matches",
            "Toss the ashes off the ledge",
            "As I said in my letters, now that I know better",
            "I will never lose my baby again",
            "My friends tried, but I wouldn't hear it",
            "Watch me daily disappearing",
            "For just one glimpse of his smile",
            "All those nights, he kept me goin'",
            "Swirled you into all of my poems",
            "Now we're at the starting line, I did my time",
            "Now, pretty baby, I'm runnin'",
            "To the house where you still wait up and that porch light gleams (Gleams)",
            "To the one who says I'm the girl of his American dreams",
            "And no matter what I've done, it wouldn't matter anyway",
            "Ain't no way I'm gonna screw up now that I know what's at stake here",
            "At the park where we used to sit on children's swings",
            "Wearing imaginary rings",
            "But it's gonna be alright, I did my time"
          ]
        },
        {
          title: "Florida!!!",
          lines: [
            "You can beat the heat if you beat the charges too",
            "They said I was a cheat, I guess it must be true",
            "And my friends all smell like weed or little babies",
            "And this city reeks of driving myself crazy",
            "Little did you know your home's really only",
            "A town you're just a guest in",
            "So you work your life away just to pay",
            "For a time-share down in Destin",
            "Florida",
            "Is one hell of a drug",
            "Florida",
            "Can I use you up?",
            "The hurricane with my name when it came",
            "I got drunk and I dared it to wash me away",
            "Barricaded in the bathroom with a bottle of wine",
            "Well, me and my ghosts, w\u0435 had a hell of a time",
            "Yes, I'm haunt\u0435d, but I'm feeling just fine",
            "All my girls got their lace and their crimes",
            "And your cheating husband disappeared, well",
            "No one asks any questions here",
            "So I did my best to lay to rest",
            "All of the bodies that have ever been on my body",
            "And in my mind, they sink into the swamp",
            "Is that a bad thing to say in a song?",
            "Little did you know your home's really only",
            "The town you'll get arrested",
            "So you pack your life away just to wait out",
            "The shitstorm back in Texas",
            "Florida",
            "Is one hell of a drug",
            "Florida",
            "Can I use you up?",
            "I need to forget, so take me to Florida",
            "I've got some regrets, I'll bury them in Florida",
            "Tell me I'm despicable, say it's unforgivable",
            "At least the dolls are beautiful, fuck me up, Florida",
            "I need to forget, so take me to Florida",
            "I've got some regrets, I'll bury them in Florida",
            "Tell me I'm despicable, say it's unforgivable",
            "What a crash, what a rush, fuck me up, Florida",
            "It's one hell of a drug",
            "It's one hell of a drug",
            "Love left me like this and I don't want to exist",
            "So take me to Florida",
            "Little did you know your home's really only",
            "A town you're just a guest in (Florida)",
            "So you work your life away just to pay",
            "For a time-share down in Destin (Take me to Florida)",
            "Little did you know your home's really only",
            "The town you'll get arrested (Florida)",
            "So you pack your life away just to wait out",
            "The shitstorm back in Texas",
            "Florida",
            "Is one hell of a drug",
            "(Take me to) Florida",
            "Can I use you up?",
            "Florida",
            "Is one hell of a drug",
            "Florida",
            "Go on, fuck me up"
          ]
        },
        {
          title: "Guilty As Sin?",
          lines: [
            "Drownin' in the Blue-Nile",
            'He sent me "Downtown-Lights"',
            "I hadn't heard it in a while",
            "My boredom's bone-deep",
            "This cage was once just fine",
            "Am I allowed to cry?",
            "I dream of crackin' locks",
            "Throwin' my life to the wolves or the ocean rocks",
            "Crashin' into him tonight, he's a paradox",
            "I'm seeing visions",
            "Am I bad or mad or wise?",
            `What if he's written "mine" on my upper thigh only in my mind?`,
            "One slip and fallin' back into the hedge maze",
            "Oh, what a way to die",
            "I keep recalling things we never did",
            "Messy top-lip kiss, how I long for our trysts",
            "Without ever touchin' his skin",
            "How can I be guilty as sin?",
            "I keep these longings lock\u0435d",
            "In lowercase, inside a vault",
            `Som\u0435one told me, "There's no such thing as bad thoughts`,
            'Only your actions talk"',
            "These fatal fantasies",
            "Giving way to labored breath, takin' all of me",
            "We've already done it in my head",
            "If it's make-believe",
            "Why does it feel like a vow we'll both uphold somehow?",
            `What if he's written "mine" on my upper thigh only in my mind?`,
            "One slip and fallin' back into the hedge maze",
            "Oh, what a way to die",
            "My bed sheets are ablaze",
            "I've screamed his name",
            "Buildin' up like waves crashin' over my grave",
            "Without ever touchin' his skin",
            "How can I be guilty as sin?",
            "What if I roll the stone away?",
            "They're gonna crucify me anyway",
            "What if the way you hold me is actually what's holy?",
            "If long-suffering propriety is what they want from me",
            "They don't know how you've haunted me so stunningly",
            "I choose you and me religiously",
            `What if he's written "mine" on my upper thigh only in my mind?`,
            "One slip and fallin' back into the hedge maze",
            "Oh, what a way to die",
            "I keep recalling things we never did",
            "Messy top-lip kiss, how I long for our trysts",
            "Without ever touchin' his skin",
            "How can I be guilty as sin?",
            'He sent me "Downtown-Lights"',
            "I hadn't heard it in a while",
            "Am I allowed to cry?"
          ]
        },
        {
          title: "Who\u2019s Afraid Of Little Old Me?",
          lines: [
            `The who's who of "Who's that?" is poised for the attack`,
            "But my bare hands paved their paths",
            `You don't get to tell me about "sad"`,
            "If you wanted me dead, you should've just said",
            "Nothing makes me feel more alive",
            "So I leap from the gallows and I levitate down your street",
            "Crash the party like a record scratch as I scream",
            `"Who's afraid of little old me?"`,
            "You should be",
            "The scandal was contained",
            "The bullet had just grazed",
            "At all costs, keep your good name",
            "You don't get to tell me you feel bad",
            "Is it a wonder I broke? Let's hear one mor\u0435 joke",
            "Then we could all just laugh until I cry",
            "So I l\u0435ap from the gallows and I levitate down your street",
            "Crash the party like a record scratch as I scream",
            `"Who's afraid of little old me?"`,
            "I was tame, I was gentle 'til the circus life made me mean",
            `"Don't you worry, folks, we took out all her teeth"`,
            "Who's afraid of little old me?",
            "Well, you should be",
            "(You should be) You should be",
            "(You should be) You should be",
            "You should be (You should be)",
            "You should be (You should be)",
            "You should be",
            "So tell me everything is not about me",
            "But what if it is?",
            "Then say they didn't do it to hurt me",
            "But what if they did?",
            "I wanna snarl and show you just how disturbed this has made me",
            "You wouldn't last an hour in the asylum where they raised me",
            "So all you kids can sneak into my house with all the cobwebs",
            "I'm always drunk on my own tears, isn't that what they all said?",
            "That I'll sue you if you step on my lawn",
            "That I'm fearsome and I'm wretched and I'm wrong",
            "Put narcotics into all of my songs",
            "And that's why you're still singin' along",
            "So I leap from the gallows and I levitate down your street",
            "Crash the party like a record scratch as I scream",
            `"Who's afraid of little old me?"`,
            "I was tame, I was gentle 'til the circus life made me mean",
            `"Don't you worry, folks, we took out all her teeth"`,
            "Who's afraid of little old me?",
            "Well, you should be",
            "(You should be) You should be",
            "(You should be) You should be",
            "'Cause you lured me (You should be)",
            "And you hurt me (You should be)",
            "And you taught me",
            "You caged me and then you called me crazy",
            "I am what I am 'cause you trained me",
            "So who's afraid of me?",
            "Who's afraid of little old me?",
            "Who's afraid of little old me?"
          ]
        },
        {
          title: "I Can Fix Him (No Really I Can)",
          lines: [
            "The smoke cloud billows out his mouth",
            "Like a freight train through a small town",
            "The jokes that he told across the bar",
            "Were revolting and far too loud",
            `They shake their heads sayin', "God, help her"`,
            "When I tell 'em he's my man",
            "But your good Lord doesn't need to lift a finger",
            "I can fix him, no, really, I can",
            "And only I can",
            "The dopamine races through his brain",
            "On a six-lane Texas highway",
            "His hand so calloused from his pistol",
            "Softly traces hearts on my face",
            "And I could see it from a mile away",
            "A perfect case for my certain skill set",
            "He had a halo of the highest grad\u0435",
            "He just hadn't met me y\u0435t",
            `They shake their heads sayin', "God, help her"`,
            "When I tell 'em he's my man",
            "But your good Lord doesn't need to lift a finger",
            "I can fix him, no, really, I can",
            "And only I can",
            "Good boy, that's right, come close",
            "I'll show you Heaven if you'll be an angel, all night",
            "Trust me, I can handle me a dangerous man",
            "No, really, I can",
            `They shook their heads sayin', "God, help her"`,
            "When I told 'em he's my man (I told 'em he's my man)",
            "But your good Lord didn't need to lift a finger",
            "I can fix him, no, really, I can (No, really, I can)",
            "Woah, maybe I can't"
          ]
        },
        {
          title: "\u200ELoml",
          lines: [
            "Who's gonna stop us from waltzing back into rekindled flames",
            "If we know the steps anyway?",
            "We embroidered the memories of the time I was away",
            'Stitching, "We were just kids, babe"',
            `I said, "I don't mind, it takes time"`,
            "I thought I was better safe than starry-eyed",
            "I felt aglow like this",
            "Never before and never since",
            "If you know it in one glimpse, it's legendary",
            "You and I go from one kiss to getting married",
            "Still aliv\u0435, killing time at the cem\u0435tery",
            "Never quite buried",
            "In your suit and tie, in the nick of time",
            "You low-down boy, you stand-up guy",
            "You Holy-Ghost, you told me I'm the love of your life",
            "You said I'm the love of your life",
            "About a million times",
            "Who's gonna tell me the truth when you blew in with the winds of fate",
            "And told me I reformed you?",
            "When your impressionist paintings of heaven turned out to be fakes",
            "Well, you took me to hell too",
            "And all at once, the ink bleeds",
            "A con man sells a fool a get-love-quick scheme",
            "But I've felt a hole like this",
            "Never before and ever since",
            "If you know it in one glimpse, it's legendary",
            "What we thought was for all time was momentary",
            "Still alive, killing time at the cemetery",
            "Never quite buried",
            "You cinephile in black and white",
            "All those plot twists and dynamite",
            "Mr. Steal Your Girl, then make her cry",
            "You said I'm the love of your life",
            "You shit-talked me under the table",
            "Talkin' rings and talkin' cradles",
            "I wish I could un-recall",
            "How we almost had it all",
            "Dancing phantoms on the terrace",
            "Are they second-hand embarrassed",
            "That I can't get out of bed",
            "'Cause something counterfeit's dead?",
            "It was legendary",
            "It was momentary",
            "It was unnecessary",
            "Should've let it stay buried",
            "Oh, what a valiant roar",
            "What a bland goodbye",
            "The coward claimed he was a lion",
            "I'm combing through the braids of lies",
            `"I'll never leave," "Never mind"`,
            "Our field of dreams engulfed in fire",
            "Your arson's match, your somber eyes",
            "And I'll still see it until I die",
            "You're the loss of my life"
          ]
        },
        {
          title: "I Can Do It With A Broken Heart",
          lines: [
            "I can read your mind",
            `"She's having the time of her life"`,
            "There in her glittering prime",
            "The lights refract sequin stars off her silhouette every night",
            "I can show you lies",
            "(One, two, three, four)",
            "'Cause I'm a real tough kid",
            "I can handle my shit",
            `They said, "Babe, you gotta fake it 'til you make it" and I did`,
            "Lights, camera, bitch, smile",
            "Even when you wanna die",
            "He said he'd love me all his life",
            "But that life was too short",
            "Breaking down, I hit the floor",
            'All the pi\u0435ces of me shatter\u0435d as the crowd was chanting, "More"',
            "I was grinnin' like I'm winnin'",
            "I was hittin' my marks",
            "'Cause I can do it with a broken heart",
            "(One, two, three, four)",
            "I'm so depressed, I act like it's my birthday every day",
            "I'm so obsessed with him, but he avoids me like the plague",
            "I cry a lot, but I am so productive, it's an art",
            "You know you're good when you can even do it with a broken heart",
            "I can hold my breath",
            "I've been doin' it since he left",
            "I keep finding his things in drawers",
            "Crucial evidence I didn't imagine the whole thing",
            "I'm sure I can pass this test",
            "(One, two, three, four)",
            "'Cause I'm a real tough kid",
            "I can handle my shit",
            `They said, "Babe, you gotta fake it 'til you make it" and I did`,
            "Lights, camera, bitch, smile",
            "In stilettos for miles",
            "He said he'd love me for all time",
            "But that time was quite short",
            "Breaking down, I hit the floor",
            'All the pieces of me shattered as the crowd was chanting, "More"',
            "I was grinnin' like I'm winnin'",
            "I was hittin' my marks",
            "'Cause I can do it with a broken heart",
            "(One, two, three, four)",
            "I'm so depressed, I act like it's my birthday every day",
            "I'm so obsessed with him, but he avoids me (He avoids me), like the plague",
            "I cry a lot, but I am so productive, it's an art",
            "You know you're good when you can even do it with a broken heart",
            "You know you're good when you can even do it with a broken heart",
            "You know you're good",
            "And I'm good",
            "'Cause I'm miserable (ha ha)",
            "And nobody even knows",
            "Ah, try and come for my job"
          ]
        },
        {
          title: "The Smallest Man Who Ever Lived",
          lines: [
            "Was any of it true?",
            "Gazing at me starry-eyed",
            "In your Jehovah's-Witness suit",
            "Who the fuck was that guy?",
            "You tried to buy some pills",
            "From a friend of friends of mine",
            "They just ghosted you",
            "Now you know what it feels like",
            "And I don't even want you back, I just want to know",
            "If rusting my sparkling summer was the goal",
            "And I don't miss what we had, but could someone give",
            "A message to the smallest man who ever lived?",
            "You hung me on your wall",
            "Stabbed me with your push pins",
            "In public, showed me off",
            "Then sank in stoned oblivion",
            "'Cause once your queen had come",
            "You'd treat her lik\u0435 an also-ran",
            "You didn't measure up",
            "In any measur\u0435 of a man",
            "And I don't even want you back, I just want to know",
            "If rusting my sparkling summer was the goal",
            "And I don't miss what we had, but could someone give",
            "A message to the smallest man who ever lived?",
            "Were you sent by someone who wanted me dead?",
            "Did you sleep with a gun underneath our bed?",
            "Were you writin' a book? Were you a sleeper cell spy?",
            "In fifty years, will all this be declassified?",
            `And you'll confess why you did it and I'll say, "Good riddance"`,
            "'Cause it wasn't sexy once it wasn't forbidden",
            "I would've died for your sins, instead, I just died inside",
            "And you deserve prison, but you won't get time",
            "You'll slide into inboxes and slip through the bars",
            "You crashed my party and your rental car",
            "You said normal girls were boring",
            "But you were gone by the morning",
            "You kicked out the stage lights, but you're still performing",
            "And in plain sight you hid",
            "But you are what you did",
            "And I'll forget you, but I'll never forgive",
            "The smallest man who ever lived"
          ]
        },
        {
          title: "The Alchemy",
          lines: [
            "This happens once every few lifetimes",
            "These chemicals hit me like white wine",
            "What if I told you I'm back?",
            "The hospital was a drag",
            "Worst sleep that I ever had",
            "I circled you on a map",
            "I haven't come around in so long",
            "But I'm coming back so strong",
            "So when I touch down",
            "Call the amateurs and cut 'em from the team",
            "Ditch the clowns, get the crown",
            "Baby, I'm the one to beat",
            "'Cause the sign on your heart",
            "Said it's still reserved for me",
            "Honestly, who are we to fight th\u0435 alchemy?",
            "Hey, you, what if I told you we'r\u0435 cool?",
            "That child's play back in school",
            "Is forgiven under my rule",
            "I haven't come around in so long",
            "But I'm making a comeback to where I belong",
            "So when I touch down",
            "Call the amateurs and cut 'em from the team",
            "Ditch the clowns, get the crown",
            "Baby, I'm the one to beat",
            "'Cause the sign on your heart",
            "Said it's still reserved for me",
            "Honestly, who are we to fight the alchemy?",
            "These blokes warm the benches",
            "We've been on a winning streak",
            `He jokes that it's heroin, but this time with an "E"`,
            "'Cause the sign on your heart",
            "Said it's still reserved for me",
            "Honestly, who are we to fight the alchemy?",
            "Shirts off and your friends lift you up over their heads",
            "Beer stickin' to the floor, cheers chanted 'cause they said",
            '"There was no chance trying to be the greatest in the league"',
            "Where's the trophy? He just comes runnin' over to me",
            "Touchdown",
            "Call the amateurs and cut 'em from the team",
            "Ditch the clowns, get the crown",
            "Baby, I'm the one to beat",
            "'Cause the sign on your heart",
            "Said it's still reserved for me",
            "Honestly, who are we to fight the alchemy?",
            "These blokes warm the benches",
            "We've been on a winning streak",
            `He jokes that it's heroin, but this time with an "E"`,
            "'Cause the sign on your heart",
            "Said it's still reserved for me",
            "Honestly, who are we to fight the alchemy?",
            "This happens once every few lifetimes",
            "These chemicals hit me like white wine"
          ]
        },
        {
          title: "Clara Bow",
          lines: [
            '"You look like Clara-Bow',
            "In this light, remarkable",
            "All your life, did you know",
            `You'd be picked like a rose?"`,
            `"I'm not trying to exaggerate`,
            "But I think I might die if it happened",
            "Die if it happened to me",
            "No one in my small town",
            `Thought I'd see the lights of Manhattan"`,
            `"This town is fake, but you're the real thing`,
            "Breath of fresh air through smoke rings",
            "Take the glory, give everything",
            'Promise to be dazzling"',
            '"You look like Stevie-Nicks',
            "In '75, the hair and lips",
            "Crowd goes wild at her fingertips",
            'Half moonshine, a full \u0435clipse"',
            `"I'm not trying to exaggerat\u0435`,
            "But I think I might die if I made it, die if I made it",
            "No one in my small town thought I'd meet these suits in L.A.",
            'They all wanna say..."',
            `"This town is fake, but you're the real thing`,
            "Breath of fresh air through smoke rings",
            "Take the glory, give everything",
            "Promise to be dazzling",
            "The crown is stained, but you're the real queen",
            "Flesh and blood amongst war machines",
            "You're the new god we're worshipping",
            'Promise to be dazzling"',
            "Beauty is a beast that roars down on all fours",
            "Demanding more",
            "Only when your girlish glow flickers just so",
            "Do they let you know",
            "It's hell on earth to be heavenly",
            "Them's the breaks, they don't come gently",
            '"You look like Taylor-Swift',
            "In this light, we're lovin' it",
            "You've got edge, she never did",
            `The future's bright, dazzling"`
          ]
        },
        {
          title: "The Black Dog",
          lines: [
            "I am someone who until recent events",
            "You shared your secrets with",
            "And your location, you forgot to turn it off",
            "And so I watch as you walk",
            "Into some bar called The-Black-Dog",
            "And pierce new holes in my heart",
            "You forgot to turn it off",
            "And it hits me",
            "I just don't understand",
            "How you don't miss me in The-Black-Dog",
            'When someone plays "The-Starting-Line"',
            "And you jump up, but she's too young to know this song",
            "That was intertwined in the magic fabric of our dreaming",
            "Old habits die screaming",
            "I move through the world with the heartbroken",
            "My longings stay unspoken",
            "And I may never open up th\u0435 way I did for you",
            "And all of those best laid plans",
            "You said I needed a brav\u0435 man",
            "Then proceeded to play him",
            "Until I believed it too",
            "And it kills me",
            "I just don't understand",
            "How you don't miss me in the shower",
            "And remember how my rain-soaked body",
            "Was shakin', do you hate me?",
            "Was it hazing? For a cruel fraternity",
            "I pledged and I still mean it",
            "Old habits die screaming",
            "Six weeks of breathin' clean air",
            "I still miss the smoke",
            "Were you makin' fun of me",
            "With some esoteric joke?",
            "Now I wanna sell my house",
            "And set fire to all my clothes",
            "And hire a priest to come and exorcise my demons",
            "Even if I die screaming",
            "And I hope you hear it",
            "And I hope it's shitty in The-Black-Dog",
            'When someone plays "The-Starting-Line"',
            "And you jump up, but she's too young to know this song",
            "That was intertwined in the tragic fabric of our dreaming",
            "'Cause tail between your legs, you're leavin'",
            "I still can't believe it",
            "'Cause old habits die screaming"
          ]
        },
        {
          title: "Imgonnagetyouback",
          lines: [
            "Yeah",
            "Lilac short skirt, the one that fits me like skin",
            "Did your research, you knew the price goin' in",
            "And I'll tell you one thing, honey",
            "I can tell when somebody still wants me, come clean",
            "Standin' at the bar like something's funny, bubbly",
            "Once you fix your face, I'm goin' in (Yeah)",
            "Whether I'm gonna be your wife or",
            "Gonna smash up your bike, I haven't decided yet",
            "But I'm gonna get you back",
            "Whether I'm gonna curse you out or",
            "Take you back to my house, I haven't decid\u0435d yet",
            "But I'm gonna get you back",
            "I, I hear th\u0435 whispers in your eyes",
            "I'll make you wanna think twice",
            "You'll find that you were never not mine",
            "(You're mine)",
            "Small talk, big love, act like I don't care what you did",
            "I'm an Aston-Martin that you steered straight into the ditch",
            "Then ran and hid",
            "And I'll tell you one thing, honey",
            "I can take the upper hand and touch your body",
            "Flip the script and leave you like a dumb house party",
            "Or I might just love you 'til the end",
            "Whether I'm gonna be your wife or",
            "Gonna smash up your bike, I haven't decided yet",
            "But I'm gonna get you back",
            "Whether I'm gonna flip you off or",
            "Pull you into the closet, I haven't decided yet",
            "But I'm gonna get you back",
            "I, I hear the whispers in your eyes",
            "I'll make you wanna think twice",
            "You'll find that you were never not mine",
            "(You're mine)",
            "I can feel it coming, humming in the way you move",
            "Push the reset button, we're becomin' something new",
            "Say you got somebody, I'll say I got someone too",
            "Even if it's handcuffed, I'm leavin' here with you",
            "Bygones will be bygone, eras fadin' into gray (Fading into gray)",
            "We broke all the pieces, but still wanna play the game (Oh)",
            "Told my friends I hate you, but I love you just the same",
            "Pick your poison, babe, I'm poison either way",
            "Whether I'm gonna be your wife or",
            "Gonna smash up your bike, I haven't decided yet",
            "But I'm gonna get you back",
            "Whether I'm gonna curse you out or",
            "Take you back to my house, I haven't decided yet",
            "But I'm gonna get you back",
            "I, I hear the whispers in your eyes",
            "I'll make you wanna think twice",
            "You'll find that you were never not mine",
            "I'm gonna get you back"
          ]
        },
        {
          title: "The Albatross",
          lines: [
            "Wise men once said",
            '"Wild winds are death to the candle"',
            "A rose by any other name is a scandal",
            "Cautions issued, he stood",
            "Shooting the messengers",
            "They tried to warn him about her",
            "Cross your thoughtless heart",
            "Only liquor anoints you",
            "She's the albatross",
            "She is here to destroy you",
            "Wise men once said",
            '"One bad seed kills the garden"',
            '"One less temptress, one less dagger to sharpen"',
            "Locked me up in towers",
            "But I'd visit in your dreams",
            "And they tried to warn you about me",
            "Cross your thoughtless heart",
            "Only liquor anoints you",
            "She's the albatross",
            "She is here to destroy you",
            "Devils that you know",
            "Raise worse hell than a stranger",
            "She's the death you chose",
            "You're in terrible danger",
            "And when that sky rains fire on you",
            "And you're persona-non-grata",
            "I'll tell you how I've been there too",
            "And that none of it matters",
            "Wise men once read fake news",
            "And they believed it",
            "Jackals raised their hackles",
            "You couldn't conceive it",
            "You were sleeping soundly",
            "When they dragged you from your bed",
            "And I tried to warn you about them",
            "So I crossed my thoughtless heart",
            "Spread my wings like a parachute",
            "I'm the albatross",
            "I swept in at the rescue",
            "The devil that you know",
            "Looks now more like an angel",
            "I'm the life you chose",
            "And all this terrible danger",
            "(This terrible danger)",
            "So cross your thoughtless heart",
            "She's the albatross",
            "She is here to destroy you"
          ]
        },
        {
          title: "Chloe Or Sam Or Sophia Or Marcus",
          lines: [
            "Your hologram stumbled into my apartment",
            "Hands in the hair of somebody in darkness",
            "Named Chloe or Sam or Sophia or Marcus",
            "And I just watched it happen",
            "As the decade would play us for fools",
            "And you saw my bones out with somebody new",
            "Who seemed like he would've bullied you in school",
            "And you just watched it happen",
            "If you wanna break my cold, cold heart",
            'Just say, "I loved you the way that you were"',
            "If you wanna tear my world apart",
            "Just say you've always wondered",
            "You said some things that I can't unabsorb",
            "You turned me into an idea of sorts",
            "You needed me, but you needed drugs more",
            "And I couldn't watch it happen",
            "I changed into goddesses, villains, and fools",
            "Changed plans and lovers and outfits and rules",
            "All to outrun my desertion of you",
            "And you just watched it",
            "If you wanna break my cold, cold heart",
            'Just say, "I loved you the way that you were"',
            "If you wanna tear my world apart",
            "Just say you've always wondered",
            "If the glint in my eye traced the depths of your sigh",
            "Down that passage in time back to the moment",
            "I crashed into you, like so many wrecks do",
            "Too impaired by my youth to know what to do",
            "So if I sell my apartment",
            "And you have some kids with an internet starlet",
            "Will that make your memory fade from this scarlet maroon?",
            "Like it never happened",
            "Could it be enough to just float in your orbit?",
            "Can we watch our phantoms like watching wild horses?",
            "Cooler in theory, but not if you force it to be",
            "It just didn't happen",
            "So if you wanna break my cold, cold heart",
            "Say you loved me",
            "And if you wanna tear my world apart",
            "Say you'll always wonder",
            "'Cause I wonder",
            "Will I always",
            "Will I always wonder?"
          ]
        },
        {
          title: "How Did It End?",
          lines: [
            "(Uh-oh, uh-oh)",
            "We hereby conduct this post-mortem",
            "He was a hot house flower to my outdoorsman",
            "Our maladies were such we could not cure them",
            "And so a touch that was my birthright became foreign",
            "Come one, come all, it's happenin' again",
            "The empathetic hunger descends",
            "We'll tell no one except all of our friends",
            "We must know",
            "How did it end?",
            "(Uh-oh, uh-oh)",
            "We were blind to unforeseen circumstances",
            "We learned th\u0435 right steps to different danc\u0435s",
            "And fell victim to interlopers' glances",
            "Lost the game of chance, what are the chances?",
            "Soon, they'll go home to their husbands",
            "Smug 'cause they know they can trust him",
            "Then feverishly calling their cousins",
            '"Guess who we ran into at the shops?',
            "Walking in circles like she was lost",
            `Didn't you hear? They called it all off"`,
            "One gasp and then",
            '"How did it end?"',
            "Say it once again with feeling",
            "How the death rattle breathing",
            "Silenced as the soul was leaving",
            "The deflation of our dreaming",
            "Leaving me bereft and reeling",
            "My beloved ghost and me",
            "Sitting in a tree",
            "D-Y-I-N-G",
            "It's happenin' again",
            "How did it end?",
            "I can't pretend like I understand",
            "How did it end?",
            "Come one, come all, it's happenin' again",
            "The empathetic hunger descends",
            "We'll tell no one except all of our friends",
            "But I still don't know",
            "How did it end"
          ]
        },
        {
          title: "So High School",
          lines: [
            "I feel so high school every time I look at you",
            "I wanna find you in a crowd just to hide from you",
            "And in a blink of a crinklin' eye",
            "I'm sinkin', our fingers entwined",
            "Cheeks pink in the twinkling lights",
            "Tell me 'bout the first time you saw me",
            "I'll drink what you think, and I'm high",
            "From smokin' your jokes all damn night",
            "The brink of a wrinkle in time",
            "Bittersweet sixteen suddenly",
            "I'm watchin' American-Pie with you on a Saturday night",
            "Your friends are around, so be quiet",
            "I'm trying to stifle my sighs",
            "'Cause I feel so high school every time I look at you",
            "But look at you",
            "Ah-ah-ah-ah-ah",
            "Are you gonna marry, kiss or kill me? (Kill me)",
            "It's just a game, but really (Really)",
            "I'm bettin' on all three for us two (All three)",
            "Get my car door, isn't that sweet? (That sweet)",
            "Then pull me to th\u0435 backseat (The backseat)",
            "No on\u0435's ever had me (Had me), not like you",
            "Truth, dare, spin bottles",
            "You know how to ball, I know Aristotle",
            "Brand-new, full throttle",
            "Touch me while your bros play Grand-Theft-Auto",
            "It's true, swear, scouts honor",
            "You knew what you wanted and, boy, you got her",
            "Brand-new, full throttle",
            "You already know, babe",
            "I feel like laughin' in the middle of practice",
            "Do that impression you did of your dad again",
            "I'm hearing voices like a madman",
            "And in a blink of a crinklin' eye",
            "I'm sinkin', our fingers entwined",
            "Cheeks pink in the twinkling lights",
            "Tell me 'bout the first time you saw me",
            "I'll drink what you think, and I'm high",
            "From smokin' your jokes all damn night",
            "The brink of a wrinkle in time",
            "Bittersweet sixteen suddenly",
            "I'm watchin' American-Pie with you on a Saturday night",
            "Your friends are around, so be quiet",
            "I'm trying to stifle my sighs",
            "'Cause I feel so high school (Feel so high school) every time I look at you",
            "But look at you",
            "Truth, dare, spin bottles",
            "You know how to ball, I know Aristotle",
            "Brand-new, full throttle",
            "Touch me while your bros play Grand-Theft-Auto",
            "It's true, swear, scouts honor",
            "You knew what you wanted and, boy, you got her",
            "Brand-new, full throttle",
            "You already know, babe",
            "You already know, babe"
          ]
        },
        {
          title: "I Hate It Here",
          lines: [
            "Quick, quick, tell me something awful",
            "Like you are a poet trapped inside the body of a finance guy",
            "Tell me all your secrets, all you'll ever be is",
            "My eternal consolation prize",
            "You see, I was a debutante in another life, but",
            "Now I seem to be scared to go outside",
            "If comfort is a construct, I don't believe in good luck",
            "Now that I know what's what",
            "I hate it here so I will go to secret gardens in my mind",
            "People need a key to get to, the only one is mine",
            "I read about it in a book when I was a precocious child",
            "No mid-sized city hopes and small-town fears",
            "I'm there most of the year 'cause I hate it here",
            "I hate it here",
            "My friends used to play a game where",
            "We would pick a decade",
            "We wished we could live in instead of this",
            "I'd say the 1830s but without all the racists",
            "And getting married off for the highest bid",
            "Everyone would look down 'cause it wasn't fun now",
            "Seems like it was never even fun back then",
            "Nostalgia is a mind's trick",
            "If I'd been there, I'd hate it",
            "It was freezing in the palace",
            "I hate it here so I will go to lunar valleys in my mind",
            "When they found a better planet, only the gentle survived",
            "I dreamed about it in the dark, the night I felt like I might die",
            "No mid-sized city hopes and small-town fears",
            "I'm there most of the year 'cause I hate it here",
            "I hate it here",
            "I'm lonely, but I'm good",
            "I'm bitter, but I swear I'm fine",
            "I'll save all my romanticism for my inner life and I'll get lost on purpose",
            "This place made me feel worthless",
            "Lucid dreams like electricity, the current flies through me",
            "And in my fantasies, I rise above it",
            "And way up there, I actually love it",
            "I hate it here so I will go to secret gardens in my mind",
            "People need a key to get to, the only one is mine",
            "I read about it in a book when I was a precocious child",
            "No mid-sized city hopes and small-town fears",
            "I'm there most of the year 'cause I hate it here",
            "I hate it here",
            "Quick, quick, tell me something awful",
            "Like you are a poet trapped inside the body of a finance guy"
          ]
        },
        {
          title: "Thank You Aimee",
          lines: [
            "When I picture my hometown",
            "There's a bronze, spray-tanned statue of you",
            "And a plaque underneath it",
            "That threatens to push me down the stairs at our school",
            "And it was always the same searing pain",
            "But I dreamed that one day I could say",
            "All that time you were throwin' punches, I was buildin' somethin'",
            "And I can't forgive the way you made me feel",
            `Screamed, "Fuck you, Aimee" to the night sky as the blood was gushin'`,
            "But I can't forget the way you made me heal",
            "And it wasn't a fair fight",
            "Or a clean kill each time that Aimee stomp\u0435d across my grave",
            "And then she wrot\u0435 headlines",
            "In the local paper, laughing at each baby step I'd take",
            "And it was always the same searing pain",
            "But I prayed that one day I could say",
            "All that time you were throwin' punches, I was buildin' somethin'",
            "And I couldn't wait to show you it was real",
            `Screamed, "Fuck you, Aimee" to the night sky as the blood was gushin'`,
            "But I can't forget the way you made me heal",
            "Everyone knows that my mother is a saintly woman",
            "But she used to say she wished that you were dead",
            "I pushed each boulder up the hill",
            "Your words are still just ringing in my head, ringing in my head",
            "I wrote a thousand songs that you find uncool",
            "I built a legacy that you can't undo",
            "But when I count the scars, there's a moment of truth",
            "That there wouldn't be this if there hadn't been you",
            "And maybe you've reframed it",
            "And in your mind, you never beat my spirit black and blue",
            "I don't think you've changed much",
            "And so I changed your name and any real defining clues",
            "And one day, your kid comes home singin'",
            "A song that only us two is gonna know is about you, 'cause",
            "All that time you were throwin' punches, it was all for nothin'",
            "And our town, it looks so small from way up here",
            `Screamed, "Thank you, Aimee" to the night sky and the stars are stunnin'`,
            "'Cause I can't forget the way you made me heal",
            "Everyone knows that my mother is a saintly woman",
            "But she used to say she wished that you were dead",
            "So I pushed each boulder up that hill",
            "Your words were still just ringin' in my head, ringin' in my head",
            "Thank you, Aimee",
            "Thank you, Aimee"
          ]
        },
        {
          title: "I Look In People\u2019s Windows",
          lines: [
            "I had died the tiniest death",
            "I spied the catch in your breath",
            "Out, out, out, out, out, out",
            "Northbound I got carried away",
            "As you boarded your train",
            "South, south, south, south, south, south",
            "A feather taken by the wind blowing",
            "I'm afflicted by the not knowing so",
            "I look in people's windows",
            "Transfixed by rose golden glows",
            "They have their friends over to drink nice wine",
            "I look in people's windows",
            "In case you're at their table",
            "What if your eyes looked up and met mine",
            "One more time",
            "You had stopped and tilt\u0435d your head",
            "I still ponder what it meant",
            "Now, now, now, now, now, now",
            "I tri\u0435d searching faces on streets",
            "What are the chances you'd be",
            "Downtown, downtown, downtown",
            "Does it feel alright to not know me?",
            `I'm addicted to the "if only"`,
            "So I look in people's windows",
            "Like I'm some deranged weirdo",
            "I attend Christmas parties from outside",
            "I look in people's windows",
            "In case you're at their table",
            "What if your eyes looked up and met mine",
            "One more time"
          ]
        },
        {
          title: "The Prophecy",
          lines: [
            "Hand on the throttle",
            "Thought I caught lightning in a bottle",
            "Oh, but it's gone again",
            "And it was written",
            "I got cursed like Eve got bitten",
            "Oh, was it punishment?",
            "Pad around when I get home",
            "I guess a lesser woman would've lost hope",
            "A greater woman wouldn't beg",
            "But I looked to the sky and said",
            "Please",
            "I've been on my knees",
            "Change the prophecy",
            "Don't want money",
            "Just someone who wants my company",
            "Let it once be me",
            "Who do I have to speak to",
            "About if they can redo the prophecy?",
            "Cards on th\u0435 table",
            "Mine play out like fools in a fabl\u0435",
            "Oh, it was sinking in (Sinking in, oh)",
            "Slow is the quicksand",
            "Poison blood from the wound of the pricked hand",
            "Oh, still I dream of him",
            "Please",
            "I've been on my knees",
            "Change the prophecy",
            "Don't want money",
            "Just someone who wants my company",
            "Let it once be me",
            "Who do I have to speak to",
            "About if they can redo the prophecy?",
            "And I sound like an infant",
            "Feeling like the very last drops of an ink pen",
            "A greater woman stays cool",
            "But I howl like a wolf at the moon",
            "And I look unstable",
            "Gathered with a coven 'round a sorceress' table",
            "A greater woman has faith",
            "But even statues crumble if they're made to wait",
            "I'm so afraid I sealed my fate",
            "No sign of soulmates",
            "I'm just a paperweight in shades of greige",
            "Spending my last coin so someone will tell me it'll be okay",
            "Ooh",
            "Ooh",
            "Ooh",
            "Ooh",
            "Please",
            "I've been on my knees",
            "Change the prophecy",
            "Don't want money",
            "Just someone who wants my company",
            "Let it once be me",
            "Who do I have to speak to",
            "About if they can redo the prophecy?",
            "Who do I have to speak to",
            "To change the prophecy?",
            "Hand on the throttle",
            "Thought I caught lightning in a bottle",
            "Oh, but it's gone again",
            "Pad around when I get home",
            "I guess a lesser woman would've lost hope",
            "A greater woman wouldn't beg",
            "But I looked to the sky and said (Please)"
          ]
        },
        {
          title: "Cassandra",
          lines: [
            "I was in my new house placing daydreams",
            "Patching up the crack along the wall",
            "I pass it and lose track of what I'm saying",
            "'Cause that's where I was when I got the call",
            "When the first stone's thrown, there's screamin'",
            "In the streets, there's a raging riot",
            `When it's "Burn the bitch," they're shrieking`,
            "When the truth comes out, it's quiet",
            "So, they killed Cassandra first 'cause she feared the worst",
            "And tried to tell the town",
            "So they filled my cell with snakes, I regret to say",
            "Do you believe me now?",
            "I was in my tower weaving nightmares",
            "Twisting all my smiles into snarls",
            `They say, "What doesn't kill you makes you aware"`,
            "What happens if it becomes who you are?",
            "So, they killed Cassandra first 'cause she feared the worst",
            "And tried to tell the town",
            "So they set my life in flames, I regret to say",
            "Do you believe me now?",
            "They knew, they knew, they knew the whole time",
            "That I was onto somethin'",
            "The family, the pure greed, the Christian chorus line",
            "They all said nothin'",
            "Blood's thick, but nothin' like a payroll",
            "Bet they never spared a prayer for my soul",
            "You can mark my words that I said it first",
            "In a mourning warning, no one heard",
            "I patched up the crack along the wall",
            "I pass it and lose track of what I'm saying",
            "'Cause that's where I was when I lost it all",
            "So, they killed Cassandra first 'cause she feared the worst",
            "And tried to tell the town",
            "So they filled my cell with snakes, I regret to say",
            "Do you believe me now?",
            "Ah, ah-ah-ah, ah",
            "I was onto somethin'",
            "Ah-ah-ah, ah",
            "They all said nothin'",
            "Blood's thick but nothin' like a payroll",
            "Bet they never spared a prayer for my soul",
            "You can mark my words that I said it first",
            "In a mourning warning, no one heard",
            "No one heard, not a single word was heard",
            "When the first stone's thrown, there's screamin'",
            "In the streets, there's a raging riot",
            `When it's "Burn the bitch," they're shrieking`,
            "When the truth comes out, it's quiet",
            "It's so quiet"
          ]
        },
        {
          title: "Peter",
          lines: [
            "Forgive me, Peter",
            "My lost fearless leader",
            "In closets like cedar",
            "Preserved from when we were just kids",
            "Is it somethin' I did?",
            "The goddess of timing",
            "Once found us beguiling",
            "She said she was trying",
            "Peter, was she lying?",
            "My ribs get the feeling she did",
            "And I didn't wanna come down",
            "I thought it was just goodbye for now",
            "You said you were gonna grow up",
            "Then you were gonna come find me",
            "Said you were gonna grow up",
            "Th\u0435n you were gonna come find m\u0435",
            "Said you were gonna grow up",
            "Then you were gonna come find me",
            "Words from the mouths of babes",
            "Promises oceans deep",
            "But never to keep",
            "Oh, never to keep",
            "Are you still a mind reader?",
            "A natural scene stealer?",
            "I've heard great things, Peter",
            "But life was always easier on you",
            "Than it was on me",
            "And sometimes it gets me",
            "When crossing your jet stream",
            "We both did the best we could do",
            "Underneath the same moon",
            "In different galaxies",
            "And I didn't wanna hang around",
            "We said it was just goodbye for now",
            "You said you were gonna grow up",
            "Then you were gonna come find me",
            "Said you were gonna grow up",
            "Then you were gonna come find me",
            "Said you were gonna grow up",
            "Then you were gonna come find me",
            "Words from the mouths of babes",
            "Promises oceans deep",
            "But never to keep",
            "Never to keep",
            "And I won't confess that I waited, but I let the lamp burn",
            "As the men masqueraded, I hoped you'd return",
            "With your feet on the ground, tell me all that you'd learned",
            "'Cause love's never lost when perspective is earned",
            "And you said you'd come and get me, but you were twenty-five",
            "And the shelf life of those fantasies has expired",
            'Lost to the "Lost-Boys" chapter of your life',
            "Forgive me, Peter, please know that I tried",
            "To hold on (Hold on) to the days (To the days)",
            "When you were mine",
            "But the woman who sits by the window",
            "Has turned out the light",
            "You said you were gonna grow up",
            "Then you were gonna come find me",
            "Said you were gonna grow up",
            "You said you were gonna grow up",
            "Then you were gonna come find me",
            "Said you were gonna grow up",
            "You said you were gonna grow up",
            "Then you were gonna come find me",
            "Said you were gonna grow up",
            "Then you were gonna come find me",
            "Said you were gonna grow up",
            "Then you were gonna come find me",
            "Words from the mouths of babes",
            "Promises oceans deep",
            "But never to keep"
          ]
        },
        {
          title: "The Bolter",
          lines: [
            "By all accounts, she almost drowned",
            "When she was six in frigid water",
            "And I can confirm she made",
            "A curious child, ever reviled",
            "By everyone except her own father",
            "With a quite bewitching face",
            "Splendidly selfish, charmingly helpless",
            "Excellent fun 'til you get to know her",
            "Then she runs like it's a race",
            "Behind her back, her best mates laughed",
            'And they nicknamed her "The Bolter"',
            "Started with a kiss",
            '"Oh, we must stop meeting like this"',
            "But it always ends up with a town car speeding",
            "Out the drive one evening",
            "Ended with the slam of a door",
            "Then he'll call her a whore",
            "Wish he wouldn't be sore",
            "But as she was leaving",
            "It felt like breathing",
            "All her fuckin' lives",
            "Flashed before her eyes",
            "It feels like the time",
            "She fell through the ice",
            "Then came out alive",
            "He was a cad, wanted her bad",
            "Just like any good trophy hunter",
            "And she liked the way it tastes",
            "Taming a bear, making him care",
            "Watching him jump then pulling him under",
            "And at first blush, this is fate",
            "When it's all roses, portrait poses",
            "Central-Park-Lake in tiny rowboats",
            "What a charming Saturday",
            "That's when she sees the littlest leaks",
            "Down in the floorboards",
            "And she just knows she must bolt",
            "Started with a kiss",
            '"Oh, we must stop meeting like this"',
            "But it always ends up with a town car speeding",
            "Out the drive one evening",
            "Ended with the slam of a door",
            "Then he'll call her a whore",
            "Wish he wouldn't be sore",
            "But as she was leaving",
            "It felt like breathing",
            "All her fuckin' lives",
            "Flashed before her eyes (Ah-ah-ah)",
            "It feels like the time",
            "She fell through the ice",
            "Then came out alive",
            "She's been many places with",
            "Men of many faces",
            "First, they're off to the races",
            "And she's laughing, drawin' aces",
            "But none of it is changin'",
            "That the chariot is waitin'",
            "Hearts are hers for the breakin'",
            "There's escape in escaping",
            "Started with a kiss",
            '"Oh, we must stop meeting like this"',
            "But it always ends up with a town car speeding",
            "Out the drive one evenin'",
            "Ended with the slam of a door",
            "But she's got the best stories",
            "You can be sure",
            "That as she was leaving",
            "It felt like freedom",
            "All her fuckin' lives",
            "Flashed before her eyes (And she realized)",
            "It feels like the time",
            "She fell through the ice",
            "Then came out alive"
          ]
        },
        {
          title: "Robin",
          lines: [
            "Long may you reign",
            "You're an animal, you are bloodthirsty",
            "Out window panes talking utter nonsense",
            "You have no idea",
            "Strings tied to levers",
            "Slowed-down clocks tethered",
            "All this showmanship",
            "To keep it for you in sweetness",
            "Way to go, tiger",
            "Higher and higher",
            "Wilder and lighter",
            "For you",
            "Long may you roar",
            "At your dinosaurs",
            "You're a just ruler",
            "Covered in mud, you look ridiculous",
            "And you have no idea",
            "Buried down deep",
            "And out of your reach",
            "The secret we all vowed",
            "To keep it from you in sweetness",
            "Way to go, tiger",
            "Higher and higher",
            "Wilder and lighter",
            "For you",
            "You got the dragonflies above your bed",
            "You have a favorite spot on the swing set",
            "You have no room in your dreams for regrets",
            "(You have no idea)",
            "The time will arrive for the cruel and the mean",
            "You'll learn to bounce back just like your trampoline",
            "But now we'll curtail your curiosity",
            "In sweetness",
            "Way to go, tiger (Way to go, tiger)",
            "Higher and higher (Higher and higher)",
            "Wilder and lighter",
            "For you"
          ]
        },
        {
          title: "The Manuscript",
          lines: [
            "Now and then she rereads the manuscript",
            "Of the entire torrid affair",
            "They compared their licenses",
            `He said, "I'm not a donor but`,
            `I'd give you my heart if you needed it"`,
            "She rolled her eyes and said",
            `"You're a professional"`,
            'He said, "No, just a good samaritan"',
            "He said that if the sex was half as good as the conversation was",
            "Soon they'd be pushin' strollers",
            "But soon it was over",
            "In the age of him, she wished she was thirty",
            "And made coffee every morning in a Fr\u0435nch-press",
            "Afterwards she only at\u0435 kids' cereal",
            "And couldn't sleep unless it was in her mother's bed",
            "Then she dated boys who were her own age",
            "With dart boards on the backs of their doors",
            "She thought about how he said since she was so wise beyond her years",
            "Everything had been above board",
            "She wasn't sure",
            "And the years passed",
            "Like scenes of a show",
            "The professor said to write what you know",
            "Lookin' backwards",
            "Might be the only way to move forward",
            "Then the actors",
            "Were hitting their marks",
            "And the slow dance",
            "Was alight with the sparks",
            "And the tears fell",
            "In synchronicity with the score",
            "And at last",
            "She knew what the agony had been for",
            "The only thing that's left is the manuscript",
            "One last souvenir from my trip to your shores",
            "Now and then I reread the manuscript",
            "But the story isn't mine anymore"
          ]
        }
      ]
    }
  ];

  // src/beads.ts
  var palettes = {
    "Taylor Swift": ["#4097A9", "#3A5E32", "#E8C9A8", "#C37F86"],
    Fearless: ["#EDE1D2", "#D3B882", "#A4773B", "#5A3716"],
    "Speak Now": ["#944079", "#774E8E", "#E5AF64", "#4956A1"],
    Red: ["#A72347", "#E9E7DB", "#5F4546", "#A6A385"],
    "1989": ["#A99497", "#8A7283", "#B4703F", "#C8B79B"],
    Reputation: ["#F7F7F7", "#C2C2C2", "#555555", "#181818"],
    Lover: ["#F1C2DB", "#AEBCD7", "#FBDECC", "#99BDE5"],
    Folklore: ["#979797", "#F2F2F2", "#484848", "#5C5C5C"],
    Evermore: ["#55291C", "#B05925", "#7C6838", "#434347"],
    Midnights: ["#4C5987", "#92B0BE", "#89222E", "#0D102F"],
    "The Tortured Poets Department": ["#EFECE6", "#C7C2B8", "#FFFFFF", "#BEAD95"]
  };
  var total = 0;
  var tooLong = 0;
  for (const album of albums_default) {
    for (const song of album.songs) {
      total++;
      if (song.title.length > 21) {
        tooLong++;
        console.log(song.title + ", " + song.title.length);
      }
    }
  }
  console.log("total: " + total);
  console.log("too long: " + tooLong);
  var albums = albums_default;
  for (const album of albums) {
    album.songs = album.songs.filter((s) => s.title.length <= 21);
  }
  function darkenColor(color, factor) {
    const r = Math.max(0, Math.floor(parseInt(color.substring(1, 3), 16) * factor));
    const g = Math.max(0, Math.floor(parseInt(color.substring(3, 5), 16) * factor));
    const b = Math.max(0, Math.floor(parseInt(color.substring(5, 7), 16) * factor));
    return `#${r.toString(16).padStart(2, "0")}${g.toString(16).padStart(2, "0")}${b.toString(16).padStart(2, "0")}`;
  }
  function generateBeads(canvas, world) {
    const album = albums[Math.floor(Math.random() * albums.length)];
    console.log(album);
    const song = album.songs[Math.floor(Math.random() * album.songs.length)];
    const palette = palettes[album.title];
    const maxWidth = 375;
    const boundsWidth = Math.min(canvas.clientWidth, maxWidth);
    const offsetX = (canvas.clientWidth - boundsWidth) / 2;
    const beads = [];
    for (let i = 0; i < song.title.length; i++) {
      const letter = song.title[i];
      if (letter == " ") continue;
      const xPosition = offsetX + Math.random() * boundsWidth;
      const yPosition = canvas.clientHeight - canvas.clientHeight / 2 * Math.random() - 40;
      const fillStyle = "#ffffff";
      const strokeStyle = darkenColor(fillStyle, 0.7);
      const element = import_matter_js.Bodies.circle(xPosition, yPosition, 20, {
        restitution: 0.1,
        render: {
          fillStyle,
          strokeStyle
        }
      });
      beads.push({ body: element, attached: false, lastMousePosition: null, letter: letter.toUpperCase() });
      import_matter_js.World.add(world, element);
    }
    const remaining = 45 - song.title.length;
    for (let i = 0; i < remaining; i++) {
      const xPosition = offsetX + Math.random() * boundsWidth;
      const yPosition = canvas.clientHeight - canvas.clientHeight / 2 * Math.random() - 40;
      const fillStyle = palette[Math.floor(Math.random() * palette.length)];
      const strokeStyle = darkenColor(fillStyle, 0.7);
      const element = import_matter_js.Bodies.circle(xPosition, yPosition, 20, {
        restitution: 0.1,
        render: {
          fillStyle,
          strokeStyle
        }
      });
      beads.push({ body: element, attached: false, lastMousePosition: null, letter: "" });
      import_matter_js.World.add(world, element);
    }
    console.log(song.title);
    return { beads, album, song, palette };
  }

  // src/index.ts
  var import_vara = __toESM(require_vara_min());
  function setup() {
    const canvas = document.querySelector("canvas");
    const ctx = canvas.getContext("2d");
    const scale = window.devicePixelRatio || 1;
    canvas.width = canvas.clientWidth * scale;
    canvas.height = canvas.clientHeight * scale;
    ctx.scale(scale, scale);
    const engine = import_matter_js2.Engine.create();
    engine.gravity.y = 0.9;
    const world = engine.world;
    const maxWidth = 375;
    const boundsWidth = Math.min(canvas.clientWidth, maxWidth);
    const boundsHeight = canvas.clientHeight;
    const offsetX = (canvas.clientWidth - boundsWidth) / 2;
    const thickness = 50;
    const edges = [
      import_matter_js2.Bodies.rectangle(canvas.clientWidth / 2, -thickness / 2, boundsWidth, thickness, { isStatic: true }),
      import_matter_js2.Bodies.rectangle(canvas.clientWidth / 2, boundsHeight + thickness / 2 - 40, boundsWidth, thickness, {
        isStatic: true
      }),
      import_matter_js2.Bodies.rectangle(offsetX - thickness / 2, boundsHeight / 2, thickness, boundsHeight, { isStatic: true }),
      import_matter_js2.Bodies.rectangle(offsetX + boundsWidth + thickness / 2, boundsHeight / 2, thickness, boundsHeight, {
        isStatic: true
      })
    ];
    import_matter_js2.World.add(world, edges);
    const mouse = import_matter_js2.Mouse.create(canvas);
    mouse.pixelRatio = scale;
    const mouseConstraint = import_matter_js2.MouseConstraint.create(engine, {
      mouse,
      constraint: {
        stiffness: 0.2,
        render: {
          visible: true
        }
      }
    });
    import_matter_js2.World.add(world, mouseConstraint);
    const padding = 30;
    const circleCenter = { x: canvas.clientWidth / 2, y: padding + canvas.clientHeight / 4 };
    const circleRadius = 135;
    const renderer = import_matter_js2.Render.create({
      canvas,
      engine,
      options: {
        width: canvas.clientWidth,
        height: canvas.clientHeight,
        background: "red",
        pixelRatio: scale
      }
    });
    const runner = import_matter_js2.Runner.create();
    import_matter_js2.Runner.run(runner, engine);
    return {
      canvas,
      ctx,
      engine,
      world,
      mouse,
      mouseConstraint,
      renderer,
      scale,
      circleCenter,
      circleRadius
    };
  }
  function getClosestPointOnCircle(g, point) {
    const angle = Math.atan2(point.y - g.circleCenter.y, point.x - g.circleCenter.x);
    const closestPoint = {
      x: g.circleCenter.x + g.circleRadius * Math.cos(angle),
      y: g.circleCenter.y + g.circleRadius * Math.sin(angle)
    };
    const minDistance = import_matter_js2.Vector.magnitude(import_matter_js2.Vector.sub(point, closestPoint));
    return { closestPoint, minDistance };
  }
  function start() {
    const g = setup();
    const { beads, song } = generateBeads(g.canvas, g.world);
    document.querySelector("#refresh").addEventListener("click", () => {
      location.reload();
    });
    function animateLines() {
      const container = document.getElementById("vara-container");
      container.innerHTML = "";
      const line = song.lines[Math.floor(Math.random() * song.lines.length)];
      const x = Math.random() * 100;
      const y = container.clientHeight / 2 + Math.random() * 100;
      const vara = new import_vara.default(
        "#vara-container",
        "./font.json",
        [
          {
            text: line,
            x,
            y
          }
        ],
        {
          strokeWidth: 2,
          fontSize: 20,
          color: "rgba(204, 204, 204, 0.8)"
        }
      );
    }
    animateLines();
    setInterval(animateLines, 5e3);
    function loop() {
      beads.forEach(({ body, attached: attached2, lastMousePosition }, index) => {
        const isBeingDragged = g.mouseConstraint.body === body;
        const mousePosition = g.mouse.position;
        if (isBeingDragged) {
          if (lastMousePosition) {
            const mouseMoveDistance = import_matter_js2.Vector.magnitude(import_matter_js2.Vector.sub(mousePosition, lastMousePosition));
            if (mouseMoveDistance > 30) {
              beads[index].attached = false;
            }
          }
          beads[index].lastMousePosition = { ...mousePosition };
        }
        const { closestPoint, minDistance } = getClosestPointOnCircle(g, body.position);
        if (isBeingDragged || attached2) {
          if (minDistance < 30 && beads[index].attached) {
            const angle = Math.atan2(closestPoint.y - g.circleCenter.y, closestPoint.x - g.circleCenter.x) + Math.PI / 2;
            import_matter_js2.Body.setPosition(body, closestPoint);
            import_matter_js2.Body.setVelocity(body, { x: 0, y: 0 });
            import_matter_js2.Body.setAngle(body, angle + Math.PI);
            const gravityForce = { x: 0, y: 1e-3 };
            import_matter_js2.Body.applyForce(body, body.position, gravityForce);
          } else if (minDistance < 30) {
            const angle = Math.atan2(closestPoint.y - g.circleCenter.y, closestPoint.x - g.circleCenter.x) + Math.PI / 2;
            import_matter_js2.Body.setPosition(body, closestPoint);
            import_matter_js2.Body.setVelocity(body, { x: 0, y: 0 });
            import_matter_js2.Body.setAngle(body, angle + Math.PI);
            const gravityForce = { x: 0, y: 1e-3 };
            import_matter_js2.Body.applyForce(body, body.position, gravityForce);
            beads[index].attached = true;
          }
        }
        if (!isBeingDragged) {
          beads[index].lastMousePosition = null;
        }
      });
      let attached = beads.filter((b) => b.attached);
      if (attached.length >= 21) {
        attached = attached.filter((b) => b.letter != "");
        const title = song.title.replace(/\s+/g, "").toUpperCase();
        const calculateAngle = (bead) => {
          const dx = bead.body.position.x - g.circleCenter.x;
          const dy = bead.body.position.y - g.circleCenter.y;
          return Math.atan2(dy, dx);
        };
        attached.sort((a, b) => calculateAngle(a) - calculateAngle(b)).reverse();
        const attachedLetters = attached.map((b) => b.letter).join("");
        if (attachedLetters === title) {
          document.getElementById("header")?.classList.add("correct");
        }
      }
      const ctx = g.ctx;
      ctx.save();
      ctx.scale(g.scale, g.scale);
      ctx.clearRect(0, 0, g.canvas.clientWidth, g.canvas.clientHeight);
      drawCircle(ctx, g.circleCenter, g.circleRadius);
      drawBeads(ctx, beads);
      ctx.restore();
      requestAnimationFrame(loop);
    }
    loop();
  }
  document.addEventListener("DOMContentLoaded", start);
})();
/*! Bundled license information:

matter-js/build/matter.js:
  (*!
   * matter-js 0.20.0 by @liabru
   * http://brm.io/matter-js/
   * License MIT
   * 
   * The MIT License (MIT)
   * 
   * Copyright (c) Liam Brummitt and contributors.
   * 
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   * 
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   * 
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
